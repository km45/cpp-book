{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u30bc\u30ed\u304b\u3089\u5b66\u3076 C++ \u00b6 \u3053\u306e\u30b5\u30a4\u30c8\u306f C++ \u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u305f\u5b66\u7fd2\u30b5\u30a4\u30c8\u3067\u3059\u3002 \u672c\u66f8\u3092\u901a\u3058\u3066 C++ \u306e\u958b\u767a\u74b0\u5883\u3084\u69cb\u6587\u30fb\u5358\u4f53\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306a\u3069\u304c \u4e00\u901a\u308a\u5b66\u3079\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u5bfe\u8c61 \u00b6 C++ \u3092\u521d\u3081\u3066\u5b66\u3076\u4eba \u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u3092 1 \u3064\u4ee5\u4e0a\u7d4c\u9a13\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u4eba \u95a2\u6570\u3084\u30af\u30e9\u30b9\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306b\u5bfe\u3059\u308b\u77e5\u8b58\u3092\u3042\u308b\u7a0b\u5ea6\u524d\u63d0\u306b\u3057\u307e\u3059\u3002 C++ \u306e\u7279\u5fb4 \u00b6 C++ \u306f \u30d3\u30e3\u30fc\u30cd\u30fb\u30b9\u30c8\u30ed\u30f4\u30b9\u30c8\u30eb\u30c3\u30d7 \u306b\u3088\u308a\u958b\u767a\u3055\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3059\u3002 C++ \u306b\u306f\u4e3b\u306b\u6b21\u306e\u3088\u3046\u306a\u7279\u5fb4\u304c\u3042\u308a\u307e\u3059\u3002 \u9ad8\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9 \u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u304c\u5c11\u306a\u3044 \u67d4\u8edf\u6027\u304c\u3042\u308b \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u51fa\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u4f4e\u30ec\u30d9\u30eb\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u5206\u3001 \u4e0d\u5177\u5408\u304c\u6df7\u5165\u3057\u3084\u3059\u3044\u3068\u3044\u3046\u30c7\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002 \u3057\u304b\u3057\u53e4\u304f\u304b\u3089\u3042\u308b\u8a00\u8a9e\u306e\u305f\u3081\u3001\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u306f\u8c4a\u5bcc\u306b\u63c3\u3063\u3066\u3044\u307e\u3059\u3002 \u4ed6\u306e\u8a00\u8a9e\u306b\u6bd4\u3079\u308b\u3068\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3084\u3084\u8ca7\u5f31\u3067\u3059\u304c\u3001 \u3053\u308c\u306f\u67d4\u8edf\u6027\u3068\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u306e\u7d50\u679c\u3067\u3059\u3002 C++ \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066 \u00b6 C++98 (1998\u5e74\u5236\u5b9a) C++03 (2003\u5e74\u5236\u5b9a) C++11 (2011\u5e74\u5236\u5b9a) C++14 (2014\u5e74\u5236\u5b9a) C++17 (2017\u5e74\u5236\u5b9a) C++20 (2020\u5e74\u5236\u5b9a\u4e88\u5b9a) \u3053\u306e\u30b5\u30a4\u30c8\u3067\u306f C++11 \u3092\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002","title":"\u30db\u30fc\u30e0"},{"location":"#c","text":"\u3053\u306e\u30b5\u30a4\u30c8\u306f C++ \u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u305f\u5b66\u7fd2\u30b5\u30a4\u30c8\u3067\u3059\u3002 \u672c\u66f8\u3092\u901a\u3058\u3066 C++ \u306e\u958b\u767a\u74b0\u5883\u3084\u69cb\u6587\u30fb\u5358\u4f53\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306a\u3069\u304c \u4e00\u901a\u308a\u5b66\u3079\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002","title":"\u30bc\u30ed\u304b\u3089\u5b66\u3076 C++"},{"location":"#_1","text":"C++ \u3092\u521d\u3081\u3066\u5b66\u3076\u4eba \u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u3092 1 \u3064\u4ee5\u4e0a\u7d4c\u9a13\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u4eba \u95a2\u6570\u3084\u30af\u30e9\u30b9\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306b\u5bfe\u3059\u308b\u77e5\u8b58\u3092\u3042\u308b\u7a0b\u5ea6\u524d\u63d0\u306b\u3057\u307e\u3059\u3002","title":"\u5bfe\u8c61"},{"location":"#c_1","text":"C++ \u306f \u30d3\u30e3\u30fc\u30cd\u30fb\u30b9\u30c8\u30ed\u30f4\u30b9\u30c8\u30eb\u30c3\u30d7 \u306b\u3088\u308a\u958b\u767a\u3055\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3059\u3002 C++ \u306b\u306f\u4e3b\u306b\u6b21\u306e\u3088\u3046\u306a\u7279\u5fb4\u304c\u3042\u308a\u307e\u3059\u3002 \u9ad8\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9 \u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u304c\u5c11\u306a\u3044 \u67d4\u8edf\u6027\u304c\u3042\u308b \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u51fa\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u4f4e\u30ec\u30d9\u30eb\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u5206\u3001 \u4e0d\u5177\u5408\u304c\u6df7\u5165\u3057\u3084\u3059\u3044\u3068\u3044\u3046\u30c7\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002 \u3057\u304b\u3057\u53e4\u304f\u304b\u3089\u3042\u308b\u8a00\u8a9e\u306e\u305f\u3081\u3001\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u306f\u8c4a\u5bcc\u306b\u63c3\u3063\u3066\u3044\u307e\u3059\u3002 \u4ed6\u306e\u8a00\u8a9e\u306b\u6bd4\u3079\u308b\u3068\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3084\u3084\u8ca7\u5f31\u3067\u3059\u304c\u3001 \u3053\u308c\u306f\u67d4\u8edf\u6027\u3068\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u306e\u7d50\u679c\u3067\u3059\u3002","title":"C++ \u306e\u7279\u5fb4"},{"location":"#c_2","text":"C++98 (1998\u5e74\u5236\u5b9a) C++03 (2003\u5e74\u5236\u5b9a) C++11 (2011\u5e74\u5236\u5b9a) C++14 (2014\u5e74\u5236\u5b9a) C++17 (2017\u5e74\u5236\u5b9a) C++20 (2020\u5e74\u5236\u5b9a\u4e88\u5b9a) \u3053\u306e\u30b5\u30a4\u30c8\u3067\u306f C++11 \u3092\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002","title":"C++ \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066"},{"location":"ch01-01-installation/","text":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 \u30b3\u30f3\u30d1\u30a4\u30e9 \u00b6 C++ \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u591a\u304f\u306e\u30d9\u30f3\u30c0\u304c\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002 \u4ee3\u8868\u7684\u306a\u3082\u306e\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9 Linux macOS Windows GCC \ufe0f Clang Visual C++ GCC \u306f Linux \u3092\u30e1\u30a4\u30f3\u306b\u4f7f\u7528\u3055\u308c\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u304c\u3001 Linux \u4ee5\u5916\u306e\u4e3b\u8981\u306a\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001 \u4e00\u756a\u5b9f\u7e3e\u306e\u3042\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002 Clang \u306f\u8fd1\u5e74\u6ce8\u76ee\u3055\u308c\u3066\u3044\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3001 \u4eca\u5f8c\u306f GCC \u306b\u53d6\u3063\u3066\u4ee3\u308f\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002 \u672c\u66f8\u3067\u306f Windows \u7248\u306e GCC \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 GCC \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u306f msys2 \u3068\u3044\u3046\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 msys2 \u306f Linux \u3067\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30de\u30f3\u30c9\u306e\u4e00\u90e8\u3092 Windows \u306b\u79fb\u690d\u3057\u305f\u30c4\u30fc\u30eb\u30bb\u30c3\u30c8\u3067\u3059\u3002 msys2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 \u4e0b\u8a18\u306e msys2 \u306e\u516c\u5f0f\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 https://www.msys2.org/ \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306f msys2-i386-yyyymmdd.exe, msys2-x86_64-yyyymmdd.exe \u306e 2 \u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u524d\u8005\u304c 32 \u30d3\u30c3\u30c8\u7248\u3067\u5f8c\u8005\u304c 64 \u30d3\u30c3\u30c8\u7248\u306b\u306a\u308a\u307e\u3059\u3002 \u672c\u66f8\u3067\u306f 64 \u30d3\u30c3\u30c8\u7248\u3092\u3082\u3068\u306b\u8aac\u660e\u3059\u308b\u306e\u3067\u300164 \u30d3\u30c3\u30c8\u7248\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 GCC \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pacman -S gcc IDE \u00b6 C++ \u7528\u306e IDE \u3068\u3057\u3066\u306f Visual Studio Code \u304c\u4eba\u6c17\u3067\u3059\u3002 Visual Studio Code \u81ea\u4f53\u306f\u30a8\u30c7\u30a3\u30bf\u306a\u306e\u3067\u3059\u304c\u3001\u62e1\u5f35\u6a5f\u80fd\u3092\u5165\u308c\u308b\u3053\u3068\u3067 C++ \u5411\u3051\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u4e0b\u8a18\u30b5\u30a4\u30c8\u3088\u308a Visual Studio Code \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://code.visualstudio.com/ Visual Studio Code \u306e\u62e1\u5f35\u6a5f\u80fd\u3067\u3042\u308b C/C++ \u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 Visual Studio Code \u3092\u8d77\u52d5\u3057\u305f\u5f8c\u3001 Ctrl+Shift+X \u3092\u62bc\u3059\u3068 \u62e1\u5f35\u6a5f\u80fd\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u753b\u9762\u306b\u5207\u308a\u66ff\u308f\u308b\u306e\u3067\u3001 C/C++ \u3092\u691c\u7d22\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"1.1. \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ch01-01-installation/#_1","text":"","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ch01-01-installation/#_2","text":"C++ \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u591a\u304f\u306e\u30d9\u30f3\u30c0\u304c\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002 \u4ee3\u8868\u7684\u306a\u3082\u306e\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9 Linux macOS Windows GCC \ufe0f Clang Visual C++ GCC \u306f Linux \u3092\u30e1\u30a4\u30f3\u306b\u4f7f\u7528\u3055\u308c\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u304c\u3001 Linux \u4ee5\u5916\u306e\u4e3b\u8981\u306a\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001 \u4e00\u756a\u5b9f\u7e3e\u306e\u3042\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002 Clang \u306f\u8fd1\u5e74\u6ce8\u76ee\u3055\u308c\u3066\u3044\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3001 \u4eca\u5f8c\u306f GCC \u306b\u53d6\u3063\u3066\u4ee3\u308f\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002 \u672c\u66f8\u3067\u306f Windows \u7248\u306e GCC \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 GCC \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u306f msys2 \u3068\u3044\u3046\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 msys2 \u306f Linux \u3067\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30de\u30f3\u30c9\u306e\u4e00\u90e8\u3092 Windows \u306b\u79fb\u690d\u3057\u305f\u30c4\u30fc\u30eb\u30bb\u30c3\u30c8\u3067\u3059\u3002","title":"\u30b3\u30f3\u30d1\u30a4\u30e9"},{"location":"ch01-01-installation/#msys2","text":"\u4e0b\u8a18\u306e msys2 \u306e\u516c\u5f0f\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 https://www.msys2.org/ \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306f msys2-i386-yyyymmdd.exe, msys2-x86_64-yyyymmdd.exe \u306e 2 \u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u524d\u8005\u304c 32 \u30d3\u30c3\u30c8\u7248\u3067\u5f8c\u8005\u304c 64 \u30d3\u30c3\u30c8\u7248\u306b\u306a\u308a\u307e\u3059\u3002 \u672c\u66f8\u3067\u306f 64 \u30d3\u30c3\u30c8\u7248\u3092\u3082\u3068\u306b\u8aac\u660e\u3059\u308b\u306e\u3067\u300164 \u30d3\u30c3\u30c8\u7248\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"msys2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ch01-01-installation/#gcc","text":"msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pacman -S gcc","title":"GCC \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ch01-01-installation/#ide","text":"C++ \u7528\u306e IDE \u3068\u3057\u3066\u306f Visual Studio Code \u304c\u4eba\u6c17\u3067\u3059\u3002 Visual Studio Code \u81ea\u4f53\u306f\u30a8\u30c7\u30a3\u30bf\u306a\u306e\u3067\u3059\u304c\u3001\u62e1\u5f35\u6a5f\u80fd\u3092\u5165\u308c\u308b\u3053\u3068\u3067 C++ \u5411\u3051\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u4e0b\u8a18\u30b5\u30a4\u30c8\u3088\u308a Visual Studio Code \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://code.visualstudio.com/ Visual Studio Code \u306e\u62e1\u5f35\u6a5f\u80fd\u3067\u3042\u308b C/C++ \u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 Visual Studio Code \u3092\u8d77\u52d5\u3057\u305f\u5f8c\u3001 Ctrl+Shift+X \u3092\u62bc\u3059\u3068 \u62e1\u5f35\u6a5f\u80fd\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u753b\u9762\u306b\u5207\u308a\u66ff\u308f\u308b\u306e\u3067\u3001 C/C++ \u3092\u691c\u7d22\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"IDE"},{"location":"ch01-02-hello-world/","text":"Hello, World! \u00b6 Visual Studio Code \u4e0a\u3067 main.cc \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066 \u4e0b\u8a18\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 #include <iostream> int main () { std :: cout << \"Hello, World!\" << std :: endl ; return 0 ; } msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.cc \u6210\u529f\u3059\u308b\u3068 a.exe \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002 \u3053\u308c\u304c\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u306e\u3067\u3001\u5b9f\u884c\u3059\u308b\u3068 Hello, World! \u3068\u3044\u3046 \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 $ ./a.exe Hello, World!","title":"1.2. Hello, World!"},{"location":"ch01-02-hello-world/#hello-world","text":"Visual Studio Code \u4e0a\u3067 main.cc \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066 \u4e0b\u8a18\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 #include <iostream> int main () { std :: cout << \"Hello, World!\" << std :: endl ; return 0 ; } msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.cc \u6210\u529f\u3059\u308b\u3068 a.exe \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002 \u3053\u308c\u304c\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u306e\u3067\u3001\u5b9f\u884c\u3059\u308b\u3068 Hello, World! \u3068\u3044\u3046 \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 $ ./a.exe Hello, World!","title":"Hello, World!"},{"location":"ch02-01-variables/","text":"\u5909\u6570 \u00b6 C++ \u3067\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 \u6574\u6570\u5024\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 int x = 5 ; int \u306f\u6574\u6570\u3092\u8868\u73fe\u3059\u308b\u578b\u3067\u3059\u3002 \u5ba3\u8a00\u6642\u306b\u521d\u671f\u5316\u3092\u305b\u305a\u306b\u3042\u3068\u3067\u5024\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 int x ; x = 5 ; \u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u307e\u307e\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u3068\u4e0d\u5b9a\u306a\u5024\u304c\u5165\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002 int x ; std :: cout << x << std :: endl ; // \u4e0d\u5b9a\u306a\u5024\u304c\u51fa\u529b\u3055\u308c\u308b const \u00b6 const \u3092\u4ed8\u3051\u308b\u3068\u5024\u306e\u66f8\u304d\u63db\u3048\u304c\u7981\u6b62\u3067\u304d\u307e\u3059\u3002 const int x = 5 ; x = 10 ; // \u30a8\u30e9\u30fc \u578b\u63a8\u8ad6 \u00b6 \u5909\u6570\u306e\u5ba3\u8a00\u6642\u306b\u306f\u660e\u793a\u7684\u306b\u578b\u3092\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082 auto \u3092\u4f7f\u3046\u3068 \u53f3\u8fba\u306e\u5024\u304b\u3089\u578b\u3092\u63a8\u8ad6\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 auto x = 5 ; // x \u306f int \u3068\u63a8\u8ad6","title":"2.1. \u5909\u6570"},{"location":"ch02-01-variables/#_1","text":"C++ \u3067\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 \u6574\u6570\u5024\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 int x = 5 ; int \u306f\u6574\u6570\u3092\u8868\u73fe\u3059\u308b\u578b\u3067\u3059\u3002 \u5ba3\u8a00\u6642\u306b\u521d\u671f\u5316\u3092\u305b\u305a\u306b\u3042\u3068\u3067\u5024\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 int x ; x = 5 ; \u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u307e\u307e\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u3068\u4e0d\u5b9a\u306a\u5024\u304c\u5165\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002 int x ; std :: cout << x << std :: endl ; // \u4e0d\u5b9a\u306a\u5024\u304c\u51fa\u529b\u3055\u308c\u308b","title":"\u5909\u6570"},{"location":"ch02-01-variables/#const","text":"const \u3092\u4ed8\u3051\u308b\u3068\u5024\u306e\u66f8\u304d\u63db\u3048\u304c\u7981\u6b62\u3067\u304d\u307e\u3059\u3002 const int x = 5 ; x = 10 ; // \u30a8\u30e9\u30fc","title":"const"},{"location":"ch02-01-variables/#_2","text":"\u5909\u6570\u306e\u5ba3\u8a00\u6642\u306b\u306f\u660e\u793a\u7684\u306b\u578b\u3092\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082 auto \u3092\u4f7f\u3046\u3068 \u53f3\u8fba\u306e\u5024\u304b\u3089\u578b\u3092\u63a8\u8ad6\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 auto x = 5 ; // x \u306f int \u3068\u63a8\u8ad6","title":"\u578b\u63a8\u8ad6"},{"location":"ch02-02-primitive-types/","text":"\u57fa\u672c\u578b \u00b6 C++ \u3067\u306f\u3058\u3081\u304b\u3089\u4f7f\u7528\u3067\u304d\u308b\u57fa\u672c\u578b\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 bool \u00b6 bool \u306f\u771f\u507d\u5024\u3092\u8868\u3059\u578b\u3067 true \u307e\u305f\u306f false \u304c\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 bool ok = true ; char \u00b6 char \u306f\u30a2\u30b9\u30ad\u30fc\u6587\u5b571\u6587\u5b57\u3092\u8868\u73fe\u3059\u308b\u578b\u3067\u3059\u3002 \u305f\u3060\u3057\u5185\u90e8\u8868\u73fe\u306f\u30a2\u30b9\u30ad\u30fc\u30b3\u30fc\u30c9\u306e\u6574\u6570\u5024\u3068\u3057\u3066\u6271\u308f\u308c\u3001 \u6a19\u6e96\u51fa\u529b\u306a\u3069\u306b\u51fa\u529b\u3059\u308b\u969b\u306b\u6587\u5b57\u306b\u5909\u63db\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 char x = 'x' ; \u6570\u5024 \u00b6 \u6570\u5024\u3092\u8868\u73fe\u3059\u308b\u578b\u306f\u8907\u6570\u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u6574\u6570\u578b \u00b6 \u6574\u6570\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306e\u578b\u3067\u3059\u3002 char short int long \u4e0b\u306b\u884c\u304f\u306b\u9023\u308c\u3066\u5927\u304d\u306a\u5024\u304c\u8868\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u5909\u6570\u306e\u30b5\u30a4\u30ba\u3082\u5897\u5927\u3057\u307e\u3059\u3002 \u5177\u4f53\u7684\u306a\u30b5\u30a4\u30ba\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u304c GCC \u3067\u306f 8, 16, 32, 64 \u30d3\u30c3\u30c8\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4e00\u822c\u7684\u306b\u306f int \u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 \u7b26\u53f7\u4ed8\u304d\u30fb\u7b26\u53f7\u306a\u3057\u6574\u6570\u578b \u00b6 \u5404\u6574\u6570\u578b\u306b unsigned \u3092\u4ed8\u3051\u308b\u3068\u6b63\u306e\u6570\u3057\u304b\u8868\u73fe\u3067\u304d\u306a\u304f\u306a\u308b\u4ee3\u308f\u308a\u306b \u5927\u304d\u306a\u5024\u304c\u8868\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 unsigned int x = 4000000000 ; signed \u3092\u4ed8\u3051\u308b\u3068\u6b63\u8ca0\u4e21\u65b9\u306e\u5024\u304c\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 \u660e\u793a\u7684\u306b\u4ed8\u3051\u306a\u304f\u3066\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u306f signed \u306b\u306a\u308a\u307e\u3059\u3002 \u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b \u00b6 \u4e0a\u8ff0\u306e\u6574\u6570\u578b\u306f\u578b\u306e\u30b5\u30a4\u30ba\u304c\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u307e\u3061\u307e\u3061\u306a\u306e\u3067 \u8907\u6570\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f \u79fb\u690d\u6027\u306e\u9762\u3067\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u3068\u304d\u306f\u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int8_t int16_t int32_t int64_t uint8_t uint16_t uint32_t uint64_t \u6570\u5024\u306f\u578b\u306e\u30d3\u30c3\u30c8\u30b5\u30a4\u30ba\u3092\u8868\u3057\u3066\u304a\u308a\u3001u \u306f unsigned \u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002 \u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f #include <cstdint> \u3068\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 #include <cstdint> int32_t x = 5 ; \u6d6e\u52d5\u5c0f\u6570\u70b9\u578b \u00b6 \u5c0f\u6570\u3092\u8868\u73fe\u3059\u308b\u578b\u306f\u6b21\u306e2\u3064\u306e\u578b\u304c\u3042\u308a\u307e\u3059\u3002 float double float \u306f 32 \u30d3\u30c3\u30c8\u306e\u5927\u304d\u3055\u3092\u6301\u3061\u3001 double \u306f 64 \u30d3\u30c3\u30c8\u306e\u5927\u304d\u3055\u3092\u6301\u3061\u307e\u3059\u3002 \u307e\u305f double \u306e\u65b9\u304c float \u306b\u6bd4\u3079\u3066\u8a08\u7b97\u7cbe\u5ea6\u304c\u9ad8\u3044\u3067\u3059\u304c\u6570\u5024\u8a08\u7b97\u306e \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u4f4e\u3044\u3067\u3059\u3002","title":"2.2. \u57fa\u672c\u578b"},{"location":"ch02-02-primitive-types/#_1","text":"C++ \u3067\u306f\u3058\u3081\u304b\u3089\u4f7f\u7528\u3067\u304d\u308b\u57fa\u672c\u578b\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002","title":"\u57fa\u672c\u578b"},{"location":"ch02-02-primitive-types/#bool","text":"bool \u306f\u771f\u507d\u5024\u3092\u8868\u3059\u578b\u3067 true \u307e\u305f\u306f false \u304c\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 bool ok = true ;","title":"bool"},{"location":"ch02-02-primitive-types/#char","text":"char \u306f\u30a2\u30b9\u30ad\u30fc\u6587\u5b571\u6587\u5b57\u3092\u8868\u73fe\u3059\u308b\u578b\u3067\u3059\u3002 \u305f\u3060\u3057\u5185\u90e8\u8868\u73fe\u306f\u30a2\u30b9\u30ad\u30fc\u30b3\u30fc\u30c9\u306e\u6574\u6570\u5024\u3068\u3057\u3066\u6271\u308f\u308c\u3001 \u6a19\u6e96\u51fa\u529b\u306a\u3069\u306b\u51fa\u529b\u3059\u308b\u969b\u306b\u6587\u5b57\u306b\u5909\u63db\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 char x = 'x' ;","title":"char"},{"location":"ch02-02-primitive-types/#_2","text":"\u6570\u5024\u3092\u8868\u73fe\u3059\u308b\u578b\u306f\u8907\u6570\u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u6570\u5024"},{"location":"ch02-02-primitive-types/#_3","text":"\u6574\u6570\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306e\u578b\u3067\u3059\u3002 char short int long \u4e0b\u306b\u884c\u304f\u306b\u9023\u308c\u3066\u5927\u304d\u306a\u5024\u304c\u8868\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u5909\u6570\u306e\u30b5\u30a4\u30ba\u3082\u5897\u5927\u3057\u307e\u3059\u3002 \u5177\u4f53\u7684\u306a\u30b5\u30a4\u30ba\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u304c GCC \u3067\u306f 8, 16, 32, 64 \u30d3\u30c3\u30c8\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4e00\u822c\u7684\u306b\u306f int \u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002","title":"\u6574\u6570\u578b"},{"location":"ch02-02-primitive-types/#_4","text":"\u5404\u6574\u6570\u578b\u306b unsigned \u3092\u4ed8\u3051\u308b\u3068\u6b63\u306e\u6570\u3057\u304b\u8868\u73fe\u3067\u304d\u306a\u304f\u306a\u308b\u4ee3\u308f\u308a\u306b \u5927\u304d\u306a\u5024\u304c\u8868\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 unsigned int x = 4000000000 ; signed \u3092\u4ed8\u3051\u308b\u3068\u6b63\u8ca0\u4e21\u65b9\u306e\u5024\u304c\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 \u660e\u793a\u7684\u306b\u4ed8\u3051\u306a\u304f\u3066\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u306f signed \u306b\u306a\u308a\u307e\u3059\u3002","title":"\u7b26\u53f7\u4ed8\u304d\u30fb\u7b26\u53f7\u306a\u3057\u6574\u6570\u578b"},{"location":"ch02-02-primitive-types/#_5","text":"\u4e0a\u8ff0\u306e\u6574\u6570\u578b\u306f\u578b\u306e\u30b5\u30a4\u30ba\u304c\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u307e\u3061\u307e\u3061\u306a\u306e\u3067 \u8907\u6570\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f \u79fb\u690d\u6027\u306e\u9762\u3067\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u3068\u304d\u306f\u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int8_t int16_t int32_t int64_t uint8_t uint16_t uint32_t uint64_t \u6570\u5024\u306f\u578b\u306e\u30d3\u30c3\u30c8\u30b5\u30a4\u30ba\u3092\u8868\u3057\u3066\u304a\u308a\u3001u \u306f unsigned \u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002 \u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f #include <cstdint> \u3068\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 #include <cstdint> int32_t x = 5 ;","title":"\u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b"},{"location":"ch02-02-primitive-types/#_6","text":"\u5c0f\u6570\u3092\u8868\u73fe\u3059\u308b\u578b\u306f\u6b21\u306e2\u3064\u306e\u578b\u304c\u3042\u308a\u307e\u3059\u3002 float double float \u306f 32 \u30d3\u30c3\u30c8\u306e\u5927\u304d\u3055\u3092\u6301\u3061\u3001 double \u306f 64 \u30d3\u30c3\u30c8\u306e\u5927\u304d\u3055\u3092\u6301\u3061\u307e\u3059\u3002 \u307e\u305f double \u306e\u65b9\u304c float \u306b\u6bd4\u3079\u3066\u8a08\u7b97\u7cbe\u5ea6\u304c\u9ad8\u3044\u3067\u3059\u304c\u6570\u5024\u8a08\u7b97\u306e \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u4f4e\u3044\u3067\u3059\u3002","title":"\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b"},{"location":"ch02-03-literals/","text":"\u30ea\u30c6\u30e9\u30eb \u00b6 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\u8a18\u8ff0\u3055\u308c\u308b\u5b9a\u6570\u5024\u306e\u3053\u3068\u3092\u30ea\u30c6\u30e9\u30eb\u3068\u3044\u3044\u307e\u3059\u3002 \u672c\u9805\u3067\u306f\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\u4ed6\u306e\u30ea\u30c6\u30e9\u30eb\u306b\u3064\u3044\u3066\u306f \u5f0f - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6574\u6570\u30ea\u30c6\u30e9\u30eb \u00b6 \u6570\u5b57\u306e\u5148\u982d\u306b\u7279\u5b9a\u306e\u6587\u5b57\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u6574\u6570\u306e\u57fa\u6570\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 26 // 10\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 032 // \u5148\u982d\u306b0\u3092\u4ed8\u3051\u308b\u30688\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 0x1a // \u5148\u982d\u306b0x\u3092\u4ed8\u3051\u308b\u306816\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 0x1A // 16\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u5185\u306e\u6587\u5b57\u306f\u5c0f\u6587\u5b57\u3067\u3082\u5927\u6587\u5b57\u3067\u3082\u533a\u5225\u3055\u308c\u306a\u3044\u306e\u30670x1a\u3068\u540c\u3058 \u6570\u5b57\u306e\u672b\u5c3e\u306b\u6587\u5b57\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u6b21\u306e\u3088\u3046\u306a\u578b\u3092\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 26u // unsigned\u578b\u306e26 26l // long\u578b\u306e26 26ul // unsigned long\u578b\u306e26 0x1Aul // unsigned long\u578b\u306e0x1A","title":"2.3. \u30ea\u30c6\u30e9\u30eb"},{"location":"ch02-03-literals/#_1","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\u8a18\u8ff0\u3055\u308c\u308b\u5b9a\u6570\u5024\u306e\u3053\u3068\u3092\u30ea\u30c6\u30e9\u30eb\u3068\u3044\u3044\u307e\u3059\u3002 \u672c\u9805\u3067\u306f\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\u4ed6\u306e\u30ea\u30c6\u30e9\u30eb\u306b\u3064\u3044\u3066\u306f \u5f0f - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30ea\u30c6\u30e9\u30eb"},{"location":"ch02-03-literals/#_2","text":"\u6570\u5b57\u306e\u5148\u982d\u306b\u7279\u5b9a\u306e\u6587\u5b57\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u6574\u6570\u306e\u57fa\u6570\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 26 // 10\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 032 // \u5148\u982d\u306b0\u3092\u4ed8\u3051\u308b\u30688\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 0x1a // \u5148\u982d\u306b0x\u3092\u4ed8\u3051\u308b\u306816\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 0x1A // 16\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u5185\u306e\u6587\u5b57\u306f\u5c0f\u6587\u5b57\u3067\u3082\u5927\u6587\u5b57\u3067\u3082\u533a\u5225\u3055\u308c\u306a\u3044\u306e\u30670x1a\u3068\u540c\u3058 \u6570\u5b57\u306e\u672b\u5c3e\u306b\u6587\u5b57\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u6b21\u306e\u3088\u3046\u306a\u578b\u3092\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 26u // unsigned\u578b\u306e26 26l // long\u578b\u306e26 26ul // unsigned long\u578b\u306e26 0x1Aul // unsigned long\u578b\u306e0x1A","title":"\u6574\u6570\u30ea\u30c6\u30e9\u30eb"},{"location":"ch02-04-functions/","text":"\u95a2\u6570 \u00b6 C++\u3067\u306e\u95a2\u6570\u306e\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 \u95a2\u6570 HelloWorld() \u3092\u4f5c\u6210\u3057\u3001 main() \u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } int main () { HelloWorld ( 10 ); return 0 ; } \u3053\u3053\u3067\u6ce8\u76ee\u3059\u3079\u304d\u70b9\u306f\u3001\u95a2\u6570 HelloWorld() \u304c\u3001\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b10\u884c\u76ee\u3088\u308a\u4e0a\u306e\u884c\u3067\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u70b9\u3067\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e0a\u304b\u3089\u9806\u306b\u89e3\u91c8\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u5bfe\u3057\u3066 HelloWorld() \u304c\u4f55\u8005\u306a\u306e\u304b\u3092\u4e8b\u524d\u306b\u6559\u3048\u308b\u3053\u3068\u3067\u3001 HelloWorld() \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u304c\u884c\u306a\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u8a66\u3057\u306b HelloWorld() \u3092 main() \u3088\u308a\u3082\u4e0b\u306e\u884c\u306b\u8a18\u8ff0\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u5931\u6557\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> int main () { HelloWorld ( 10 ); // \u3053\u3053\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc return 0 ; } void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } 4\u884c\u76ee\u306e\u6642\u70b9\u3067\u306f\u3001 HelloWorld() \u304c\u4f55\u8005\u306a\u306e\u304b\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u306f\u7406\u89e3\u3067\u304d\u306a\u3044\u305f\u3081\u3067\u3059\u3002 \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 \u00b6 \u95a2\u6570\u306e\u5ba3\u8a00\u306e\u307f\u3092\u547c\u3073\u51fa\u3057\u7b87\u6240\u3088\u308a\u3082\u4e0a\u306e\u884c\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\u95a2\u6570\u306e\u5b58\u5728\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6559\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u3053\u308c\u3092\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\uff08\u524d\u65b9\u5ba3\u8a00\uff09\u3068\u547c\u3073\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> void HelloWorld ( int n ); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\uff08\u524d\u65b9\u5ba3\u8a00\uff09 int main () { HelloWorld ( 10 ); return 0 ; } void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } HelloWorld() \u306e\u672c\u4f53\u306f main() \u306e\u547c\u3073\u51fa\u3057\u7b87\u6240\u3088\u308a\u3082\u4e0b\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u304c\u3042\u308b\u3053\u3068\u3067\u554f\u984c\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u3059\u3002 main\u95a2\u6570 \u00b6 \u3053\u308c\u307e\u3067\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u5ea6\u3005\u73fe\u308c\u305f main() \u3092main\u95a2\u6570\u3068\u547c\u3073\u307e\u3059\u3002 C++\u3067\u751f\u6210\u3055\u308c\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001main\u95a2\u6570\u3092\u8d77\u70b9\u306b\u51e6\u7406\u304c\u9032\u307f\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570 \u00b6 main\u95a2\u6570\u306b\u3082\u5f15\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002main\u95a2\u6570\u306b\u6e21\u3055\u308c\u308b\u5f15\u6570\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u547c\u3073\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u7d9a\u3051\u3066\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u8907\u6570\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 # \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u540d <\u5f15\u65701> <\u5f15\u65702> <\u5f15\u65703> ... $ ./a.exe XXX YYY ZZZ \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u5834\u5408\u3001main\u95a2\u6570\u306e\u5f15\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 int main ( int argc , char * argv []); int argc : \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u500b\u6570\u3092\u8868\u3059 char* argv[] : \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u683c\u7d0d\u3055\u308c\u308b main.cc 1 2 3 4 5 6 7 8 9 #include <iostream> int main ( int argc , char * argv []) { for ( int i = 0 ; i < argc ; ++ i ) { std :: cout << \"argv[\" << i << \"]: \" << argv [ i ] << std :: endl ; } return 0 ; } # \u5b9f\u884c\u7d50\u679c $ ./a.exe Hello World! argv [ 0 ] : ./a.exe argv [ 1 ] : Hello argv [ 2 ] : World! \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 \u00b6 \u95a2\u6570\u306e\u5f15\u6570\u306e\u500b\u6570\u3084\u578b\u304c\u7570\u306a\u308b\u5834\u5408\u3001\u540c\u3058\u540d\u524d\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u3053\u308c\u3092\uff08\u95a2\u6570\u306e\uff09\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3068\u547c\u3073\u307e\u3059\u3002\u5f15\u6570\u306e\u500b\u6570\u3084\u578b\u306e\u60c5\u5831\u3092\u5143\u306b\u547c\u3073\u51fa\u3059\u95a2\u6570\u3092\u6c7a\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> void Print ( int x ) { std :: cout << \"int: \" << x << std :: endl ; } void Print ( double x ) { std :: cout << \"double: \" << x << std :: endl ; } int main () { Print ( 2 ); Print ( 2.1 ); return 0 ; } # \u5b9f\u884c\u7d50\u679c $ ./a.exe int: 2 double: 2 .1","title":"2.4. \u95a2\u6570"},{"location":"ch02-04-functions/#_1","text":"C++\u3067\u306e\u95a2\u6570\u306e\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 \u95a2\u6570 HelloWorld() \u3092\u4f5c\u6210\u3057\u3001 main() \u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } int main () { HelloWorld ( 10 ); return 0 ; } \u3053\u3053\u3067\u6ce8\u76ee\u3059\u3079\u304d\u70b9\u306f\u3001\u95a2\u6570 HelloWorld() \u304c\u3001\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b10\u884c\u76ee\u3088\u308a\u4e0a\u306e\u884c\u3067\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u70b9\u3067\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e0a\u304b\u3089\u9806\u306b\u89e3\u91c8\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u5bfe\u3057\u3066 HelloWorld() \u304c\u4f55\u8005\u306a\u306e\u304b\u3092\u4e8b\u524d\u306b\u6559\u3048\u308b\u3053\u3068\u3067\u3001 HelloWorld() \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u304c\u884c\u306a\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u8a66\u3057\u306b HelloWorld() \u3092 main() \u3088\u308a\u3082\u4e0b\u306e\u884c\u306b\u8a18\u8ff0\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u5931\u6557\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> int main () { HelloWorld ( 10 ); // \u3053\u3053\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc return 0 ; } void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } 4\u884c\u76ee\u306e\u6642\u70b9\u3067\u306f\u3001 HelloWorld() \u304c\u4f55\u8005\u306a\u306e\u304b\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u306f\u7406\u89e3\u3067\u304d\u306a\u3044\u305f\u3081\u3067\u3059\u3002","title":"\u95a2\u6570"},{"location":"ch02-04-functions/#_2","text":"\u95a2\u6570\u306e\u5ba3\u8a00\u306e\u307f\u3092\u547c\u3073\u51fa\u3057\u7b87\u6240\u3088\u308a\u3082\u4e0a\u306e\u884c\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\u95a2\u6570\u306e\u5b58\u5728\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6559\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u3053\u308c\u3092\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\uff08\u524d\u65b9\u5ba3\u8a00\uff09\u3068\u547c\u3073\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> void HelloWorld ( int n ); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\uff08\u524d\u65b9\u5ba3\u8a00\uff09 int main () { HelloWorld ( 10 ); return 0 ; } void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } HelloWorld() \u306e\u672c\u4f53\u306f main() \u306e\u547c\u3073\u51fa\u3057\u7b87\u6240\u3088\u308a\u3082\u4e0b\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u304c\u3042\u308b\u3053\u3068\u3067\u554f\u984c\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u3059\u3002","title":"\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00"},{"location":"ch02-04-functions/#main","text":"\u3053\u308c\u307e\u3067\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u5ea6\u3005\u73fe\u308c\u305f main() \u3092main\u95a2\u6570\u3068\u547c\u3073\u307e\u3059\u3002 C++\u3067\u751f\u6210\u3055\u308c\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001main\u95a2\u6570\u3092\u8d77\u70b9\u306b\u51e6\u7406\u304c\u9032\u307f\u307e\u3059\u3002","title":"main\u95a2\u6570"},{"location":"ch02-04-functions/#_3","text":"main\u95a2\u6570\u306b\u3082\u5f15\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002main\u95a2\u6570\u306b\u6e21\u3055\u308c\u308b\u5f15\u6570\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u547c\u3073\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u7d9a\u3051\u3066\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u8907\u6570\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 # \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u540d <\u5f15\u65701> <\u5f15\u65702> <\u5f15\u65703> ... $ ./a.exe XXX YYY ZZZ \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u5834\u5408\u3001main\u95a2\u6570\u306e\u5f15\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 int main ( int argc , char * argv []); int argc : \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u500b\u6570\u3092\u8868\u3059 char* argv[] : \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u683c\u7d0d\u3055\u308c\u308b main.cc 1 2 3 4 5 6 7 8 9 #include <iostream> int main ( int argc , char * argv []) { for ( int i = 0 ; i < argc ; ++ i ) { std :: cout << \"argv[\" << i << \"]: \" << argv [ i ] << std :: endl ; } return 0 ; } # \u5b9f\u884c\u7d50\u679c $ ./a.exe Hello World! argv [ 0 ] : ./a.exe argv [ 1 ] : Hello argv [ 2 ] : World!","title":"\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570"},{"location":"ch02-04-functions/#_4","text":"\u95a2\u6570\u306e\u5f15\u6570\u306e\u500b\u6570\u3084\u578b\u304c\u7570\u306a\u308b\u5834\u5408\u3001\u540c\u3058\u540d\u524d\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u3053\u308c\u3092\uff08\u95a2\u6570\u306e\uff09\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3068\u547c\u3073\u307e\u3059\u3002\u5f15\u6570\u306e\u500b\u6570\u3084\u578b\u306e\u60c5\u5831\u3092\u5143\u306b\u547c\u3073\u51fa\u3059\u95a2\u6570\u3092\u6c7a\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> void Print ( int x ) { std :: cout << \"int: \" << x << std :: endl ; } void Print ( double x ) { std :: cout << \"double: \" << x << std :: endl ; } int main () { Print ( 2 ); Print ( 2.1 ); return 0 ; } # \u5b9f\u884c\u7d50\u679c $ ./a.exe int: 2 double: 2 .1","title":"\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9"},{"location":"ch02-05-pointers/","text":"\u30dd\u30a4\u30f3\u30bf \u00b6 \u30dd\u30a4\u30f3\u30bf\u3068\u3044\u3046\u306e\u306f\u4ed6\u306e\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u4ed5\u7d44\u307f\u306e1\u3064\u3067\u3059\u3002 Windows \u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3084 Linux \u306e\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3068\u540c\u3058\u3088\u3046\u306a\u6a5f\u80fd\u3067\u3059\u3002 int x = 5 ; int * p = & x ; int* \u3068\u66f8\u304f\u3068 int \u578b\u306e\u5909\u6570\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u578b\u3068\u306a\u308a\u307e\u3059\u3002 &x \u3068\u3044\u3046\u306e\u306f x \u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\u305f\u3081\u306e\u6f14\u7b97\u3067\u3059\u3002 nullptr \u00b6 \u3069\u306e\u5909\u6570\u3082\u53c2\u7167\u3057\u3066\u3044\u306a\u3044\u30dd\u30a4\u30f3\u30bf\u306e\u3053\u3068\u3092\u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3068\u547c\u3073\u307e\u3059\u3002C++\u3067\u306f\u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3092\u8868\u3059\u30ad\u30fc\u30ef\u30fc\u30c9\u3068\u3057\u3066 nullptr \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 int * p = nullptr ; \u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff08\u9006\u53c2\u7167\uff09 \u00b6 \u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5909\u6570\u306e\u5024\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002 int x = 5 ; int * p = & x ; int y = * p ; \u5909\u6570\u304b\u3089\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\u3068\u304d\u306b\u306f & \u3092\u4ed8\u3051\u3001\u30dd\u30a4\u30f3\u30bf\u304b\u3089\u5024\u3092\u5f97\u308b\u306b\u306f * \u3092\u4ed8\u3051\u307e\u3059\u3002 const\u30dd\u30a4\u30f3\u30bf \u00b6 \u30dd\u30a4\u30f3\u30bf\u578b\u306b const \u3092\u4ed8\u3051\u308b\u5834\u5408\u3001 const \u306e\u4ed8\u3051\u308b\u4f4d\u7f6e\u306b\u3088\u3063\u3066\u610f\u5473\u5408\u3044\u304c\u5909\u308f\u308a\u307e\u3059\u3002 * \u306e\u524d\u306b const \u3092\u4ed8\u3051\u308b\u3068\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u793a\u3059\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 int x = 123 ; const int * p = & x ; * p = 456 ; // \u30a8\u30e9\u30fc * \u306e\u5f8c\u306b const \u3092\u4ed8\u3051\u308b\u3068\u3001\u30dd\u30a4\u30f3\u30bf\u81ea\u8eab\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 int x = 123 ; int * const p = & x ; p = nullptr ; // \u30a8\u30e9\u30fc \u4f75\u7528\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 const int * const p = & x ; \u53c2\u7167 \u00b6 \u30dd\u30a4\u30f3\u30bf\u306b\u4f3c\u305f\u4ed5\u7d44\u307f\u3068\u3057\u3066\u53c2\u7167\u304c\u3042\u308a\u307e\u3059\u3002 int x = 100 ; int * p = & x ; // p\u306f\u30dd\u30a4\u30f3\u30bf\u578b int & r = x ; // r\u306f\u53c2\u7167\u578b * p = 200 ; r = 200 ; int& \u3068\u66f8\u304f\u3068 int \u306e\u53c2\u7167\u578b\u3068\u306a\u308a\u307e\u3059\u3002 \u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u793a\u3059\u5024\u3092\u6271\u3046\u306b\u306f * \u3092\u4ed8\u3051\u3066\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001 \u53c2\u7167\u3067\u306f\u4f55\u3082\u4ed8\u4e0e\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u3001\u898b\u305f\u76ee\u4e0a\u3067\u306f\u5024\u578b\u306e\u3088\u3046\u306b\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002","title":"2.5. \u30dd\u30a4\u30f3\u30bf"},{"location":"ch02-05-pointers/#_1","text":"\u30dd\u30a4\u30f3\u30bf\u3068\u3044\u3046\u306e\u306f\u4ed6\u306e\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u4ed5\u7d44\u307f\u306e1\u3064\u3067\u3059\u3002 Windows \u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3084 Linux \u306e\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3068\u540c\u3058\u3088\u3046\u306a\u6a5f\u80fd\u3067\u3059\u3002 int x = 5 ; int * p = & x ; int* \u3068\u66f8\u304f\u3068 int \u578b\u306e\u5909\u6570\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u578b\u3068\u306a\u308a\u307e\u3059\u3002 &x \u3068\u3044\u3046\u306e\u306f x \u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\u305f\u3081\u306e\u6f14\u7b97\u3067\u3059\u3002","title":"\u30dd\u30a4\u30f3\u30bf"},{"location":"ch02-05-pointers/#nullptr","text":"\u3069\u306e\u5909\u6570\u3082\u53c2\u7167\u3057\u3066\u3044\u306a\u3044\u30dd\u30a4\u30f3\u30bf\u306e\u3053\u3068\u3092\u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3068\u547c\u3073\u307e\u3059\u3002C++\u3067\u306f\u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3092\u8868\u3059\u30ad\u30fc\u30ef\u30fc\u30c9\u3068\u3057\u3066 nullptr \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 int * p = nullptr ;","title":"nullptr"},{"location":"ch02-05-pointers/#_2","text":"\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5909\u6570\u306e\u5024\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002 int x = 5 ; int * p = & x ; int y = * p ; \u5909\u6570\u304b\u3089\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\u3068\u304d\u306b\u306f & \u3092\u4ed8\u3051\u3001\u30dd\u30a4\u30f3\u30bf\u304b\u3089\u5024\u3092\u5f97\u308b\u306b\u306f * \u3092\u4ed8\u3051\u307e\u3059\u3002","title":"\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff08\u9006\u53c2\u7167\uff09"},{"location":"ch02-05-pointers/#const","text":"\u30dd\u30a4\u30f3\u30bf\u578b\u306b const \u3092\u4ed8\u3051\u308b\u5834\u5408\u3001 const \u306e\u4ed8\u3051\u308b\u4f4d\u7f6e\u306b\u3088\u3063\u3066\u610f\u5473\u5408\u3044\u304c\u5909\u308f\u308a\u307e\u3059\u3002 * \u306e\u524d\u306b const \u3092\u4ed8\u3051\u308b\u3068\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u793a\u3059\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 int x = 123 ; const int * p = & x ; * p = 456 ; // \u30a8\u30e9\u30fc * \u306e\u5f8c\u306b const \u3092\u4ed8\u3051\u308b\u3068\u3001\u30dd\u30a4\u30f3\u30bf\u81ea\u8eab\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 int x = 123 ; int * const p = & x ; p = nullptr ; // \u30a8\u30e9\u30fc \u4f75\u7528\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 const int * const p = & x ;","title":"const\u30dd\u30a4\u30f3\u30bf"},{"location":"ch02-05-pointers/#_3","text":"\u30dd\u30a4\u30f3\u30bf\u306b\u4f3c\u305f\u4ed5\u7d44\u307f\u3068\u3057\u3066\u53c2\u7167\u304c\u3042\u308a\u307e\u3059\u3002 int x = 100 ; int * p = & x ; // p\u306f\u30dd\u30a4\u30f3\u30bf\u578b int & r = x ; // r\u306f\u53c2\u7167\u578b * p = 200 ; r = 200 ; int& \u3068\u66f8\u304f\u3068 int \u306e\u53c2\u7167\u578b\u3068\u306a\u308a\u307e\u3059\u3002 \u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u793a\u3059\u5024\u3092\u6271\u3046\u306b\u306f * \u3092\u4ed8\u3051\u3066\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001 \u53c2\u7167\u3067\u306f\u4f55\u3082\u4ed8\u4e0e\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u3001\u898b\u305f\u76ee\u4e0a\u3067\u306f\u5024\u578b\u306e\u3088\u3046\u306b\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002","title":"\u53c2\u7167"},{"location":"ch02-06-comments/","text":"\u30b3\u30e1\u30f3\u30c8 \u00b6 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 // '//' \u3067\u59cb\u307e\u308b\u884c\u306f\u30b3\u30e1\u30f3\u30c8\u3068\u898b\u306a\u3055\u308c\u307e\u3059 int x = 5 ; // \u3053\u306e\u3088\u3046\u306b // \u8907\u6570\u884c\u306b\u307e\u305f\u304c\u3063\u3066 // \u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059 /* ... */ \u3067\u56f2\u307e\u308c\u305f\u884c\u3082\u30b3\u30e1\u30f3\u30c8\u3068\u898b\u306a\u3055\u308c\u307e\u3059\u3002 \u8907\u6570\u884c\u306b\u307e\u305f\u304c\u308b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304f\u6642\u306b\u4fbf\u5229\u3067\u3059\u3002 /* * \u9593\u306b\u73fe\u308c\u308b '*' \u306f\u66f8\u304b\u306a\u304f\u3066\u3082\u3044\u3044\u3067\u3059\u304c * \u7fd2\u6163\u7684\u306b\u66f8\u304f\u3053\u3068\u306e\u307b\u3046\u304c\u591a\u3044\u3067\u3059 */ /* ... */ \u306f\u5165\u308c\u5b50\u306b\u3057\u3066\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002 /* /* \u3053\u308c\u306f\u4e0d\u6b63\u306a\u30b3\u30e1\u30f3\u30c8\u3067\u3059 */ */","title":"2.6. \u30b3\u30e1\u30f3\u30c8"},{"location":"ch02-06-comments/#_1","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 // '//' \u3067\u59cb\u307e\u308b\u884c\u306f\u30b3\u30e1\u30f3\u30c8\u3068\u898b\u306a\u3055\u308c\u307e\u3059 int x = 5 ; // \u3053\u306e\u3088\u3046\u306b // \u8907\u6570\u884c\u306b\u307e\u305f\u304c\u3063\u3066 // \u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059 /* ... */ \u3067\u56f2\u307e\u308c\u305f\u884c\u3082\u30b3\u30e1\u30f3\u30c8\u3068\u898b\u306a\u3055\u308c\u307e\u3059\u3002 \u8907\u6570\u884c\u306b\u307e\u305f\u304c\u308b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304f\u6642\u306b\u4fbf\u5229\u3067\u3059\u3002 /* * \u9593\u306b\u73fe\u308c\u308b '*' \u306f\u66f8\u304b\u306a\u304f\u3066\u3082\u3044\u3044\u3067\u3059\u304c * \u7fd2\u6163\u7684\u306b\u66f8\u304f\u3053\u3068\u306e\u307b\u3046\u304c\u591a\u3044\u3067\u3059 */ /* ... */ \u306f\u5165\u308c\u5b50\u306b\u3057\u3066\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002 /* /* \u3053\u308c\u306f\u4e0d\u6b63\u306a\u30b3\u30e1\u30f3\u30c8\u3067\u3059 */ */","title":"\u30b3\u30e1\u30f3\u30c8"},{"location":"ch02-07-control-flow/","text":"\u5236\u5fa1\u6587 \u00b6 if \u00b6 \u6761\u4ef6\u5206\u5c90\u3092\u3057\u305f\u3044\u6642\u306b\u306f if \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } if \u306e\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u4f55\u304b\u51e6\u7406\u3092\u3057\u305f\u3051\u308c\u3070 else \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } else { ... } \u3055\u3089\u306b\u5225\u306e\u6761\u4ef6\u3067\u51e6\u7406\u3092\u5206\u5c90\u3057\u305f\u3051\u308c\u3070 else if \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } else if ( x == 6 ) { ... } else { ... } switch \u00b6 \u4e00\u3064\u306e\u5909\u6570\u306e\u5024\u3092\u8abf\u3079\u306a\u304c\u3089\u5206\u5c90\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\u306f switch \u6587\u3092\u4f7f\u3044\u307e\u3059\u3002 switch ( x ) { case 0 : // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 break ; case 1 : // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 break ; default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 break ; } \u305f\u3060\u3057 switch \u6587\u304c\u4f7f\u7528\u3067\u304d\u308b\u306e\u306f\u57fa\u672c\u578b\u306e\u307f\u3067\u3059\u3002 \u4e0a\u8a18\u306e\u69cb\u6587\u306f if \u3067\u66f8\u304d\u76f4\u3059\u3068\u6b21\u3068\u7b49\u4fa1\u306b\u306a\u308a\u307e\u3059\u3002 if ( x == 0 ) { // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 } else if ( x == 1 ) { // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 } else { // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } \u305f\u3060\u3057 switch \u6587\u306e\u307b\u3046\u304c if \u3088\u308a\u3082\u6bd4\u8f03\u56de\u6570\u304c\u5c11\u306a\u3044\u305f\u3081\u52b9\u7387\u7684\u3067\u3059\u3002 if \u306f\u307e\u305a\u306f\u3058\u3081\u306b x == 0 \u304c true \u304b\u3069\u3046\u304b\u3092\u8abf\u3079 false \u3067\u3042\u308c\u3070 \u6b21\u306b x == 1 \u3092\u8a55\u4fa1\u3057\u307e\u3059\u304c\u3001 switch \u6587\u306f\u3044\u304d\u306a\u308a\u7279\u5b9a\u306e case \u306b\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc \u00b6 switch \u306e\u5404 case \u5185\u306b\u66f8\u304b\u308c\u3066\u3044\u308b break \u306f\u66f8\u304b\u306a\u304f\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001 \u305d\u306e\u5834\u5408\u632f\u308b\u821e\u3044\u304c\u5909\u308f\u308a\u307e\u3059\u3002 switch ( x ) { case 0 : // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 case 1 : // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } break \u3092\u66f8\u3044\u305f\u5834\u5408\u306f switch \u6587\u306e\u51e6\u7406\u306f\u305d\u3053\u3067\u7d42\u308f\u308a\u307e\u3059\u304c\u3001 break \u3092\u66f8\u304b\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u305d\u306e\u307e\u307e\u4e0b\u306e case \u306b\u51e6\u7406\u304c\u6d41\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3064\u307e\u308a\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f x == 0 \u3067\u3042\u308c\u3070 case 0 \u5185\u306e\u51e6\u7406\u3092\u884c\u3063\u305f\u5f8c\u306b case 1 \u5185\u306e\u51e6\u7406\u3092\u884c\u3044\u3001\u6700\u5f8c\u306b default \u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 x == 1 \u3067\u3042\u308c\u3070\u540c\u69d8\u306e\u632f\u308b\u821e\u3044\u304c case 1 \u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a switch \u6587\u306e\u4ed5\u69d8\u3092\u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc\u3068\u8a00\u3044\u307e\u3059\u3002 \u3053\u308c\u306f case 0 \u3068 case 1 \u306e\u51e6\u7406\u304c\u540c\u3058\u3082\u306e\u306b\u306a\u308b\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002 switch ( x ) { case 0 : case 1 : // x == 0 \u307e\u305f\u306f x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } \u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc\u3092\u3055\u305b\u308b\u30b7\u30fc\u30f3\u306f\u307e\u305a\u306a\u3044\u305f\u3081\u3001 break \u3092\u5fd8\u308c\u305a\u306b\u4ed8\u3051\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 while \u00b6 while \u306f () \u306b\u6e21\u3055\u308c\u305f\u6761\u4ef6\u304c true \u3067\u3042\u308b\u9650\u308a { ... } \u5185\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u7d9a\u3051\u307e\u3059\u3002 int x = 5 ; bool done = false ; while ( ! done ) { x += x - 3 ; std :: cout << x << std :: endl ; if ( x % 5 == 0 ) { done = true ; } } for \u00b6 for \u306f\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3073\u306b\u5909\u5316\u3059\u308b\u5909\u6570\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 for ( int i = 0 ; i < 10 ; ++ i ) { std :: cout << i << std :: endl ; } i \u306f\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3073\u306b 0, 1, 2, ..., 9 \u3068\u5024\u304c\u5909\u5316\u3057\u7d9a\u3051\u307e\u3059\u3002 for (int i = 0; i < 10; ++i) \u3068\u3044\u3046\u306e\u306f i \u306b 0 \u3092\u8a2d\u5b9a\u3057\u3066 i < 10 \u3092\u6e80\u305f\u3059\u307e\u3067 i \u3092 +1 \u3057\u306a\u304c\u3089\u30eb\u30fc\u30d7\u3092\u7d99\u7d9a\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002 \u914d\u5217\u306e\u30eb\u30fc\u30d7 \u00b6 \u914d\u5217\u306e\u30eb\u30fc\u30d7\u306f for \u3092\u4f7f\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 }; for ( auto e : x ) { std :: cout << e << std :: endl ; } e \u306b\u306f 0 \u304b\u3089 4 \u304c\u9806\u306b\u4ee3\u5165\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002 std::array \u3067\u3082\u540c\u3058\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 for \u306e\u4e2d\u3067\u6dfb\u5b57\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u6dfb\u5b57\u3092\u30eb\u30fc\u30d7\u3057\u3066\u914d\u5217\u306e\u8981\u7d20\u3092\u305f\u3069\u308a\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 }; for ( int i = 0 ; i < 5 ; ++ i ) { std :: cout << x [ i ] << std :: endl ; }","title":"2.7. \u5236\u5fa1\u6587"},{"location":"ch02-07-control-flow/#_1","text":"","title":"\u5236\u5fa1\u6587"},{"location":"ch02-07-control-flow/#if","text":"\u6761\u4ef6\u5206\u5c90\u3092\u3057\u305f\u3044\u6642\u306b\u306f if \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } if \u306e\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u4f55\u304b\u51e6\u7406\u3092\u3057\u305f\u3051\u308c\u3070 else \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } else { ... } \u3055\u3089\u306b\u5225\u306e\u6761\u4ef6\u3067\u51e6\u7406\u3092\u5206\u5c90\u3057\u305f\u3051\u308c\u3070 else if \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } else if ( x == 6 ) { ... } else { ... }","title":"if"},{"location":"ch02-07-control-flow/#switch","text":"\u4e00\u3064\u306e\u5909\u6570\u306e\u5024\u3092\u8abf\u3079\u306a\u304c\u3089\u5206\u5c90\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\u306f switch \u6587\u3092\u4f7f\u3044\u307e\u3059\u3002 switch ( x ) { case 0 : // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 break ; case 1 : // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 break ; default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 break ; } \u305f\u3060\u3057 switch \u6587\u304c\u4f7f\u7528\u3067\u304d\u308b\u306e\u306f\u57fa\u672c\u578b\u306e\u307f\u3067\u3059\u3002 \u4e0a\u8a18\u306e\u69cb\u6587\u306f if \u3067\u66f8\u304d\u76f4\u3059\u3068\u6b21\u3068\u7b49\u4fa1\u306b\u306a\u308a\u307e\u3059\u3002 if ( x == 0 ) { // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 } else if ( x == 1 ) { // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 } else { // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } \u305f\u3060\u3057 switch \u6587\u306e\u307b\u3046\u304c if \u3088\u308a\u3082\u6bd4\u8f03\u56de\u6570\u304c\u5c11\u306a\u3044\u305f\u3081\u52b9\u7387\u7684\u3067\u3059\u3002 if \u306f\u307e\u305a\u306f\u3058\u3081\u306b x == 0 \u304c true \u304b\u3069\u3046\u304b\u3092\u8abf\u3079 false \u3067\u3042\u308c\u3070 \u6b21\u306b x == 1 \u3092\u8a55\u4fa1\u3057\u307e\u3059\u304c\u3001 switch \u6587\u306f\u3044\u304d\u306a\u308a\u7279\u5b9a\u306e case \u306b\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002","title":"switch"},{"location":"ch02-07-control-flow/#_2","text":"switch \u306e\u5404 case \u5185\u306b\u66f8\u304b\u308c\u3066\u3044\u308b break \u306f\u66f8\u304b\u306a\u304f\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001 \u305d\u306e\u5834\u5408\u632f\u308b\u821e\u3044\u304c\u5909\u308f\u308a\u307e\u3059\u3002 switch ( x ) { case 0 : // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 case 1 : // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } break \u3092\u66f8\u3044\u305f\u5834\u5408\u306f switch \u6587\u306e\u51e6\u7406\u306f\u305d\u3053\u3067\u7d42\u308f\u308a\u307e\u3059\u304c\u3001 break \u3092\u66f8\u304b\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u305d\u306e\u307e\u307e\u4e0b\u306e case \u306b\u51e6\u7406\u304c\u6d41\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3064\u307e\u308a\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f x == 0 \u3067\u3042\u308c\u3070 case 0 \u5185\u306e\u51e6\u7406\u3092\u884c\u3063\u305f\u5f8c\u306b case 1 \u5185\u306e\u51e6\u7406\u3092\u884c\u3044\u3001\u6700\u5f8c\u306b default \u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 x == 1 \u3067\u3042\u308c\u3070\u540c\u69d8\u306e\u632f\u308b\u821e\u3044\u304c case 1 \u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a switch \u6587\u306e\u4ed5\u69d8\u3092\u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc\u3068\u8a00\u3044\u307e\u3059\u3002 \u3053\u308c\u306f case 0 \u3068 case 1 \u306e\u51e6\u7406\u304c\u540c\u3058\u3082\u306e\u306b\u306a\u308b\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002 switch ( x ) { case 0 : case 1 : // x == 0 \u307e\u305f\u306f x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } \u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc\u3092\u3055\u305b\u308b\u30b7\u30fc\u30f3\u306f\u307e\u305a\u306a\u3044\u305f\u3081\u3001 break \u3092\u5fd8\u308c\u305a\u306b\u4ed8\u3051\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc"},{"location":"ch02-07-control-flow/#while","text":"while \u306f () \u306b\u6e21\u3055\u308c\u305f\u6761\u4ef6\u304c true \u3067\u3042\u308b\u9650\u308a { ... } \u5185\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u7d9a\u3051\u307e\u3059\u3002 int x = 5 ; bool done = false ; while ( ! done ) { x += x - 3 ; std :: cout << x << std :: endl ; if ( x % 5 == 0 ) { done = true ; } }","title":"while"},{"location":"ch02-07-control-flow/#for","text":"for \u306f\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3073\u306b\u5909\u5316\u3059\u308b\u5909\u6570\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 for ( int i = 0 ; i < 10 ; ++ i ) { std :: cout << i << std :: endl ; } i \u306f\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3073\u306b 0, 1, 2, ..., 9 \u3068\u5024\u304c\u5909\u5316\u3057\u7d9a\u3051\u307e\u3059\u3002 for (int i = 0; i < 10; ++i) \u3068\u3044\u3046\u306e\u306f i \u306b 0 \u3092\u8a2d\u5b9a\u3057\u3066 i < 10 \u3092\u6e80\u305f\u3059\u307e\u3067 i \u3092 +1 \u3057\u306a\u304c\u3089\u30eb\u30fc\u30d7\u3092\u7d99\u7d9a\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002","title":"for"},{"location":"ch02-07-control-flow/#_3","text":"\u914d\u5217\u306e\u30eb\u30fc\u30d7\u306f for \u3092\u4f7f\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 }; for ( auto e : x ) { std :: cout << e << std :: endl ; } e \u306b\u306f 0 \u304b\u3089 4 \u304c\u9806\u306b\u4ee3\u5165\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002 std::array \u3067\u3082\u540c\u3058\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 for \u306e\u4e2d\u3067\u6dfb\u5b57\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u6dfb\u5b57\u3092\u30eb\u30fc\u30d7\u3057\u3066\u914d\u5217\u306e\u8981\u7d20\u3092\u305f\u3069\u308a\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 }; for ( int i = 0 ; i < 5 ; ++ i ) { std :: cout << x [ i ] << std :: endl ; }","title":"\u914d\u5217\u306e\u30eb\u30fc\u30d7"},{"location":"ch02-08-operators/","text":"\u6f14\u7b97\u5b50 \u00b6 \u7b97\u8853\u6f14\u7b97\u5b50\u3092\u4e2d\u5fc3\u306b\u3001C++ \u3067\u5229\u7528\u3067\u304d\u308b\u6f14\u7b97\u5b50\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u672c\u9805\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u306a\u3044\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u306f \u5f0f - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u56db\u5247\u6f14\u7b97\u3068\u5270\u4f59 \u00b6 \u57fa\u672c\u7684\u306a\u6f14\u7b97\u306f\u6b21\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002 x + y ; // \u52a0\u7b97 x - y ; // \u6e1b\u7b97 x * y ; // \u4e57\u7b97 x / y ; // \u9664\u7b97 x % y ; // \u5270\u4f59 0 \u3067\u9664\u7b97(\u5270\u4f59)\u3092\u884c\u3046\u3068\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308b\u305f\u3081\u3001\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 int div = 100 / 0 ; // \u5b9f\u884c\u6642\u30a8\u30e9\u30fc int mod = 100 % 0 ; // \u5b9f\u884c\u6642\u30a8\u30e9\u30fc \u6f14\u7b97\u306e\u5bfe\u8c61\u3068\u306a\u308b\u3044\u305a\u308c\u304b\u306e\u5024\u304c double ( float )\u306e\u5834\u5408\u3001 \u4ed6\u65b9\u306e\u5024\u3082 double ( float ) \u3068\u3057\u3066\u5909\u63db\u3055\u308c\u305f\u4e0a\u3067\u6f14\u7b97\u304c\u884c\u308f\u308c\u307e\u3059\u3002 int ix = 100 ; int iy = 50 ; double dx = 100.0 ; double dy = 50.0 ; auto a = ix / iy ; // int = int / int auto b = ix / dy ; // double = double(int\u304b\u3089\u5909\u63db) / double auto c = dx / iy ; // double = double / double(int\u304b\u3089\u5909\u63db) auto d = dx / dy ; // double = double / double \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 \u00b6 ++ x ; // \u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 x ++ ; // \u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 -- x ; // \u524d\u7f6e\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 x -- ; // \u5f8c\u7f6e\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 \u524d\u7f6e\u306e\u5834\u5408\u306f\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u6f14\u7b97\u304c\u5148\u306b\u884c\u308f\u308c\u307e\u3059\u3002 int a = 5 ; int b = 0 ; b = ++ a ; // a\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u304b\u3089\u3001b\u306b\u4ee3\u5165\u3059\u308b std :: cout << a << std :: endl ; // 6 std :: cout << b << std :: endl ; // 6 \u5bfe\u3057\u3066\u3001\u5f8c\u7f6e\u306e\u5834\u5408\u306f\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u6f14\u7b97\u4ee5\u5916\u306e\u51e6\u7406\u304c\u5148\u306b\u884c\u308f\u308c\u307e\u3059\u3002 int a = 5 ; int b = 0 ; b = a ++ ; // a\u3092b\u306b\u4ee3\u5165\u3057\u3066\u304b\u3089\u3001a\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b std :: cout << a << std :: endl ; // 6 std :: cout << b << std :: endl ; // 5 \u4f7f\u7528\u3059\u308b\u72b6\u6cc1\u306b\u3082\u4f9d\u308a\u307e\u3059\u304c\u3001\u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3088\u308a\u3082\u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u307b\u3046\u304c\u52b9\u7387\u304c\u826f\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d3\u30c3\u30c8\u306e\u6f14\u7b97 \u00b6 \u30d3\u30c3\u30c8\u306b\u5bfe\u3059\u308b\u6f14\u7b97\u306f\u6b21\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002 ~ x // \u5426\u5b9a x << y // \u5de6\u30b7\u30d5\u30c8 x >> b // \u53f3\u30b7\u30d5\u30c8 x & y // \u8ad6\u7406\u7a4d x | y // \u8ad6\u7406\u548c x ^ y // \u6392\u4ed6\u7684\u8ad6\u7406\u548c std::bitset \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d3\u30c3\u30c8\u5217(2\u9032\u6570)\u3067\u306e\u8868\u8a18\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 #include <bitset> #include <iostream> auto bits_a = std :: bitset < 8 > ( \"00001111\" ); // 15\u30928\u30d3\u30c3\u30c8\u3067\u8868\u3059: 00001111 std :: cout << ~ bits_a << std :: endl ; // \u5426\u5b9a: 11110000 std :: cout << ( bits_a << 2 ) << std :: endl ; // \u5de6\u306b2\u30b7\u30d5\u30c8: 00111100 std :: cout << ( bits_a >> 2 ) << std :: endl ; // \u53f3\u306b2\u30b7\u30d5\u30c8: 00000011 auto bits_b = std :: bitset < 8 > ( \"00111100\" ); // 60\u30928\u30d3\u30c3\u30c8\u3067\u8868\u3059: 00111100 std :: cout << ( bits_a & bits_b ) << std :: endl ; // \u8ad6\u7406\u7a4d: 00001100 std :: cout << ( bits_a | bits_b ) << std :: endl ; // \u8ad6\u7406\u548c: 00111111 std :: cout << ( bits_a ^ bits_b ) << std :: endl ; // \u6392\u4ed6\u7684\u8ad6\u7406\u548c: 00110011 \u6570\u5024\u578b\u3067\u3082\u30d3\u30c3\u30c8\u6f14\u7b97\u306f\u884c\u306a\u3048\u307e\u3059\u3002 \u30d3\u30c3\u30c8\u3092\u53d6\u308a\u6271\u3046\u969b\u306f\u3001 unsigned \u304c\u4ed8\u3044\u305f\u7b26\u53f7\u306a\u3057\u6574\u6570\u578b\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 unsigned int a = 0x0000000f ; // 15 std :: cout << std :: showbase << std :: hex ; // \u57fa\u6570\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u51fa\u529b + 16\u9032\u6cd5\u3067\u51fa\u529b std :: cout << ~ a << std :: endl ; // 0xfffffff0 std :: cout << ( a << 2 ) << std :: endl ; // 0x3c std :: cout << ( a >> 2 ) << std :: endl ; // 0x3 unsigned int b = 0x0000003c ; // 60 std :: cout << ( a & b ) << std :: endl ; // 0xc std :: cout << ( a | b ) << std :: endl ; // 0x3f std :: cout << ( a ^ b ) << std :: endl ; // 0x33","title":"2.8. \u6f14\u7b97\u5b50"},{"location":"ch02-08-operators/#_1","text":"\u7b97\u8853\u6f14\u7b97\u5b50\u3092\u4e2d\u5fc3\u306b\u3001C++ \u3067\u5229\u7528\u3067\u304d\u308b\u6f14\u7b97\u5b50\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u672c\u9805\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u306a\u3044\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u306f \u5f0f - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u6f14\u7b97\u5b50"},{"location":"ch02-08-operators/#_2","text":"\u57fa\u672c\u7684\u306a\u6f14\u7b97\u306f\u6b21\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002 x + y ; // \u52a0\u7b97 x - y ; // \u6e1b\u7b97 x * y ; // \u4e57\u7b97 x / y ; // \u9664\u7b97 x % y ; // \u5270\u4f59 0 \u3067\u9664\u7b97(\u5270\u4f59)\u3092\u884c\u3046\u3068\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308b\u305f\u3081\u3001\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 int div = 100 / 0 ; // \u5b9f\u884c\u6642\u30a8\u30e9\u30fc int mod = 100 % 0 ; // \u5b9f\u884c\u6642\u30a8\u30e9\u30fc \u6f14\u7b97\u306e\u5bfe\u8c61\u3068\u306a\u308b\u3044\u305a\u308c\u304b\u306e\u5024\u304c double ( float )\u306e\u5834\u5408\u3001 \u4ed6\u65b9\u306e\u5024\u3082 double ( float ) \u3068\u3057\u3066\u5909\u63db\u3055\u308c\u305f\u4e0a\u3067\u6f14\u7b97\u304c\u884c\u308f\u308c\u307e\u3059\u3002 int ix = 100 ; int iy = 50 ; double dx = 100.0 ; double dy = 50.0 ; auto a = ix / iy ; // int = int / int auto b = ix / dy ; // double = double(int\u304b\u3089\u5909\u63db) / double auto c = dx / iy ; // double = double / double(int\u304b\u3089\u5909\u63db) auto d = dx / dy ; // double = double / double","title":"\u56db\u5247\u6f14\u7b97\u3068\u5270\u4f59"},{"location":"ch02-08-operators/#_3","text":"++ x ; // \u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 x ++ ; // \u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 -- x ; // \u524d\u7f6e\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 x -- ; // \u5f8c\u7f6e\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 \u524d\u7f6e\u306e\u5834\u5408\u306f\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u6f14\u7b97\u304c\u5148\u306b\u884c\u308f\u308c\u307e\u3059\u3002 int a = 5 ; int b = 0 ; b = ++ a ; // a\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u304b\u3089\u3001b\u306b\u4ee3\u5165\u3059\u308b std :: cout << a << std :: endl ; // 6 std :: cout << b << std :: endl ; // 6 \u5bfe\u3057\u3066\u3001\u5f8c\u7f6e\u306e\u5834\u5408\u306f\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u6f14\u7b97\u4ee5\u5916\u306e\u51e6\u7406\u304c\u5148\u306b\u884c\u308f\u308c\u307e\u3059\u3002 int a = 5 ; int b = 0 ; b = a ++ ; // a\u3092b\u306b\u4ee3\u5165\u3057\u3066\u304b\u3089\u3001a\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b std :: cout << a << std :: endl ; // 6 std :: cout << b << std :: endl ; // 5 \u4f7f\u7528\u3059\u308b\u72b6\u6cc1\u306b\u3082\u4f9d\u308a\u307e\u3059\u304c\u3001\u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3088\u308a\u3082\u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u307b\u3046\u304c\u52b9\u7387\u304c\u826f\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8"},{"location":"ch02-08-operators/#_4","text":"\u30d3\u30c3\u30c8\u306b\u5bfe\u3059\u308b\u6f14\u7b97\u306f\u6b21\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002 ~ x // \u5426\u5b9a x << y // \u5de6\u30b7\u30d5\u30c8 x >> b // \u53f3\u30b7\u30d5\u30c8 x & y // \u8ad6\u7406\u7a4d x | y // \u8ad6\u7406\u548c x ^ y // \u6392\u4ed6\u7684\u8ad6\u7406\u548c std::bitset \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d3\u30c3\u30c8\u5217(2\u9032\u6570)\u3067\u306e\u8868\u8a18\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 #include <bitset> #include <iostream> auto bits_a = std :: bitset < 8 > ( \"00001111\" ); // 15\u30928\u30d3\u30c3\u30c8\u3067\u8868\u3059: 00001111 std :: cout << ~ bits_a << std :: endl ; // \u5426\u5b9a: 11110000 std :: cout << ( bits_a << 2 ) << std :: endl ; // \u5de6\u306b2\u30b7\u30d5\u30c8: 00111100 std :: cout << ( bits_a >> 2 ) << std :: endl ; // \u53f3\u306b2\u30b7\u30d5\u30c8: 00000011 auto bits_b = std :: bitset < 8 > ( \"00111100\" ); // 60\u30928\u30d3\u30c3\u30c8\u3067\u8868\u3059: 00111100 std :: cout << ( bits_a & bits_b ) << std :: endl ; // \u8ad6\u7406\u7a4d: 00001100 std :: cout << ( bits_a | bits_b ) << std :: endl ; // \u8ad6\u7406\u548c: 00111111 std :: cout << ( bits_a ^ bits_b ) << std :: endl ; // \u6392\u4ed6\u7684\u8ad6\u7406\u548c: 00110011 \u6570\u5024\u578b\u3067\u3082\u30d3\u30c3\u30c8\u6f14\u7b97\u306f\u884c\u306a\u3048\u307e\u3059\u3002 \u30d3\u30c3\u30c8\u3092\u53d6\u308a\u6271\u3046\u969b\u306f\u3001 unsigned \u304c\u4ed8\u3044\u305f\u7b26\u53f7\u306a\u3057\u6574\u6570\u578b\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 unsigned int a = 0x0000000f ; // 15 std :: cout << std :: showbase << std :: hex ; // \u57fa\u6570\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u51fa\u529b + 16\u9032\u6cd5\u3067\u51fa\u529b std :: cout << ~ a << std :: endl ; // 0xfffffff0 std :: cout << ( a << 2 ) << std :: endl ; // 0x3c std :: cout << ( a >> 2 ) << std :: endl ; // 0x3 unsigned int b = 0x0000003c ; // 60 std :: cout << ( a & b ) << std :: endl ; // 0xc std :: cout << ( a | b ) << std :: endl ; // 0x3f std :: cout << ( a ^ b ) << std :: endl ; // 0x33","title":"\u30d3\u30c3\u30c8\u306e\u6f14\u7b97"},{"location":"ch03-01-arrays/","text":"\u914d\u5217 \u00b6 \u914d\u5217\u306f\u540c\u4e00\u306e\u578b\u3092\u6301\u3064\u8907\u6570\u306e\u5024\u3092\u307e\u3068\u3081\u3066\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u578b\u3067\u3059\u3002 \u4f7f\u3044\u65b9\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; \u3053\u308c\u3067 5 \u8981\u7d20\u306e\u5024\u3092\u6301\u3064\u914d\u5217\u304c\u5ba3\u8a00\u3055\u308c\u307e\u3059\u3002 \u8981\u7d20\u53c2\u7167 \u00b6 \u914d\u5217\u306e\u8981\u7d20\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u914d\u5217\u306e\u4f55\u756a\u76ee\u306e\u8981\u7d20\u306a\u306e\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u6570\u3048\u306e\u59cb\u307e\u308a\u306f 0 \u304b\u3089\u306b\u306a\u308a\u307e\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; int y = x [ 2 ]; // 2 \u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3 \u00b6 \u914d\u5217\u306e\u5ba3\u8a00\u3068\u540c\u6642\u306b\u8981\u7d20\u3092\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u8981\u7d20\u6570\u306e\u6307\u5b9a\u304c\u7701\u7565\u3067\u304d\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 , 5 }; \u914d\u5217\u306e\u5ba3\u8a00\u5f8c\u306b\u8981\u7d20\u3092\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u8981\u7d20\u6570\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002 int x [ 5 ]; x [ 0 ] = 0 ; x [ 1 ] = 1 ; x [ 2 ] = 2 ; x [ 3 ] = 3 ; x [ 4 ] = 4 ; \u8981\u7d20\u6570\u306b\u6bd4\u3079\u3066\u8a2d\u5b9a\u3057\u305f\u8981\u7d20\u306e\u500b\u6570\u304c\u5c11\u306a\u3044\u5834\u5408\u306f\u6b8b\u308a\u306e\u8981\u7d20\u304c\u30bc\u30ed\u3067\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 }; // x[3], x[4] \u306f\u30bc\u30ed\u3067\u521d\u671f\u5316 \u8981\u7d20\u3092\u5168\u304f\u6307\u5b9a\u3057\u306a\u3044\u3068\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u30bc\u30ed\u3067\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 int x [ 5 ] = {}; \u3053\u308c\u304c\u4e00\u756a\u624b\u8efd\u306a\u521d\u671f\u5316\u65b9\u6cd5\u3067\u3059\u3002 std::array \u00b6 \u3088\u308a\u9ad8\u6a5f\u80fd\u306a\u914d\u5217\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306f std::array \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <array> std :: array < int , 5 > x = { 0 , 1 , 2 , 3 , 4 }; x \u306f\u8981\u7d20\u6570\u304c 5 \u3067\u3042\u308b\u3088\u3046\u306a int \u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 std::array \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f <array> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u8981\u7d20\u53c2\u7167\u306f\u901a\u5e38\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002 x [ 2 ] = 10 ; x.size() \u3068\u3059\u308b\u3068\u8981\u7d20\u6570\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 auto size = x . size (); // 5 \u901a\u5e38\u306e\u914d\u5217\u304b\u3089\u306f\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u3001 \u914d\u5217\u3068\u8981\u7d20\u6570\u3092\u4fdd\u5b58\u3057\u305f\u5909\u6570\u306e2\u3064\u3092\u6301\u3061\u56de\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 std::array \u3092\u4f7f\u3048\u3070\u305d\u308c\u3089\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3048\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002","title":"3.1. \u914d\u5217"},{"location":"ch03-01-arrays/#_1","text":"\u914d\u5217\u306f\u540c\u4e00\u306e\u578b\u3092\u6301\u3064\u8907\u6570\u306e\u5024\u3092\u307e\u3068\u3081\u3066\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u578b\u3067\u3059\u3002 \u4f7f\u3044\u65b9\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; \u3053\u308c\u3067 5 \u8981\u7d20\u306e\u5024\u3092\u6301\u3064\u914d\u5217\u304c\u5ba3\u8a00\u3055\u308c\u307e\u3059\u3002","title":"\u914d\u5217"},{"location":"ch03-01-arrays/#_2","text":"\u914d\u5217\u306e\u8981\u7d20\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u914d\u5217\u306e\u4f55\u756a\u76ee\u306e\u8981\u7d20\u306a\u306e\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u6570\u3048\u306e\u59cb\u307e\u308a\u306f 0 \u304b\u3089\u306b\u306a\u308a\u307e\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; int y = x [ 2 ]; // 2","title":"\u8981\u7d20\u53c2\u7167"},{"location":"ch03-01-arrays/#_3","text":"\u914d\u5217\u306e\u5ba3\u8a00\u3068\u540c\u6642\u306b\u8981\u7d20\u3092\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u8981\u7d20\u6570\u306e\u6307\u5b9a\u304c\u7701\u7565\u3067\u304d\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 , 5 }; \u914d\u5217\u306e\u5ba3\u8a00\u5f8c\u306b\u8981\u7d20\u3092\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u8981\u7d20\u6570\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002 int x [ 5 ]; x [ 0 ] = 0 ; x [ 1 ] = 1 ; x [ 2 ] = 2 ; x [ 3 ] = 3 ; x [ 4 ] = 4 ; \u8981\u7d20\u6570\u306b\u6bd4\u3079\u3066\u8a2d\u5b9a\u3057\u305f\u8981\u7d20\u306e\u500b\u6570\u304c\u5c11\u306a\u3044\u5834\u5408\u306f\u6b8b\u308a\u306e\u8981\u7d20\u304c\u30bc\u30ed\u3067\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 }; // x[3], x[4] \u306f\u30bc\u30ed\u3067\u521d\u671f\u5316 \u8981\u7d20\u3092\u5168\u304f\u6307\u5b9a\u3057\u306a\u3044\u3068\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u30bc\u30ed\u3067\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 int x [ 5 ] = {}; \u3053\u308c\u304c\u4e00\u756a\u624b\u8efd\u306a\u521d\u671f\u5316\u65b9\u6cd5\u3067\u3059\u3002","title":"\u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3"},{"location":"ch03-01-arrays/#stdarray","text":"\u3088\u308a\u9ad8\u6a5f\u80fd\u306a\u914d\u5217\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306f std::array \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <array> std :: array < int , 5 > x = { 0 , 1 , 2 , 3 , 4 }; x \u306f\u8981\u7d20\u6570\u304c 5 \u3067\u3042\u308b\u3088\u3046\u306a int \u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 std::array \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f <array> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u8981\u7d20\u53c2\u7167\u306f\u901a\u5e38\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002 x [ 2 ] = 10 ; x.size() \u3068\u3059\u308b\u3068\u8981\u7d20\u6570\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 auto size = x . size (); // 5 \u901a\u5e38\u306e\u914d\u5217\u304b\u3089\u306f\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u3001 \u914d\u5217\u3068\u8981\u7d20\u6570\u3092\u4fdd\u5b58\u3057\u305f\u5909\u6570\u306e2\u3064\u3092\u6301\u3061\u56de\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 std::array \u3092\u4f7f\u3048\u3070\u305d\u308c\u3089\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3048\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002","title":"std::array"},{"location":"ch03-02-strings/","text":"\u6587\u5b57\u5217 \u00b6 \u6587\u5b57\u5217\u3092\u6271\u3046\u306b\u306f std::string \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <string> std :: string s = \"Hello\" ; std::string \u306f\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u3092 char \u306e\u914d\u5217\u3068\u3057\u3066\u6271\u3046\u305f\u3081 \u914d\u5217\u306e\u3088\u3046\u306b\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: string s = \"Hello\" ; s [ 0 ]; // 'H' s [ 1 ]; // 'e' s [ 2 ]; // 'l' s [ 3 ]; // 'l' s [ 4 ]; // 'o' s.size() \u3068\u3059\u308b\u3068\u6587\u5b57\u5217\u6570\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 s . size (); // 5","title":"3.2. \u6587\u5b57\u5217"},{"location":"ch03-02-strings/#_1","text":"\u6587\u5b57\u5217\u3092\u6271\u3046\u306b\u306f std::string \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <string> std :: string s = \"Hello\" ; std::string \u306f\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u3092 char \u306e\u914d\u5217\u3068\u3057\u3066\u6271\u3046\u305f\u3081 \u914d\u5217\u306e\u3088\u3046\u306b\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: string s = \"Hello\" ; s [ 0 ]; // 'H' s [ 1 ]; // 'e' s [ 2 ]; // 'l' s [ 3 ]; // 'l' s [ 4 ]; // 'o' s.size() \u3068\u3059\u308b\u3068\u6587\u5b57\u5217\u6570\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 s . size (); // 5","title":"\u6587\u5b57\u5217"},{"location":"ch03-03-tuples/","text":"\u30bf\u30d7\u30eb \u00b6 \u30bf\u30d7\u30eb\u306f\u8907\u6570\u306e\u5024\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u578b\u3067\u3059\u3002 \u914d\u5217\u3068\u4f3c\u305f\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u914d\u5217\u3068\u7570\u306a\u308a\u5404\u8981\u7d20\u306f\u540c\u3058\u578b\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30bf\u30d7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <tuple> std :: tuple < std :: string , int > person { \"Bob\" , 20 }; < ... > \u306e\u90e8\u5206\u306b\u5404\u8981\u7d20\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u8981\u7d20\u6570\u306f\u3044\u304f\u3064\u3067\u3082\u5897\u3084\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: tuple < std :: string , int , std :: string > person { \"Bob\" , 20 , \"USA\" }; \u8981\u7d20\u53c2\u7167 \u00b6 \u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u30bf\u30d7\u30eb\u3082\u8981\u7d20\u53c2\u7167\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: get < 0 > ( person ); // \"Bob\" std :: get < 1 > ( person ); // 20 \u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3 \u00b6 \u30bf\u30d7\u30eb\u306f\u521d\u671f\u5316\u65b9\u6cd5\u306b\u5e7e\u3064\u304b\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 std :: tuple < std :: string , int > person { \"Bob\" , 20 }; std :: tuple < std :: string , int > person ( \"Bob\" , 20 ); std :: tuple < std :: string , int > person = std :: make_tuple ( \"Bob\" , 20 ); std::tie() \u00b6 std::tie() \u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3046\u3068\u30bf\u30d7\u30eb\u306e\u8981\u7d20\u3092\u500b\u5225\u306e\u5909\u6570\u306b \u307e\u3068\u3081\u3066\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: tuple < std :: string , int , std :: string > person { \"Bob\" , 20 , \"USA\" }; std :: string name ; int age ; std :: string country ; std :: tie ( name , age , country ) = person ; // name: \"Bob\", age: 20, country: \"USA\"","title":"3.3. \u30bf\u30d7\u30eb"},{"location":"ch03-03-tuples/#_1","text":"\u30bf\u30d7\u30eb\u306f\u8907\u6570\u306e\u5024\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u578b\u3067\u3059\u3002 \u914d\u5217\u3068\u4f3c\u305f\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u914d\u5217\u3068\u7570\u306a\u308a\u5404\u8981\u7d20\u306f\u540c\u3058\u578b\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30bf\u30d7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <tuple> std :: tuple < std :: string , int > person { \"Bob\" , 20 }; < ... > \u306e\u90e8\u5206\u306b\u5404\u8981\u7d20\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u8981\u7d20\u6570\u306f\u3044\u304f\u3064\u3067\u3082\u5897\u3084\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: tuple < std :: string , int , std :: string > person { \"Bob\" , 20 , \"USA\" };","title":"\u30bf\u30d7\u30eb"},{"location":"ch03-03-tuples/#_2","text":"\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u30bf\u30d7\u30eb\u3082\u8981\u7d20\u53c2\u7167\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: get < 0 > ( person ); // \"Bob\" std :: get < 1 > ( person ); // 20","title":"\u8981\u7d20\u53c2\u7167"},{"location":"ch03-03-tuples/#_3","text":"\u30bf\u30d7\u30eb\u306f\u521d\u671f\u5316\u65b9\u6cd5\u306b\u5e7e\u3064\u304b\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 std :: tuple < std :: string , int > person { \"Bob\" , 20 }; std :: tuple < std :: string , int > person ( \"Bob\" , 20 ); std :: tuple < std :: string , int > person = std :: make_tuple ( \"Bob\" , 20 );","title":"\u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3"},{"location":"ch03-03-tuples/#stdtie","text":"std::tie() \u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3046\u3068\u30bf\u30d7\u30eb\u306e\u8981\u7d20\u3092\u500b\u5225\u306e\u5909\u6570\u306b \u307e\u3068\u3081\u3066\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: tuple < std :: string , int , std :: string > person { \"Bob\" , 20 , \"USA\" }; std :: string name ; int age ; std :: string country ; std :: tie ( name , age , country ) = person ; // name: \"Bob\", age: 20, country: \"USA\"","title":"std::tie()"},{"location":"ch03-04-pairs/","text":"\u30da\u30a2 \u00b6 \u30da\u30a2\u306f2\u3064\u306e\u5024\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u578b\u3067\u3059\u3002 \u8981\u7d20\u6570\u304c2\u3064\u306e\u30bf\u30d7\u30eb\u3068\u540c\u3058\u3088\u3046\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30da\u30a2\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <utility> std :: pair < std :: string , int > person { \"Bob\" , 20 }; \u8981\u7d20\u53c2\u7167 \u00b6 \u30bf\u30d7\u30eb\u3068\u540c\u69d8\u306b\u8981\u7d20\u53c2\u7167\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: get < 0 > ( person ); // \"Bob\" std :: get < 1 > ( person ); // 20 \u30da\u30a2\u3067\u306f0\u756a\u76ee\u306e\u8981\u7d20\u3092 first \u3001 1\u756a\u76ee\u306e\u8981\u7d20\u3092 second \u3067\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 person . first ; // \"Bob\" person . second ; // 20 \u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3 \u00b6 \u30bf\u30d7\u30eb\u3068\u540c\u69d8\u306b\u521d\u671f\u5316\u65b9\u6cd5\u306b\u5e7e\u3064\u304b\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 std :: pair < std :: string , int > person { \"Bob\" , 20 }; std :: pair < std :: string , int > person ( \"Bob\" , 20 ); std :: pair < std :: string , int > person = std :: make_pair ( \"Bob\" , 20 ); std::tie() \u00b6 std::tie() \u3092\u4f7f\u3046\u3068\u30da\u30a2\u306e\u8981\u7d20\u3092\u500b\u5225\u306e\u5909\u6570\u306b\u307e\u3068\u3081\u3066\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std::tie() \u3092\u4f7f\u3046\u306b\u306f <tuple> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 #include <tuple> std :: pair < std :: string , int > person { \"Bob\" , 20 }; std :: string name ; int age ; std :: tie ( name , age ) = person ; // name: \"Bob\", age: 20","title":"3.4. \u30da\u30a2"},{"location":"ch03-04-pairs/#_1","text":"\u30da\u30a2\u306f2\u3064\u306e\u5024\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u578b\u3067\u3059\u3002 \u8981\u7d20\u6570\u304c2\u3064\u306e\u30bf\u30d7\u30eb\u3068\u540c\u3058\u3088\u3046\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30da\u30a2\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <utility> std :: pair < std :: string , int > person { \"Bob\" , 20 };","title":"\u30da\u30a2"},{"location":"ch03-04-pairs/#_2","text":"\u30bf\u30d7\u30eb\u3068\u540c\u69d8\u306b\u8981\u7d20\u53c2\u7167\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: get < 0 > ( person ); // \"Bob\" std :: get < 1 > ( person ); // 20 \u30da\u30a2\u3067\u306f0\u756a\u76ee\u306e\u8981\u7d20\u3092 first \u3001 1\u756a\u76ee\u306e\u8981\u7d20\u3092 second \u3067\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 person . first ; // \"Bob\" person . second ; // 20","title":"\u8981\u7d20\u53c2\u7167"},{"location":"ch03-04-pairs/#_3","text":"\u30bf\u30d7\u30eb\u3068\u540c\u69d8\u306b\u521d\u671f\u5316\u65b9\u6cd5\u306b\u5e7e\u3064\u304b\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 std :: pair < std :: string , int > person { \"Bob\" , 20 }; std :: pair < std :: string , int > person ( \"Bob\" , 20 ); std :: pair < std :: string , int > person = std :: make_pair ( \"Bob\" , 20 );","title":"\u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3"},{"location":"ch03-04-pairs/#stdtie","text":"std::tie() \u3092\u4f7f\u3046\u3068\u30da\u30a2\u306e\u8981\u7d20\u3092\u500b\u5225\u306e\u5909\u6570\u306b\u307e\u3068\u3081\u3066\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std::tie() \u3092\u4f7f\u3046\u306b\u306f <tuple> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 #include <tuple> std :: pair < std :: string , int > person { \"Bob\" , 20 }; std :: string name ; int age ; std :: tie ( name , age ) = person ; // name: \"Bob\", age: 20","title":"std::tie()"},{"location":"ch03-05-vectors/","text":"\u30d9\u30af\u30bf \u00b6 \u8981\u7d20\u6570\u3092\u5b9f\u884c\u6642\u306b\u5909\u66f4\u3067\u304d\u308b\u914d\u5217\u3092\u6271\u3046\u306b\u306f std::vector \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; x \u306f\u8981\u7d20\u6570\u304c 5 \u3067\u3042\u308b\u3088\u3046\u306a int \u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 std::vector \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f <vector> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u8981\u7d20\u53c2\u7167\u306f\u901a\u5e38\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002 x [ 2 ] = 10 ; x.size() \u3068\u3059\u308b\u3068\u8981\u7d20\u6570\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 auto size = x . size (); // 5 \u672b\u5c3e\u3078\u8981\u7d20\u8ffd\u52a0 \u00b6 x.push_back() \u3068\u3059\u308b\u3068\u672b\u5c3e\u3078\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; auto size1 = x . size (); // 5 x . push_back ( 5 ); auto size2 = x . size (); // 6 \u672b\u5c3e\u304b\u3089\u8981\u7d20\u524a\u9664 \u00b6 x.pop_back() \u3068\u3059\u308b\u3068\u672b\u5c3e\u304b\u3089\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; auto size1 = x . size (); // 5 x . pop_back (); auto size2 = x . size (); // 4 bool \u306b\u5bfe\u3059\u308b\u7279\u6b8a\u5316 \u00b6 std::vector \u306f bool \u306b\u5bfe\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7279\u6b8a\u5316\u3055\u308c\u3066\u304a\u308a\u3001 std::vector<bool> \u306f bool \u4ee5\u5916\u306e std::vector \u3068\u306f\u52d5\u4f5c\u304c\u7570\u306a\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f vector - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"3.5. \u30d9\u30af\u30bf"},{"location":"ch03-05-vectors/#_1","text":"\u8981\u7d20\u6570\u3092\u5b9f\u884c\u6642\u306b\u5909\u66f4\u3067\u304d\u308b\u914d\u5217\u3092\u6271\u3046\u306b\u306f std::vector \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; x \u306f\u8981\u7d20\u6570\u304c 5 \u3067\u3042\u308b\u3088\u3046\u306a int \u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 std::vector \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f <vector> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u8981\u7d20\u53c2\u7167\u306f\u901a\u5e38\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002 x [ 2 ] = 10 ; x.size() \u3068\u3059\u308b\u3068\u8981\u7d20\u6570\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 auto size = x . size (); // 5","title":"\u30d9\u30af\u30bf"},{"location":"ch03-05-vectors/#_2","text":"x.push_back() \u3068\u3059\u308b\u3068\u672b\u5c3e\u3078\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; auto size1 = x . size (); // 5 x . push_back ( 5 ); auto size2 = x . size (); // 6","title":"\u672b\u5c3e\u3078\u8981\u7d20\u8ffd\u52a0"},{"location":"ch03-05-vectors/#_3","text":"x.pop_back() \u3068\u3059\u308b\u3068\u672b\u5c3e\u304b\u3089\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; auto size1 = x . size (); // 5 x . pop_back (); auto size2 = x . size (); // 4","title":"\u672b\u5c3e\u304b\u3089\u8981\u7d20\u524a\u9664"},{"location":"ch03-05-vectors/#bool","text":"std::vector \u306f bool \u306b\u5bfe\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7279\u6b8a\u5316\u3055\u308c\u3066\u304a\u308a\u3001 std::vector<bool> \u306f bool \u4ee5\u5916\u306e std::vector \u3068\u306f\u52d5\u4f5c\u304c\u7570\u306a\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f vector - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"bool \u306b\u5bfe\u3059\u308b\u7279\u6b8a\u5316"},{"location":"ch03-06-maps/","text":"\u30de\u30c3\u30d7 \u00b6 \u914d\u5217\u3067\u306f\u8981\u7d20\u53c2\u7167\u306e\u305f\u3081\u306b\u4f55\u756a\u76ee\u306e\u8981\u7d20\u3068\u6307\u5b9a\u3057\u307e\u3059\u304c\u3001 std::map \u307e\u305f\u306f std::unorderd_map \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3059\u308b\u3068 \u4f55\u756a\u76ee\u3068\u3044\u3046\u6307\u5b9a\u306e\u4ee3\u308f\u308a\u306b\u4efb\u610f\u306e\u578b\u3092\u30ad\u30fc\u3068\u3057\u3066\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u6a5f\u80fd\u306f\u9023\u60f3\u914d\u5217\u3084\u8f9e\u66f8\u3068\u3082\u547c\u3070\u308c\u307e\u3059\u3002 #include <map> std :: map < std :: string , int > persons = { { \"Alice\" , 18 }, { \"Bob\" , 20 } }; #include <unordered_map> std :: unordered_map < std :: string , int > persons = { { \"Alice\" , 18 }, { \"Bob\" , 20 } }; \u8981\u7d20\u53c2\u7167\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 persons [ \"Alice\" ]; // 18 persons [ \"Bob\" ]; // 20 \u8981\u7d20\u8ffd\u52a0 \u00b6 insert() \u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . insert ({ \"Eve\" , 19 }); \u8981\u7d20\u524a\u9664 \u00b6 erase() \u3067\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . erase ( \"Bob\" ); std::map \u3068 std::unordered_map \u306e\u9055\u3044 \u00b6 std::map \u306f\u30ad\u30fc\u3067\u30bd\u30fc\u30c8\u3057\u3066\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001 std::unordered_map \u306f\u30ad\u30fc\u304b\u3089\u8a08\u7b97\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u3068\u547c\u3070\u308c\u308b\u5024\u3067\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002 \u52b9\u7387\u306e\u3088\u3044\u30cf\u30c3\u30b7\u30e5\u8a08\u7b97\u3092\u884c\u3048\u308b\u5834\u5408\u306b\u306f std::unordered_map \u306e\u65b9\u304c\u9069\u3057\u3066\u3044\u307e\u3059\u3002","title":"3.6. \u30de\u30c3\u30d7"},{"location":"ch03-06-maps/#_1","text":"\u914d\u5217\u3067\u306f\u8981\u7d20\u53c2\u7167\u306e\u305f\u3081\u306b\u4f55\u756a\u76ee\u306e\u8981\u7d20\u3068\u6307\u5b9a\u3057\u307e\u3059\u304c\u3001 std::map \u307e\u305f\u306f std::unorderd_map \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3059\u308b\u3068 \u4f55\u756a\u76ee\u3068\u3044\u3046\u6307\u5b9a\u306e\u4ee3\u308f\u308a\u306b\u4efb\u610f\u306e\u578b\u3092\u30ad\u30fc\u3068\u3057\u3066\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u6a5f\u80fd\u306f\u9023\u60f3\u914d\u5217\u3084\u8f9e\u66f8\u3068\u3082\u547c\u3070\u308c\u307e\u3059\u3002 #include <map> std :: map < std :: string , int > persons = { { \"Alice\" , 18 }, { \"Bob\" , 20 } }; #include <unordered_map> std :: unordered_map < std :: string , int > persons = { { \"Alice\" , 18 }, { \"Bob\" , 20 } }; \u8981\u7d20\u53c2\u7167\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 persons [ \"Alice\" ]; // 18 persons [ \"Bob\" ]; // 20","title":"\u30de\u30c3\u30d7"},{"location":"ch03-06-maps/#_2","text":"insert() \u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . insert ({ \"Eve\" , 19 });","title":"\u8981\u7d20\u8ffd\u52a0"},{"location":"ch03-06-maps/#_3","text":"erase() \u3067\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . erase ( \"Bob\" );","title":"\u8981\u7d20\u524a\u9664"},{"location":"ch03-06-maps/#stdmap-stdunordered_map","text":"std::map \u306f\u30ad\u30fc\u3067\u30bd\u30fc\u30c8\u3057\u3066\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001 std::unordered_map \u306f\u30ad\u30fc\u304b\u3089\u8a08\u7b97\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u3068\u547c\u3070\u308c\u308b\u5024\u3067\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002 \u52b9\u7387\u306e\u3088\u3044\u30cf\u30c3\u30b7\u30e5\u8a08\u7b97\u3092\u884c\u3048\u308b\u5834\u5408\u306b\u306f std::unordered_map \u306e\u65b9\u304c\u9069\u3057\u3066\u3044\u307e\u3059\u3002","title":"std::map \u3068 std::unordered_map \u306e\u9055\u3044"},{"location":"ch03-07-sets/","text":"\u30bb\u30c3\u30c8 \u00b6 std::set \u307e\u305f\u306f std::unordered_set \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3059\u308b\u3068 \u4efb\u610f\u306e\u578b\u306e\u96c6\u5408\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <set> std :: set < std :: string > persons = { \"Alice\" , \"Bob\" }; #include <unordered_set> std :: unordered_set < std :: string > persons = { \"Alice\" , \"Bob\" }; \u8981\u7d20\u8ffd\u52a0 \u00b6 insert() \u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . insert ( \"Eve\" ); \u8981\u7d20\u524a\u9664 \u00b6 erase() \u3067\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . erase ( \"Bob\" ); std::set \u3068 std::unordered_set \u306e\u9055\u3044 \u00b6 std::set \u306f\u30ad\u30fc\u3067\u30bd\u30fc\u30c8\u3057\u3066\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001 std::unordered_set \u306f\u30ad\u30fc\u304b\u3089\u8a08\u7b97\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u3068\u547c\u3070\u308c\u308b\u5024\u3067\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002 \u52b9\u7387\u306e\u3088\u3044\u30cf\u30c3\u30b7\u30e5\u8a08\u7b97\u3092\u884c\u3048\u308b\u5834\u5408\u306b\u306f std::unordered_set \u306e\u65b9\u304c\u9069\u3057\u3066\u3044\u307e\u3059\u3002","title":"3.7. \u30bb\u30c3\u30c8"},{"location":"ch03-07-sets/#_1","text":"std::set \u307e\u305f\u306f std::unordered_set \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3059\u308b\u3068 \u4efb\u610f\u306e\u578b\u306e\u96c6\u5408\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <set> std :: set < std :: string > persons = { \"Alice\" , \"Bob\" }; #include <unordered_set> std :: unordered_set < std :: string > persons = { \"Alice\" , \"Bob\" };","title":"\u30bb\u30c3\u30c8"},{"location":"ch03-07-sets/#_2","text":"insert() \u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . insert ( \"Eve\" );","title":"\u8981\u7d20\u8ffd\u52a0"},{"location":"ch03-07-sets/#_3","text":"erase() \u3067\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . erase ( \"Bob\" );","title":"\u8981\u7d20\u524a\u9664"},{"location":"ch03-07-sets/#stdset-stdunordered_set","text":"std::set \u306f\u30ad\u30fc\u3067\u30bd\u30fc\u30c8\u3057\u3066\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001 std::unordered_set \u306f\u30ad\u30fc\u304b\u3089\u8a08\u7b97\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u3068\u547c\u3070\u308c\u308b\u5024\u3067\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002 \u52b9\u7387\u306e\u3088\u3044\u30cf\u30c3\u30b7\u30e5\u8a08\u7b97\u3092\u884c\u3048\u308b\u5834\u5408\u306b\u306f std::unordered_set \u306e\u65b9\u304c\u9069\u3057\u3066\u3044\u307e\u3059\u3002","title":"std::set \u3068 std::unordered_set \u306e\u9055\u3044"},{"location":"ch04-01-multiple-files/","text":"\u8907\u6570\u30d5\u30a1\u30a4\u30eb \u00b6 C++ \u3067\u306f2\u7a2e\u985e\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3044\u307e\u3059\u3002 \u30d8\u30c3\u30c0 (\u62e1\u5f35\u5b50: .h , .hpp ) \u95a2\u6570\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9 (\u62e1\u5f35\u5b50: .cpp , .cc , .cxx ) \u95a2\u6570\u306e\u5b9f\u88c5\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8de8\u3044\u3060\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 main.cc \u5185\u3067 a.cc \u306e DoSomething() \u3092\u4f7f\u3046\u305f\u3081\u306b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u3057\u3066\u3044\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 void DoSomething (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 int main () { DoSomething (); return 0 ; } a.cc 1 void DoSomething () { /* \u5b9f\u88c5\u7701\u7565 */ } Info \u8907\u6570\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u4e26\u3079\u3066\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ g++ main.cc a.cc \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u3082\u52d5\u4f5c\u306f\u3057\u307e\u3059\u304c\u3001 a.cc \u306b\u8a18\u8ff0\u3057\u3066\u3044\u308b\u95a2\u6570\u3092\u4ed6\u306e\u69d8\u3005\u306a\u30bd\u30fc\u30b9\u304b\u3089\u5229\u7528\u3057\u305f\u3044\u3068\u306a\u3063\u305f\u5834\u5408\u306b\u3001 \u305d\u306e\u90fd\u5ea6\u3001\u305d\u308c\u305e\u308c\u306e\u30bd\u30fc\u30b9\u306b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u3001\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002 \u305d\u3053\u3067\u767b\u5834\u3059\u308b\u306e\u304c\u30d8\u30c3\u30c0\u3067\u3059\u3002 \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3060\u3051\u30d8\u30c3\u30c0\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\u5ba3\u8a00\u30921\u56de\u66f8\u304f\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 a.h 1 2 void DoSomething (); void DoSomething2 (); main.cc 1 2 3 4 5 6 7 8 #include \"a.h\" int main () { DoSomething (); DoSomething2 (); return 0 ; } a.cc 1 2 void DoSomething () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething2 () { /* \u5b9f\u88c5\u7701\u7565 */ } main.cc \u5185\u3067 a.cc \u306e\u95a2\u6570\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b a.h \u3067 a.cc \u306e\u95a2\u6570\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u3057\u307e\u3059\u3002 main.cc \u3067 a.h \u3092\u53d6\u308a\u8fbc\u3080\u305f\u3081\u306b #include \"a.h\" \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u3053\u308c\u3067 main.cc \u304b\u3089 a.cc \u306e\u95a2\u6570\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9 \u00b6 \u30d8\u30c3\u30c0\u306b\u306f\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 a.h 1 2 3 4 5 6 7 #ifndef A_H_ #define A_H_ void DoSomething (); void DoSomething2 (); #endif // A_H_ \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u304c\u3042\u308b\u3053\u3068\u3067\u3001\u30bd\u30fc\u30b9\u304c\u540c\u3058\u30d8\u30c3\u30c0\u3092\u8907\u6570\u56de\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3053\u3068\u3092\u9632\u304e\u307e\u3059\u3002 _ \u3067\u59cb\u307e\u308b\u540d\u524d\u3084 __ \u3092\u542b\u3080\u3088\u3046\u306a\u540d\u524d\u306f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u3084\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3066\u4e88\u7d04\u3055\u308c\u3066\u3044\u308b\u8b58\u5225\u5b50\u3068\u540d\u524d\u304c\u88ab\u308b\u6050\u308c\u304c\u3042\u308b\u305f\u3081\u4f7f\u3063\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 #define _A_H_ // _ \u3067\u59cb\u307e\u308b\u306e\u3067NG #define A__H_ // __ \u3092\u542b\u3080\u306e\u3067NG \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u306f\u4e00\u822c\u7684\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3054\u3068\u306b\u547d\u540d\u898f\u5247\u3092\u8a2d\u3051\u307e\u3059\u3002","title":"4.1. \u8907\u6570\u30d5\u30a1\u30a4\u30eb"},{"location":"ch04-01-multiple-files/#_1","text":"C++ \u3067\u306f2\u7a2e\u985e\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3044\u307e\u3059\u3002 \u30d8\u30c3\u30c0 (\u62e1\u5f35\u5b50: .h , .hpp ) \u95a2\u6570\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9 (\u62e1\u5f35\u5b50: .cpp , .cc , .cxx ) \u95a2\u6570\u306e\u5b9f\u88c5\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8de8\u3044\u3060\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 main.cc \u5185\u3067 a.cc \u306e DoSomething() \u3092\u4f7f\u3046\u305f\u3081\u306b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u3057\u3066\u3044\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 void DoSomething (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 int main () { DoSomething (); return 0 ; } a.cc 1 void DoSomething () { /* \u5b9f\u88c5\u7701\u7565 */ } Info \u8907\u6570\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u4e26\u3079\u3066\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ g++ main.cc a.cc \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u3082\u52d5\u4f5c\u306f\u3057\u307e\u3059\u304c\u3001 a.cc \u306b\u8a18\u8ff0\u3057\u3066\u3044\u308b\u95a2\u6570\u3092\u4ed6\u306e\u69d8\u3005\u306a\u30bd\u30fc\u30b9\u304b\u3089\u5229\u7528\u3057\u305f\u3044\u3068\u306a\u3063\u305f\u5834\u5408\u306b\u3001 \u305d\u306e\u90fd\u5ea6\u3001\u305d\u308c\u305e\u308c\u306e\u30bd\u30fc\u30b9\u306b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u3001\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002 \u305d\u3053\u3067\u767b\u5834\u3059\u308b\u306e\u304c\u30d8\u30c3\u30c0\u3067\u3059\u3002 \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3060\u3051\u30d8\u30c3\u30c0\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\u5ba3\u8a00\u30921\u56de\u66f8\u304f\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 a.h 1 2 void DoSomething (); void DoSomething2 (); main.cc 1 2 3 4 5 6 7 8 #include \"a.h\" int main () { DoSomething (); DoSomething2 (); return 0 ; } a.cc 1 2 void DoSomething () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething2 () { /* \u5b9f\u88c5\u7701\u7565 */ } main.cc \u5185\u3067 a.cc \u306e\u95a2\u6570\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b a.h \u3067 a.cc \u306e\u95a2\u6570\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u3057\u307e\u3059\u3002 main.cc \u3067 a.h \u3092\u53d6\u308a\u8fbc\u3080\u305f\u3081\u306b #include \"a.h\" \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u3053\u308c\u3067 main.cc \u304b\u3089 a.cc \u306e\u95a2\u6570\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002","title":"\u8907\u6570\u30d5\u30a1\u30a4\u30eb"},{"location":"ch04-01-multiple-files/#_2","text":"\u30d8\u30c3\u30c0\u306b\u306f\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 a.h 1 2 3 4 5 6 7 #ifndef A_H_ #define A_H_ void DoSomething (); void DoSomething2 (); #endif // A_H_ \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u304c\u3042\u308b\u3053\u3068\u3067\u3001\u30bd\u30fc\u30b9\u304c\u540c\u3058\u30d8\u30c3\u30c0\u3092\u8907\u6570\u56de\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3053\u3068\u3092\u9632\u304e\u307e\u3059\u3002 _ \u3067\u59cb\u307e\u308b\u540d\u524d\u3084 __ \u3092\u542b\u3080\u3088\u3046\u306a\u540d\u524d\u306f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u3084\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3066\u4e88\u7d04\u3055\u308c\u3066\u3044\u308b\u8b58\u5225\u5b50\u3068\u540d\u524d\u304c\u88ab\u308b\u6050\u308c\u304c\u3042\u308b\u305f\u3081\u4f7f\u3063\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 #define _A_H_ // _ \u3067\u59cb\u307e\u308b\u306e\u3067NG #define A__H_ // __ \u3092\u542b\u3080\u306e\u3067NG \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u306f\u4e00\u822c\u7684\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3054\u3068\u306b\u547d\u540d\u898f\u5247\u3092\u8a2d\u3051\u307e\u3059\u3002","title":"\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9"},{"location":"ch05-01-standard-inout/","text":"\u6a19\u6e96\u5165\u51fa\u529b \u00b6 C++ \u3067\u5165\u51fa\u529b\u3092\u6271\u3046\u5834\u5408\u306f <iostream> \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u6a19\u6e96\u51fa\u529b \u00b6 std::cout \u3067\u6a19\u6e96\u51fa\u529b\u306b\u5bfe\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002 #include <iostream> std :: cout << \"\u6a19\u6e96\u51fa\u529b\" ; Info std::endl \u3067\u6539\u884c\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 std :: cout << 1 + 2 << std :: endl ; std :: cout << 3 + 4 << std :: endl ; # \u51fa\u529b\u7d50\u679c 3 7 \u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b \u00b6 std::cerr \u3067\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u306b\u5bfe\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002 #include <iostream> std :: cerr << \"\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\" ; \u6a19\u6e96\u5165\u529b \u00b6 std::cin \u3067\u6a19\u6e96\u5165\u529b\u306b\u5bfe\u3057\u3066\u5165\u529b\u3057\u307e\u3059\u3002 #include <iostream> #include <string> std :: cout << \"\u597d\u304d\u306a\u98df\u3079\u7269\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \" std :: string food ; std :: cin >> food ; std :: cout << \"\u597d\u304d\u306a\u98df\u3079\u7269\u306f \" << food << \" \u3067\u3059\u3002\" << std :: endl ; int \u306a\u3069\u306e\u6570\u5024\u578b\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u3067\u6570\u5024\u306e\u5165\u529b\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 \u307e\u305f\u3001\u8aad\u307f\u8fbc\u307f\u6210\u5426\u3092if\u6587\u3067\u5224\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 #include <iostream> int main () { int x = 0 ; std :: cout << \"\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \" ; if ( std :: cin >> x ) { std :: cout << \"\u5165\u529b\u3057\u305f\u6574\u6570\u306f \" << x << \" \u3067\u3059\u3002\" << std :: endl ; } else { std :: cout << \"\u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002\" << std :: endl ; } return 0 ; } # \u5b9f\u884c\u4f8b1 \u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: 3 \u5165\u529b\u3057\u305f\u6574\u6570\u306f 3 \u3067\u3059\u3002 # \u5b9f\u884c\u4f8b2 \u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \u30ab\u30ec\u30fc \u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002","title":"5.1. \u6a19\u6e96\u5165\u51fa\u529b"},{"location":"ch05-01-standard-inout/#_1","text":"C++ \u3067\u5165\u51fa\u529b\u3092\u6271\u3046\u5834\u5408\u306f <iostream> \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u6a19\u6e96\u5165\u51fa\u529b"},{"location":"ch05-01-standard-inout/#_2","text":"std::cout \u3067\u6a19\u6e96\u51fa\u529b\u306b\u5bfe\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002 #include <iostream> std :: cout << \"\u6a19\u6e96\u51fa\u529b\" ; Info std::endl \u3067\u6539\u884c\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 std :: cout << 1 + 2 << std :: endl ; std :: cout << 3 + 4 << std :: endl ; # \u51fa\u529b\u7d50\u679c 3 7","title":"\u6a19\u6e96\u51fa\u529b"},{"location":"ch05-01-standard-inout/#_3","text":"std::cerr \u3067\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u306b\u5bfe\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002 #include <iostream> std :: cerr << \"\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\" ;","title":"\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b"},{"location":"ch05-01-standard-inout/#_4","text":"std::cin \u3067\u6a19\u6e96\u5165\u529b\u306b\u5bfe\u3057\u3066\u5165\u529b\u3057\u307e\u3059\u3002 #include <iostream> #include <string> std :: cout << \"\u597d\u304d\u306a\u98df\u3079\u7269\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \" std :: string food ; std :: cin >> food ; std :: cout << \"\u597d\u304d\u306a\u98df\u3079\u7269\u306f \" << food << \" \u3067\u3059\u3002\" << std :: endl ; int \u306a\u3069\u306e\u6570\u5024\u578b\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u3067\u6570\u5024\u306e\u5165\u529b\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 \u307e\u305f\u3001\u8aad\u307f\u8fbc\u307f\u6210\u5426\u3092if\u6587\u3067\u5224\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 #include <iostream> int main () { int x = 0 ; std :: cout << \"\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \" ; if ( std :: cin >> x ) { std :: cout << \"\u5165\u529b\u3057\u305f\u6574\u6570\u306f \" << x << \" \u3067\u3059\u3002\" << std :: endl ; } else { std :: cout << \"\u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002\" << std :: endl ; } return 0 ; } # \u5b9f\u884c\u4f8b1 \u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: 3 \u5165\u529b\u3057\u305f\u6574\u6570\u306f 3 \u3067\u3059\u3002 # \u5b9f\u884c\u4f8b2 \u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \u30ab\u30ec\u30fc \u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002","title":"\u6a19\u6e96\u5165\u529b"},{"location":"ch06-01-memory-areas/","text":"\u30e1\u30e2\u30ea\u9818\u57df \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5229\u7528\u3059\u308b\u30e1\u30e2\u30ea\u306b\u306f\u69d8\u3005\u306a\u9818\u57df\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30b9\u30bf\u30c3\u30af\u3068\u30d2\u30fc\u30d7\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u30b9\u30bf\u30c3\u30af \u00b6 \u30b9\u30bf\u30c3\u30af\u306f\u30c7\u30fc\u30bf\u69cb\u9020\u4e0a\u3001\u30d2\u30fc\u30d7\u306b\u6bd4\u3079\u3066\u9ad8\u901f\u306b\u6271\u3048\u307e\u3059\u3002\u30b9\u30bf\u30c3\u30af\u3078\u306e\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u30fbOS\u304c\u81ea\u52d5\u7684\u306b\u884c\u3044\u307e\u3059\u3002 \u4ee3\u308f\u308a\u306b\u3001\u4f7f\u7528\u3067\u304d\u308b\u30b9\u30bf\u30c3\u30af\u306b\u306f\u9650\u308a\u304c\u3042\u308b\u306e\u3067\u3001\u5927\u304d\u306a\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u6271\u3046\u306e\u306b\u306f\u5411\u3044\u3066\u3044\u307e\u305b\u3093\u3002 \u307e\u305f\u3001\u30b9\u30bf\u30c3\u30af\u306e\u30b5\u30a4\u30ba\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30fb\u30ea\u30f3\u30af\u6642\u306b\u6c7a\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5b9f\u884c\u524d\u306b\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u671f\u9593\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u3082\u306e\u306b\u5229\u7528\u306f\u9650\u3089\u308c\u307e\u3059\u3002 void Function () { int x = 100 ; // \u30ed\u30fc\u30ab\u30eb\u5909\u6570x\u306f\u30b9\u30bf\u30c3\u30af\u306b\u78ba\u4fdd\u3055\u308c\u308b\u3002 int y = 200 ; // \u30ed\u30fc\u30ab\u30eb\u5909\u6570y\u306f\u30b9\u30bf\u30c3\u30af\u306b\u78ba\u4fdd\u3055\u308c\u308b\u3002 } // \u95a2\u6570\u306e\u7d42\u4e86\u3068\u3068\u3082\u306b\u5909\u6570 x, y \u306f\u30b9\u30bf\u30c3\u30af\u304b\u3089\u53d6\u308a\u9664\u304b\u308c\u308b\u3002 // \u30b9\u30bf\u30c3\u30af\u306fLIFO\uff08\u5f8c\u5165\u308c\u5148\u51fa\u3057\uff09\u5f62\u5f0f\u306e\u305f\u3081 y, x \u306e\u9806\u3067\u53d6\u308a\u9664\u304b\u308c\u308b\u3002 int main () { Function (); return 0 ; } \u30d2\u30fc\u30d7 \u00b6 \u30d2\u30fc\u30d7\u306e\u30b5\u30a4\u30ba\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u52d5\u7684\u306b\u5909\u5316\u3057\u307e\u3059\u3002\u30d2\u30fc\u30d7\u306f\u30b9\u30bf\u30c3\u30af\u306e\u3088\u3046\u306a\u5236\u9650\u304c\u306a\u304f\u81ea\u7531\u5ea6\u304c\u9ad8\u3044\u3067\u3059\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u671f\u9593\u304c\u660e\u78ba\u3067\u306a\u3044\u5834\u5408\u3084\u3001\u5b9f\u884c\u6642\u306b\u30b5\u30a4\u30ba\u304c\u78ba\u5b9a\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u306b\u3064\u3044\u3066\u306f\u30d2\u30fc\u30d7\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001 std::vector \u306f\u3001\u4fdd\u6301\u3059\u308b\u8981\u7d20\u3092\u30d2\u30fc\u30d7\u4e0a\u306b\u78ba\u4fdd\u3059\u308b\u3053\u3068\u3067\u3001\u8981\u7d20\u6570\u3092\u5b9f\u884c\u6642\u306b\u5909\u66f4\u3067\u304d\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002","title":"6.1. \u30e1\u30e2\u30ea\u9818\u57df"},{"location":"ch06-01-memory-areas/#_1","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5229\u7528\u3059\u308b\u30e1\u30e2\u30ea\u306b\u306f\u69d8\u3005\u306a\u9818\u57df\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30b9\u30bf\u30c3\u30af\u3068\u30d2\u30fc\u30d7\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002","title":"\u30e1\u30e2\u30ea\u9818\u57df"},{"location":"ch06-01-memory-areas/#_2","text":"\u30b9\u30bf\u30c3\u30af\u306f\u30c7\u30fc\u30bf\u69cb\u9020\u4e0a\u3001\u30d2\u30fc\u30d7\u306b\u6bd4\u3079\u3066\u9ad8\u901f\u306b\u6271\u3048\u307e\u3059\u3002\u30b9\u30bf\u30c3\u30af\u3078\u306e\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u30fbOS\u304c\u81ea\u52d5\u7684\u306b\u884c\u3044\u307e\u3059\u3002 \u4ee3\u308f\u308a\u306b\u3001\u4f7f\u7528\u3067\u304d\u308b\u30b9\u30bf\u30c3\u30af\u306b\u306f\u9650\u308a\u304c\u3042\u308b\u306e\u3067\u3001\u5927\u304d\u306a\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u6271\u3046\u306e\u306b\u306f\u5411\u3044\u3066\u3044\u307e\u305b\u3093\u3002 \u307e\u305f\u3001\u30b9\u30bf\u30c3\u30af\u306e\u30b5\u30a4\u30ba\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30fb\u30ea\u30f3\u30af\u6642\u306b\u6c7a\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5b9f\u884c\u524d\u306b\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u671f\u9593\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u3082\u306e\u306b\u5229\u7528\u306f\u9650\u3089\u308c\u307e\u3059\u3002 void Function () { int x = 100 ; // \u30ed\u30fc\u30ab\u30eb\u5909\u6570x\u306f\u30b9\u30bf\u30c3\u30af\u306b\u78ba\u4fdd\u3055\u308c\u308b\u3002 int y = 200 ; // \u30ed\u30fc\u30ab\u30eb\u5909\u6570y\u306f\u30b9\u30bf\u30c3\u30af\u306b\u78ba\u4fdd\u3055\u308c\u308b\u3002 } // \u95a2\u6570\u306e\u7d42\u4e86\u3068\u3068\u3082\u306b\u5909\u6570 x, y \u306f\u30b9\u30bf\u30c3\u30af\u304b\u3089\u53d6\u308a\u9664\u304b\u308c\u308b\u3002 // \u30b9\u30bf\u30c3\u30af\u306fLIFO\uff08\u5f8c\u5165\u308c\u5148\u51fa\u3057\uff09\u5f62\u5f0f\u306e\u305f\u3081 y, x \u306e\u9806\u3067\u53d6\u308a\u9664\u304b\u308c\u308b\u3002 int main () { Function (); return 0 ; }","title":"\u30b9\u30bf\u30c3\u30af"},{"location":"ch06-01-memory-areas/#_3","text":"\u30d2\u30fc\u30d7\u306e\u30b5\u30a4\u30ba\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u52d5\u7684\u306b\u5909\u5316\u3057\u307e\u3059\u3002\u30d2\u30fc\u30d7\u306f\u30b9\u30bf\u30c3\u30af\u306e\u3088\u3046\u306a\u5236\u9650\u304c\u306a\u304f\u81ea\u7531\u5ea6\u304c\u9ad8\u3044\u3067\u3059\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u671f\u9593\u304c\u660e\u78ba\u3067\u306a\u3044\u5834\u5408\u3084\u3001\u5b9f\u884c\u6642\u306b\u30b5\u30a4\u30ba\u304c\u78ba\u5b9a\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u306b\u3064\u3044\u3066\u306f\u30d2\u30fc\u30d7\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001 std::vector \u306f\u3001\u4fdd\u6301\u3059\u308b\u8981\u7d20\u3092\u30d2\u30fc\u30d7\u4e0a\u306b\u78ba\u4fdd\u3059\u308b\u3053\u3068\u3067\u3001\u8981\u7d20\u6570\u3092\u5b9f\u884c\u6642\u306b\u5909\u66f4\u3067\u304d\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u30d2\u30fc\u30d7"},{"location":"ch06-02-new-and-delete/","text":"new/delete \u00b6 new \u00b6 \u30d2\u30fc\u30d7\u306b\u30e1\u30e2\u30ea\u3092\u52d5\u7684\u306b\u78ba\u4fdd\u3059\u308b\u5834\u5408\u306f new \u6f14\u7b97\u5b50\u3092\u5229\u7528\u3057\u307e\u3059\u3002 int * p1 = new int ( 100 ); // p1 \u306f new \u3067\u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\u9818\u57df\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf int * p2 = new int [ 5 ]; // \u914d\u5217\u306e\u5834\u5408\u306f [] \u3092\u4ed8\u3051\u308b delete \u00b6 \u30d2\u30fc\u30d7\u306b\u52d5\u7684\u306b\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u3092\u958b\u653e\u3059\u308b\u5834\u5408\u306f delete \u6f14\u7b97\u5b50\u3092\u5229\u7528\u3057\u307e\u3059\u3002 int * p1 = new int ( 100 ); int * p2 = new int [ 5 ]; delete p1 ; // new \u306b\u3088\u3063\u3066\u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\u3092 delete \u3067\u89e3\u653e delete [] p2 ; // \u914d\u5217\u306e\u5834\u5408\u306f [] \u3092\u4ed8\u3051\u308b new \u3092\u5229\u7528\u3057\u3066\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u306e\u89e3\u653e\u3092\u5fd8\u308c\u308b\u3068\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306b\u306a\u308a\u307e\u3059\u3002 new \u3068 delete \u306f\u5fc5\u305a\u30bb\u30c3\u30c8\u3067\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002 void Function () { int * p = new int [ 100000 ]; // delete \u305b\u305a\u306b Function() \u304c\u7d42\u4e86\u3059\u308b\u3068\u2026 } // int[100000] \u5206\u306e\u30e1\u30e2\u30ea\u304c\u89e3\u653e\u3055\u308c\u306a\u3044\u307e\u307e\u306b\u306a\u308b\u3002","title":"6.2. new/delete"},{"location":"ch06-02-new-and-delete/#newdelete","text":"","title":"new/delete"},{"location":"ch06-02-new-and-delete/#new","text":"\u30d2\u30fc\u30d7\u306b\u30e1\u30e2\u30ea\u3092\u52d5\u7684\u306b\u78ba\u4fdd\u3059\u308b\u5834\u5408\u306f new \u6f14\u7b97\u5b50\u3092\u5229\u7528\u3057\u307e\u3059\u3002 int * p1 = new int ( 100 ); // p1 \u306f new \u3067\u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\u9818\u57df\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf int * p2 = new int [ 5 ]; // \u914d\u5217\u306e\u5834\u5408\u306f [] \u3092\u4ed8\u3051\u308b","title":"new"},{"location":"ch06-02-new-and-delete/#delete","text":"\u30d2\u30fc\u30d7\u306b\u52d5\u7684\u306b\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u3092\u958b\u653e\u3059\u308b\u5834\u5408\u306f delete \u6f14\u7b97\u5b50\u3092\u5229\u7528\u3057\u307e\u3059\u3002 int * p1 = new int ( 100 ); int * p2 = new int [ 5 ]; delete p1 ; // new \u306b\u3088\u3063\u3066\u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\u3092 delete \u3067\u89e3\u653e delete [] p2 ; // \u914d\u5217\u306e\u5834\u5408\u306f [] \u3092\u4ed8\u3051\u308b new \u3092\u5229\u7528\u3057\u3066\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u306e\u89e3\u653e\u3092\u5fd8\u308c\u308b\u3068\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306b\u306a\u308a\u307e\u3059\u3002 new \u3068 delete \u306f\u5fc5\u305a\u30bb\u30c3\u30c8\u3067\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002 void Function () { int * p = new int [ 100000 ]; // delete \u305b\u305a\u306b Function() \u304c\u7d42\u4e86\u3059\u308b\u3068\u2026 } // int[100000] \u5206\u306e\u30e1\u30e2\u30ea\u304c\u89e3\u653e\u3055\u308c\u306a\u3044\u307e\u307e\u306b\u306a\u308b\u3002","title":"delete"},{"location":"ch06-03-deep-and-shallow-copy/","text":"\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc \u00b6 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc \u00b6 C++ \u306e\u30b3\u30d4\u30fc\u306f\u57fa\u672c\u7684\u306b\u306f\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3067\u3059\u3002 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306f\u5b9f\u4f53\u3054\u3068\u30b3\u30d4\u30fc\u3055\u308c\u308b\u305f\u3081\u3001\u30b3\u30d4\u30fc\u3057\u305f\u5206\u306e\u30e1\u30e2\u30ea\u9818\u57df\u306e\u78ba\u4fdd\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u5834\u5408\u3001\u30b3\u30d4\u30fc\u5148\uff08or \u30b3\u30d4\u30fc\u5143\uff09\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7de8\u96c6\u3057\u3066\u3082\u3001\u4ed6\u65b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u5f71\u97ff\u3092\u53ca\u307c\u3057\u307e\u305b\u3093\u3002 int x = 100 ; int y = x ; // x \u3092 y \u3078\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\uff08\u56f31\uff09 y = 50 ; // y \u3092 50 \u306b\u66f8\u304d\u63db\u3048\u308b\uff08\u56f32\uff09 std :: cout << x << std :: endl ; // x \u306f100\u306e\u307e\u307e \u56f31 \u56f32 \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc \u00b6 \u30dd\u30a4\u30f3\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\u5834\u5408\u306f\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u3067\u306f\u30dd\u30a4\u30f3\u30bf\u306e\u5411\u304d\u5148\u3060\u3051\u304c\u30b3\u30d4\u30fc\u3055\u308c\u3001\u5b9f\u4f53\u306f\u30b3\u30d4\u30fc\u5143\u306e\u9818\u57df\u306e\u307e\u307e\u306a\u306e\u3067\u3001 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u3088\u3046\u306a\u30b3\u30d4\u30fc\u3057\u305f\u5206\u306e\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u306f\u8d77\u304d\u307e\u305b\u3093\u3002 \u53c2\u7167\u306e\u5834\u5408\u3082\u3001\u30dd\u30a4\u30f3\u30bf\u3068\u540c\u69d8\u306b\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 int * x = new int ( 100 ); int * y = x ; // x \u3092 y \u3078\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\uff08\u56f33\uff09 * y = 50 ; // y \u304c\u6307\u3059\u5148\u306e\u5024\u3092 50 \u306b\u66f8\u304d\u63db\u3048\u308b\uff08\u56f34\uff09 std :: cout << * x << std :: endl ; // x \u304c\u6307\u3059\u5148\u306e\u5024\u3082 50 \u306b\u306a\u308b \u56f33 \u56f34","title":"6.3. \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc"},{"location":"ch06-03-deep-and-shallow-copy/#_1","text":"","title":"\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc"},{"location":"ch06-03-deep-and-shallow-copy/#_2","text":"C++ \u306e\u30b3\u30d4\u30fc\u306f\u57fa\u672c\u7684\u306b\u306f\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3067\u3059\u3002 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306f\u5b9f\u4f53\u3054\u3068\u30b3\u30d4\u30fc\u3055\u308c\u308b\u305f\u3081\u3001\u30b3\u30d4\u30fc\u3057\u305f\u5206\u306e\u30e1\u30e2\u30ea\u9818\u57df\u306e\u78ba\u4fdd\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u5834\u5408\u3001\u30b3\u30d4\u30fc\u5148\uff08or \u30b3\u30d4\u30fc\u5143\uff09\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7de8\u96c6\u3057\u3066\u3082\u3001\u4ed6\u65b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u5f71\u97ff\u3092\u53ca\u307c\u3057\u307e\u305b\u3093\u3002 int x = 100 ; int y = x ; // x \u3092 y \u3078\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\uff08\u56f31\uff09 y = 50 ; // y \u3092 50 \u306b\u66f8\u304d\u63db\u3048\u308b\uff08\u56f32\uff09 std :: cout << x << std :: endl ; // x \u306f100\u306e\u307e\u307e \u56f31 \u56f32","title":"\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc"},{"location":"ch06-03-deep-and-shallow-copy/#_3","text":"\u30dd\u30a4\u30f3\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\u5834\u5408\u306f\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u3067\u306f\u30dd\u30a4\u30f3\u30bf\u306e\u5411\u304d\u5148\u3060\u3051\u304c\u30b3\u30d4\u30fc\u3055\u308c\u3001\u5b9f\u4f53\u306f\u30b3\u30d4\u30fc\u5143\u306e\u9818\u57df\u306e\u307e\u307e\u306a\u306e\u3067\u3001 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u3088\u3046\u306a\u30b3\u30d4\u30fc\u3057\u305f\u5206\u306e\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u306f\u8d77\u304d\u307e\u305b\u3093\u3002 \u53c2\u7167\u306e\u5834\u5408\u3082\u3001\u30dd\u30a4\u30f3\u30bf\u3068\u540c\u69d8\u306b\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 int * x = new int ( 100 ); int * y = x ; // x \u3092 y \u3078\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\uff08\u56f33\uff09 * y = 50 ; // y \u304c\u6307\u3059\u5148\u306e\u5024\u3092 50 \u306b\u66f8\u304d\u63db\u3048\u308b\uff08\u56f34\uff09 std :: cout << * x << std :: endl ; // x \u304c\u6307\u3059\u5148\u306e\u5024\u3082 50 \u306b\u306a\u308b \u56f33 \u56f34","title":"\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc"},{"location":"ch06-04-move-semantics/","text":"\u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9 \u00b6 \u30b3\u30d4\u30fc\u3068\u30e0\u30fc\u30d6 \u00b6 std :: vector < int > x ( 1000000 ); std :: vector < int > y = x ; // \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u3053\u306e\u4f8b\u306e\u5834\u5408\u3001 y \u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b x \u3068\u540c\u7a0b\u5ea6\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u78ba\u4fdd\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u30b3\u30b9\u30c8\u306e\u9762\u3067\u306f\u304b\u306a\u308a\u306e\u7121\u99c4\u304c\u3042\u308a\u307e\u3059\u3002 std :: vector < int >* x = new std :: vector < int > ( 1000000 ); std :: vector < int >* y = x ; // \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc x = nullptr ; // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u3053\u306e\u4f8b\u3067\u306f x \u3092 y \u306b\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u3057\u305f\u5f8c\u306b\u3001 x \u306b nullptr \u3092\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u304c\u30e0\u30fc\u30d6\u306e\u6839\u5e95\u306b\u3042\u308b\u8003\u3048\u65b9\u3067\u3001 \u30dd\u30a4\u30f3\u30bf\u306e\u4ed8\u3051\u66ff\u3048\u3060\u3051\u3067\u3001\u3042\u305f\u304b\u3082 x \u304c y \u306b\u79fb\u52d5\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u6319\u52d5\u3092\u5b9f\u73fe\u51fa\u6765\u3066\u3044\u308b\u305f\u3081\u3001 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u3068\u304d\u3088\u308a\u3082\u30b3\u30b9\u30c8\u306e\u9762\u3067\u6709\u5229\u3067\u3059\u3002 \u3057\u304b\u3057\u3001\u30dd\u30a4\u30f3\u30bf\u306e\u64cd\u4f5c\u3092\u4f34\u3046\u5b9f\u88c5\u306b\u306a\u308b\u305f\u3081\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3063\u3066\u5b9f\u88c5\u3057\u306a\u3044\u3068\u3001 \u30e0\u30fc\u30d6\u306e\u4ed5\u7d44\u307f\u304c\u5b9f\u73fe\u3067\u304d\u306a\u304f\u306a\u308b\u3068\u3044\u3046\u30ea\u30b9\u30af\u3082\u5b58\u5728\u3057\u307e\u3059\u3002 \u305d\u3053\u3067\u3001 C++11\u304b\u3089\u306f\u30e0\u30fc\u30d6\u306e\u8003\u3048\u65b9\u3092\u30c6\u30af\u30cb\u30c3\u30af\u3068\u3057\u3066\u3067\u306f\u7121\u304f\u3001\u8a00\u8a9e\u4ed5\u69d8\u3068\u3057\u3066\u5b9f\u73fe\u3059\u308b\u4ed5\u7d44\u307f\u304c\u53d6\u308a\u5165\u308c\u3089\u308c\u307e\u3057\u305f\u3002 \u53f3\u8fba\u5024\u3068\u5de6\u8fba\u5024 \u00b6 \u5de6\u8fba\u5024: \u57fa\u672c\u7684\u306b\u305d\u306e\u30b9\u30b3\u30fc\u30d7\u306e\u9593\u751f\u304d\u7d9a\u3051\u308b\u540d\u524d\u4ed8\u304d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u53f3\u8fba\u5024: \u30ea\u30c6\u30e9\u30eb\u3084\u95a2\u6570\u304c\u8fd4\u3059\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3088\u3046\u306a\u305d\u306e\u77ac\u9593\u306b\u7834\u68c4\u3055\u308c\u3066\u4e0d\u8981\u306b\u306a\u308b\u3082\u306e int x = 300 ; // x \u306f\u5de6\u8fba\u5024\u3002300 \u306e\u3088\u3046\u306a\u30ea\u30c6\u30e9\u30eb\u306f\u53f3\u8fba\u5024\u3002 int y = function (); // y \u306f\u5de6\u8fba\u5024\u3002\u95a2\u6570 function \u304c\u8fd4\u3059\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u53f3\u8fba\u5024\u3002 int z = x ; // z \u3068 x \u306f\u5de6\u8fba\u5024\u3002 \u53f3\u8fba\u5024\u306f\u5de6\u8fba\u5024\u3078\u683c\u7d0d\u3057\u305f\u3089\u5fc5\u8981\u7121\u304f\u306a\u308b\u306e\u3067\u3001\u53f3\u8fba\u5024\u306b\u306f\u30e0\u30fc\u30d6\u306e\u8003\u3048\u65b9\u304c\u9069\u7528\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002 C++11 \u4ee5\u964d\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3053\u306e\u8003\u3048\u65b9\u3092\u8a8d\u8b58\u3057\u3001\u30e0\u30fc\u30d6\u3092\u5b9f\u73fe\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 std::move \u00b6 \u6b21\u306e\u4f8b\u3067\u306f\u3001 x \u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u304b\u3089\u3057\u3066\u307f\u308b\u3068\u5de6\u8fba\u5024\u306a\u306e\u3067\u3001 y \u3078\u306e\u4ee3\u5165\u6642\u306b\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3055\u308c\u307e\u3059\u3002 std :: vector < int > x ( 1000000 ); std :: vector < int > y = x ; // y \u3068 x \u306f\u5de6\u8fba\u5024 // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u305d\u3053\u3067\u3001\u5de6\u8fba\u5024\u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b std::move \u3092\u4f7f\u3044\u307e\u3059\u3002 x \u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3067\u306f\u306a\u304f\u30e0\u30fc\u30d6\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 std :: vector < int > x ( 1000000 ); std :: vector < int > y = std :: move ( x ); // std::move \u3067 x \u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8 // \u4ee5\u964d\u3001x\u306f\u5229\u7528\u3057\u306a\u3044","title":"6.4. \u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9"},{"location":"ch06-04-move-semantics/#_1","text":"","title":"\u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9"},{"location":"ch06-04-move-semantics/#_2","text":"std :: vector < int > x ( 1000000 ); std :: vector < int > y = x ; // \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u3053\u306e\u4f8b\u306e\u5834\u5408\u3001 y \u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b x \u3068\u540c\u7a0b\u5ea6\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u78ba\u4fdd\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u30b3\u30b9\u30c8\u306e\u9762\u3067\u306f\u304b\u306a\u308a\u306e\u7121\u99c4\u304c\u3042\u308a\u307e\u3059\u3002 std :: vector < int >* x = new std :: vector < int > ( 1000000 ); std :: vector < int >* y = x ; // \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc x = nullptr ; // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u3053\u306e\u4f8b\u3067\u306f x \u3092 y \u306b\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u3057\u305f\u5f8c\u306b\u3001 x \u306b nullptr \u3092\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u304c\u30e0\u30fc\u30d6\u306e\u6839\u5e95\u306b\u3042\u308b\u8003\u3048\u65b9\u3067\u3001 \u30dd\u30a4\u30f3\u30bf\u306e\u4ed8\u3051\u66ff\u3048\u3060\u3051\u3067\u3001\u3042\u305f\u304b\u3082 x \u304c y \u306b\u79fb\u52d5\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u6319\u52d5\u3092\u5b9f\u73fe\u51fa\u6765\u3066\u3044\u308b\u305f\u3081\u3001 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u3068\u304d\u3088\u308a\u3082\u30b3\u30b9\u30c8\u306e\u9762\u3067\u6709\u5229\u3067\u3059\u3002 \u3057\u304b\u3057\u3001\u30dd\u30a4\u30f3\u30bf\u306e\u64cd\u4f5c\u3092\u4f34\u3046\u5b9f\u88c5\u306b\u306a\u308b\u305f\u3081\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3063\u3066\u5b9f\u88c5\u3057\u306a\u3044\u3068\u3001 \u30e0\u30fc\u30d6\u306e\u4ed5\u7d44\u307f\u304c\u5b9f\u73fe\u3067\u304d\u306a\u304f\u306a\u308b\u3068\u3044\u3046\u30ea\u30b9\u30af\u3082\u5b58\u5728\u3057\u307e\u3059\u3002 \u305d\u3053\u3067\u3001 C++11\u304b\u3089\u306f\u30e0\u30fc\u30d6\u306e\u8003\u3048\u65b9\u3092\u30c6\u30af\u30cb\u30c3\u30af\u3068\u3057\u3066\u3067\u306f\u7121\u304f\u3001\u8a00\u8a9e\u4ed5\u69d8\u3068\u3057\u3066\u5b9f\u73fe\u3059\u308b\u4ed5\u7d44\u307f\u304c\u53d6\u308a\u5165\u308c\u3089\u308c\u307e\u3057\u305f\u3002","title":"\u30b3\u30d4\u30fc\u3068\u30e0\u30fc\u30d6"},{"location":"ch06-04-move-semantics/#_3","text":"\u5de6\u8fba\u5024: \u57fa\u672c\u7684\u306b\u305d\u306e\u30b9\u30b3\u30fc\u30d7\u306e\u9593\u751f\u304d\u7d9a\u3051\u308b\u540d\u524d\u4ed8\u304d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u53f3\u8fba\u5024: \u30ea\u30c6\u30e9\u30eb\u3084\u95a2\u6570\u304c\u8fd4\u3059\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3088\u3046\u306a\u305d\u306e\u77ac\u9593\u306b\u7834\u68c4\u3055\u308c\u3066\u4e0d\u8981\u306b\u306a\u308b\u3082\u306e int x = 300 ; // x \u306f\u5de6\u8fba\u5024\u3002300 \u306e\u3088\u3046\u306a\u30ea\u30c6\u30e9\u30eb\u306f\u53f3\u8fba\u5024\u3002 int y = function (); // y \u306f\u5de6\u8fba\u5024\u3002\u95a2\u6570 function \u304c\u8fd4\u3059\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u53f3\u8fba\u5024\u3002 int z = x ; // z \u3068 x \u306f\u5de6\u8fba\u5024\u3002 \u53f3\u8fba\u5024\u306f\u5de6\u8fba\u5024\u3078\u683c\u7d0d\u3057\u305f\u3089\u5fc5\u8981\u7121\u304f\u306a\u308b\u306e\u3067\u3001\u53f3\u8fba\u5024\u306b\u306f\u30e0\u30fc\u30d6\u306e\u8003\u3048\u65b9\u304c\u9069\u7528\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002 C++11 \u4ee5\u964d\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3053\u306e\u8003\u3048\u65b9\u3092\u8a8d\u8b58\u3057\u3001\u30e0\u30fc\u30d6\u3092\u5b9f\u73fe\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002","title":"\u53f3\u8fba\u5024\u3068\u5de6\u8fba\u5024"},{"location":"ch06-04-move-semantics/#stdmove","text":"\u6b21\u306e\u4f8b\u3067\u306f\u3001 x \u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u304b\u3089\u3057\u3066\u307f\u308b\u3068\u5de6\u8fba\u5024\u306a\u306e\u3067\u3001 y \u3078\u306e\u4ee3\u5165\u6642\u306b\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3055\u308c\u307e\u3059\u3002 std :: vector < int > x ( 1000000 ); std :: vector < int > y = x ; // y \u3068 x \u306f\u5de6\u8fba\u5024 // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u305d\u3053\u3067\u3001\u5de6\u8fba\u5024\u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b std::move \u3092\u4f7f\u3044\u307e\u3059\u3002 x \u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3067\u306f\u306a\u304f\u30e0\u30fc\u30d6\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 std :: vector < int > x ( 1000000 ); std :: vector < int > y = std :: move ( x ); // std::move \u3067 x \u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8 // \u4ee5\u964d\u3001x\u306f\u5229\u7528\u3057\u306a\u3044","title":"std::move"},{"location":"ch06-05-smart-pointers/","text":"\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf \u00b6 \u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29 \u00b6 \u30dd\u30a4\u30f3\u30bf\u306f\u30b3\u30d4\u30fc\u53ef\u80fd\u306a\u305f\u3081\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5148\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 int main () { int * a = new int ( 100 ); int * b = a ; // b \u304b\u3089\u3082 a \u3068\u540c\u3058\u30ea\u30bd\u30fc\u30b9\u3092\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002 // a \u3068 b \u306e\u3069\u3061\u3089\u3092 delete \u3059\u308b\u3079\u304d\u304b\uff1f return 0 ; } \u52d5\u7684\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u3092\u6271\u3046\u5834\u5408\u3001 \u8aa4\u3063\u3066 delete \u3092\u5fd8\u308c\u305f\u308a\u3001\u540c\u3058\u30ea\u30bd\u30fc\u30b9\u3092\u8907\u6570\u56de delete \u3057\u305f\u308a\u3059\u308b\u3053\u3068\u3092\u9632\u3050\u305f\u3081\u306b\u3001 \u3069\u306e\u5909\u6570\u304c\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\uff08\u30ea\u30bd\u30fc\u30b9\u3092\u53c2\u7167\u3059\u308b\u6a29\u5229\u3068\u958b\u653e\u3059\u308b\u6a29\u5229\uff09\u3092\u6301\u3064\u306e\u304b\u3092\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3063\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u30dd\u30a4\u30f3\u30bf\u3092\u6271\u3046\u4e0a\u3067\u306e\u5371\u967a\u6027\u3084\u8ca0\u62c5\u3092\u4e0b\u3052\u308b\u305f\u3081\u306b\u3001 C++ \u3067\u306f\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3068\u3044\u3046\u4ed5\u7d44\u307f\u304c\u5b58\u5728\u3057\u307e\u3059\u3002 \u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306f <memory> \u30d8\u30c3\u30c0\u306b\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 std::shared_ptr \u00b6 std::shared_ptr \u306f\u52d5\u7684\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\u3092\u5171\u6709\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002 \u5185\u90e8\u3067\u6240\u6709\u6a29\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e00\u89a7\u3092\u7ba1\u7406\u3057\u3001\u6240\u6709\u8005\u304c\u3044\u306a\u304f\u306a\u3063\u305f\u6642\u306b\u81ea\u52d5\u7684\u306b delete \u3059\u308b\u4ed5\u7d44\u307f\u3092\u6709\u3057\u3066\u3044\u307e\u3059\u3002 std::shared_ptr \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001 std::make_shared \u3092\u5229\u7528\u3057\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: shared_ptr < int > x = std :: make_shared < int > ( 100 ); // int* x = new int(100); \u306e\u4ee3\u308f\u308a // \u6240\u6709\u8005\u306f1\u4eba\u3002 { std :: shared_ptr < int > y = x ; // \u901a\u5e38\u306e\u30dd\u30a4\u30f3\u30bf\u540c\u69d8\u3001\u30b3\u30d4\u30fc\u3059\u308b\u3053\u3068\u3067\u6240\u6709\u6a29\u304c\u5171\u6709\u3055\u308c\u308b // \u6240\u6709\u8005\u304c2\u4eba\u306b\u5897\u3048\u308b\u3002 std :: cout << * y << std :: endl ; } // y \u304c\u7834\u68c4\u3055\u308c\u3066\u6240\u6709\u8005\u304c1\u4eba\u306b\u306a\u308b\u3002 std :: cout << * x << std :: endl ; return 0 ; } // \u6240\u6709\u8005\u304c0\u4eba\u306b\u306a\u308b\u306e\u3067\u3001 x \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b delete \u304c\u884c\u308f\u308c\u308b\u3002 std::weak_ptr \u00b6 std::shared_ptr \u306e\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\u3092\u6301\u3064\u3053\u3068\u306a\u304f\u3001 \u305d\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u76e3\u8996\u3059\u308b\uff08\u5f31\u53c2\u7167\uff09\u3053\u3068\u304c\u51fa\u6765\u308b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3068\u3057\u3066 std::weak_ptr \u304c\u3042\u308a\u307e\u3059\u3002 lock() \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u76e3\u8996\u3057\u3066\u3044\u308b std::shared_ptr \u306e\u30ea\u30bd\u30fc\u30b9\u304c\u6709\u52b9\u306a\u5834\u5408\u3001 \u76e3\u8996\u5148\u3068\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3059\u308b std::shared_ptr \u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: shared_ptr < int > sp = std :: make_shared < int > ( 246 ); std :: weak_ptr < int > wp = sp ; // sp \u3092\u76e3\u8996\u5bfe\u8c61\u3068\u3057\u3066 wp \u306b\u767b\u9332\u3059\u308b std :: shared_ptr < int > sp2 = wp . lock (); // \u6709\u52b9\u306a\u5834\u5408\u306f sp \u3068\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3059\u308b sp2 \u304c\u4f5c\u3089\u308c\u308b if ( sp2 ) { std :: cout << * sp2 << std :: endl ; } else { std :: cout << \"\u30ea\u30bd\u30fc\u30b9\u306f\u89e3\u653e\u6e08\u307f\" << std :: endl ; } return 0 ; } std::unique_ptr \u00b6 std::unique_ptr \u306f\u3001 std::shared_ptr \u3068\u9055\u3044\u3001\u30b3\u30d4\u30fc\u304c\u51fa\u6765\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081\u3001\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u8005\u304c\u5e38\u306b1\u4eba\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: unique_ptr < int > x ( new int ( 100 )); // std::unique_ptr<int> y = x; // \u30b3\u30d4\u30fc\u51fa\u6765\u306a\u3044\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3002 std :: cout << * x << std :: endl ; return 0 ; } // x \u304c\u6240\u6709\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u304c\u89e3\u653e\u3055\u308c\u308b\u3002 \u6240\u6709\u6a29\u306e\u5171\u6709\u306f\u3067\u304d\u307e\u305b\u3093\u304c\u3001 std::move \u3092\u4f7f\u3046\u3053\u3068\u3067\u6240\u6709\u6a29\u306e\u79fb\u52d5\u306f\u51fa\u6765\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: unique_ptr < int > x ( new int ( 100 )); std :: unique_ptr < int > y ( std :: move ( x )); // \u30e0\u30fc\u30d6\u306f\u51fa\u6765\u308b\u305f\u3081\u3001\u6240\u6709\u6a29\u306e\u79fb\u52d5\u306f\u53ef\u80fd\u3002 // \u6240\u6709\u6a29\u3092\u79fb\u52d5\u3057\u305f\u305f\u3081\u3001x \u306f\u4f55\u3082\u6240\u6709\u3057\u3066\u3044\u306a\u3044\u3002 std :: cout << * y << std :: endl ; return 0 ; } // y \u304c\u6240\u6709\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u304c\u89e3\u653e\u3055\u308c\u308b\u3002 std::auto_ptr \u00b6 std::auto_ptr \u306f C++11 \u3067\u306f\u975e\u63a8\u5968\u3068\u306a\u3063\u3066\u304a\u308a C++17 \u3067\u306f\u524a\u9664\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u8a73\u7d30\u306f std::auto_ptr - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"6.5. \u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf"},{"location":"ch06-05-smart-pointers/#_1","text":"","title":"\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf"},{"location":"ch06-05-smart-pointers/#_2","text":"\u30dd\u30a4\u30f3\u30bf\u306f\u30b3\u30d4\u30fc\u53ef\u80fd\u306a\u305f\u3081\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5148\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 int main () { int * a = new int ( 100 ); int * b = a ; // b \u304b\u3089\u3082 a \u3068\u540c\u3058\u30ea\u30bd\u30fc\u30b9\u3092\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002 // a \u3068 b \u306e\u3069\u3061\u3089\u3092 delete \u3059\u308b\u3079\u304d\u304b\uff1f return 0 ; } \u52d5\u7684\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u3092\u6271\u3046\u5834\u5408\u3001 \u8aa4\u3063\u3066 delete \u3092\u5fd8\u308c\u305f\u308a\u3001\u540c\u3058\u30ea\u30bd\u30fc\u30b9\u3092\u8907\u6570\u56de delete \u3057\u305f\u308a\u3059\u308b\u3053\u3068\u3092\u9632\u3050\u305f\u3081\u306b\u3001 \u3069\u306e\u5909\u6570\u304c\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\uff08\u30ea\u30bd\u30fc\u30b9\u3092\u53c2\u7167\u3059\u308b\u6a29\u5229\u3068\u958b\u653e\u3059\u308b\u6a29\u5229\uff09\u3092\u6301\u3064\u306e\u304b\u3092\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3063\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u30dd\u30a4\u30f3\u30bf\u3092\u6271\u3046\u4e0a\u3067\u306e\u5371\u967a\u6027\u3084\u8ca0\u62c5\u3092\u4e0b\u3052\u308b\u305f\u3081\u306b\u3001 C++ \u3067\u306f\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3068\u3044\u3046\u4ed5\u7d44\u307f\u304c\u5b58\u5728\u3057\u307e\u3059\u3002 \u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306f <memory> \u30d8\u30c3\u30c0\u306b\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29"},{"location":"ch06-05-smart-pointers/#stdshared_ptr","text":"std::shared_ptr \u306f\u52d5\u7684\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\u3092\u5171\u6709\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002 \u5185\u90e8\u3067\u6240\u6709\u6a29\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e00\u89a7\u3092\u7ba1\u7406\u3057\u3001\u6240\u6709\u8005\u304c\u3044\u306a\u304f\u306a\u3063\u305f\u6642\u306b\u81ea\u52d5\u7684\u306b delete \u3059\u308b\u4ed5\u7d44\u307f\u3092\u6709\u3057\u3066\u3044\u307e\u3059\u3002 std::shared_ptr \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001 std::make_shared \u3092\u5229\u7528\u3057\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: shared_ptr < int > x = std :: make_shared < int > ( 100 ); // int* x = new int(100); \u306e\u4ee3\u308f\u308a // \u6240\u6709\u8005\u306f1\u4eba\u3002 { std :: shared_ptr < int > y = x ; // \u901a\u5e38\u306e\u30dd\u30a4\u30f3\u30bf\u540c\u69d8\u3001\u30b3\u30d4\u30fc\u3059\u308b\u3053\u3068\u3067\u6240\u6709\u6a29\u304c\u5171\u6709\u3055\u308c\u308b // \u6240\u6709\u8005\u304c2\u4eba\u306b\u5897\u3048\u308b\u3002 std :: cout << * y << std :: endl ; } // y \u304c\u7834\u68c4\u3055\u308c\u3066\u6240\u6709\u8005\u304c1\u4eba\u306b\u306a\u308b\u3002 std :: cout << * x << std :: endl ; return 0 ; } // \u6240\u6709\u8005\u304c0\u4eba\u306b\u306a\u308b\u306e\u3067\u3001 x \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b delete \u304c\u884c\u308f\u308c\u308b\u3002","title":"std::shared_ptr"},{"location":"ch06-05-smart-pointers/#stdweak_ptr","text":"std::shared_ptr \u306e\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\u3092\u6301\u3064\u3053\u3068\u306a\u304f\u3001 \u305d\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u76e3\u8996\u3059\u308b\uff08\u5f31\u53c2\u7167\uff09\u3053\u3068\u304c\u51fa\u6765\u308b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3068\u3057\u3066 std::weak_ptr \u304c\u3042\u308a\u307e\u3059\u3002 lock() \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u76e3\u8996\u3057\u3066\u3044\u308b std::shared_ptr \u306e\u30ea\u30bd\u30fc\u30b9\u304c\u6709\u52b9\u306a\u5834\u5408\u3001 \u76e3\u8996\u5148\u3068\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3059\u308b std::shared_ptr \u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: shared_ptr < int > sp = std :: make_shared < int > ( 246 ); std :: weak_ptr < int > wp = sp ; // sp \u3092\u76e3\u8996\u5bfe\u8c61\u3068\u3057\u3066 wp \u306b\u767b\u9332\u3059\u308b std :: shared_ptr < int > sp2 = wp . lock (); // \u6709\u52b9\u306a\u5834\u5408\u306f sp \u3068\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3059\u308b sp2 \u304c\u4f5c\u3089\u308c\u308b if ( sp2 ) { std :: cout << * sp2 << std :: endl ; } else { std :: cout << \"\u30ea\u30bd\u30fc\u30b9\u306f\u89e3\u653e\u6e08\u307f\" << std :: endl ; } return 0 ; }","title":"std::weak_ptr"},{"location":"ch06-05-smart-pointers/#stdunique_ptr","text":"std::unique_ptr \u306f\u3001 std::shared_ptr \u3068\u9055\u3044\u3001\u30b3\u30d4\u30fc\u304c\u51fa\u6765\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081\u3001\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u8005\u304c\u5e38\u306b1\u4eba\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: unique_ptr < int > x ( new int ( 100 )); // std::unique_ptr<int> y = x; // \u30b3\u30d4\u30fc\u51fa\u6765\u306a\u3044\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3002 std :: cout << * x << std :: endl ; return 0 ; } // x \u304c\u6240\u6709\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u304c\u89e3\u653e\u3055\u308c\u308b\u3002 \u6240\u6709\u6a29\u306e\u5171\u6709\u306f\u3067\u304d\u307e\u305b\u3093\u304c\u3001 std::move \u3092\u4f7f\u3046\u3053\u3068\u3067\u6240\u6709\u6a29\u306e\u79fb\u52d5\u306f\u51fa\u6765\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: unique_ptr < int > x ( new int ( 100 )); std :: unique_ptr < int > y ( std :: move ( x )); // \u30e0\u30fc\u30d6\u306f\u51fa\u6765\u308b\u305f\u3081\u3001\u6240\u6709\u6a29\u306e\u79fb\u52d5\u306f\u53ef\u80fd\u3002 // \u6240\u6709\u6a29\u3092\u79fb\u52d5\u3057\u305f\u305f\u3081\u3001x \u306f\u4f55\u3082\u6240\u6709\u3057\u3066\u3044\u306a\u3044\u3002 std :: cout << * y << std :: endl ; return 0 ; } // y \u304c\u6240\u6709\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u304c\u89e3\u653e\u3055\u308c\u308b\u3002","title":"std::unique_ptr"},{"location":"ch06-05-smart-pointers/#stdauto_ptr","text":"std::auto_ptr \u306f C++11 \u3067\u306f\u975e\u63a8\u5968\u3068\u306a\u3063\u3066\u304a\u308a C++17 \u3067\u306f\u524a\u9664\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u8a73\u7d30\u306f std::auto_ptr - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"std::auto_ptr"},{"location":"ch07-01-member-varialbes/","text":"\u30e1\u30f3\u30d0\u5909\u6570 \u00b6 \u30af\u30e9\u30b9\u3068\u306f\u5909\u6570\u3068\u95a2\u6570\u3092\u96c6\u7d04\u3057\u305f\u578b\u3092\u3064\u304f\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u3002 \u30af\u30e9\u30b9\u304c\u6301\u3064\u5909\u6570\u3092\u30e1\u30f3\u30d0\u5909\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u306b int \u578b\u306e\u30e1\u30f3\u30d0\u5909\u6570 height \u3068 width \u3092\u6301\u305f\u305b\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int height_ ; int width_ ; }; \u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u306b\u306f . \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 Rectangle r ; r . height_ = 10 ; r . width_ = 20 ;","title":"7.1. \u30e1\u30f3\u30d0\u5909\u6570"},{"location":"ch07-01-member-varialbes/#_1","text":"\u30af\u30e9\u30b9\u3068\u306f\u5909\u6570\u3068\u95a2\u6570\u3092\u96c6\u7d04\u3057\u305f\u578b\u3092\u3064\u304f\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u3002 \u30af\u30e9\u30b9\u304c\u6301\u3064\u5909\u6570\u3092\u30e1\u30f3\u30d0\u5909\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u306b int \u578b\u306e\u30e1\u30f3\u30d0\u5909\u6570 height \u3068 width \u3092\u6301\u305f\u305b\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int height_ ; int width_ ; }; \u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u306b\u306f . \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 Rectangle r ; r . height_ = 10 ; r . width_ = 20 ;","title":"\u30e1\u30f3\u30d0\u5909\u6570"},{"location":"ch07-02-member-functions/","text":"\u30e1\u30f3\u30d0\u95a2\u6570 \u00b6 \u30af\u30e9\u30b9\u304c\u6301\u3064\u95a2\u6570\u3092\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u306b \u9762\u7a4d\u3092\u6c42\u3081\u308b\u30e1\u30f3\u30d0\u95a2\u6570 Area \u3092\u6301\u305f\u305b\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int Area () { return height_ * width_ ; } int height_ ; int width_ ; }; \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f . \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 Rectangle r ; r . height_ = 10 ; r . width_ = 20 ; r . Area (); \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9 \u00b6 \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int Area (); int height_ ; int width_ ; }; int Rectangle :: Area () { return height_ * width_ ; } \u3069\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u304b\u3092\u8868\u3059\u305f\u3081\u306b Rectangle:: \u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 const \u30e1\u30f3\u30d0\u95a2\u6570 \u00b6 \u5f15\u6570\u30ea\u30b9\u30c8\u306e\u3042\u3068\u306b const \u3092\u3064\u3051\u308b\u3053\u3068\u3067 const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u306a\u308a\u307e\u3059\u3002 class Rectangle { public : int Area () const ; }; const \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306f\u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 class Rectangle { public : int Area () const ; int height_ ; int width_ ; }; int Rectangle :: Area () const { height_ = 0 ; // \u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 return height_ * width_ ; } const \u30e1\u30f3\u30d0\u95a2\u6570\u306f\u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3057\u306a\u3044\u305f\u3081\u3001 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u3092\u5909\u5316\u3055\u305b\u305a\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u3044\u3046\u5236\u7d04\u3092\u6e80\u305f\u3059\u305f\u3081\u306b\u3001 const \u30e1\u30f3\u30d0\u95a2\u6570\u304b\u3089\u547c\u3073\u51fa\u305b\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u306f const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u9650\u5b9a\u3055\u308c\u307e\u3059\u3002","title":"7.2. \u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"ch07-02-member-functions/#_1","text":"\u30af\u30e9\u30b9\u304c\u6301\u3064\u95a2\u6570\u3092\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u306b \u9762\u7a4d\u3092\u6c42\u3081\u308b\u30e1\u30f3\u30d0\u95a2\u6570 Area \u3092\u6301\u305f\u305b\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int Area () { return height_ * width_ ; } int height_ ; int width_ ; }; \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f . \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 Rectangle r ; r . height_ = 10 ; r . width_ = 20 ; r . Area ();","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"ch07-02-member-functions/#_2","text":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int Area (); int height_ ; int width_ ; }; int Rectangle :: Area () { return height_ * width_ ; } \u3069\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u304b\u3092\u8868\u3059\u305f\u3081\u306b Rectangle:: \u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9"},{"location":"ch07-02-member-functions/#const","text":"\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u3042\u3068\u306b const \u3092\u3064\u3051\u308b\u3053\u3068\u3067 const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u306a\u308a\u307e\u3059\u3002 class Rectangle { public : int Area () const ; }; const \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306f\u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 class Rectangle { public : int Area () const ; int height_ ; int width_ ; }; int Rectangle :: Area () const { height_ = 0 ; // \u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 return height_ * width_ ; } const \u30e1\u30f3\u30d0\u95a2\u6570\u306f\u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3057\u306a\u3044\u305f\u3081\u3001 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u3092\u5909\u5316\u3055\u305b\u305a\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u3044\u3046\u5236\u7d04\u3092\u6e80\u305f\u3059\u305f\u3081\u306b\u3001 const \u30e1\u30f3\u30d0\u95a2\u6570\u304b\u3089\u547c\u3073\u51fa\u305b\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u306f const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u9650\u5b9a\u3055\u308c\u307e\u3059\u3002","title":"const \u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"ch07-03-inheritance/","text":"\u7d99\u627f \u00b6 \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0 (\u30e1\u30f3\u30d0\u5909\u6570\u3068\u30e1\u30f3\u30d0\u95a2\u6570) \u3092\u5f15\u304d\u7d99\u3044\u3067 \u65b0\u3057\u3044\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3092\u7d99\u627f\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066 \u6b63\u65b9\u5f62\u3092\u6271\u3046 Square \u30af\u30e9\u30b9\u3092\u4f5c\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <iostream> class Rectangle { public : int Area () const { return height_ * width_ ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } }; int main () { Square s ; s . SetSize ( 10 ); std :: cout << s . Area () << std :: endl ; return 0 ; } Square \u30af\u30e9\u30b9\u3067\u306f Rectangle \u30af\u30e9\u30b9\u306e\u5168\u30e1\u30f3\u30d0\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570 SetSize \u3067 Rectangle \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570 height_ \u3068 width_ \u3092\u53c2\u7167\u3057\u305f\u308a\u3001 \u30e1\u30f3\u30d0\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3067 s.Area \u3068\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u7d99\u627f\u3092\u884c\u3063\u305f\u5834\u5408\u3082\u30e1\u30f3\u30d0\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001 Square \u30af\u30e9\u30b9\u3067\u306f Rectangle \u30af\u30e9\u30b9\u306b\u306f\u306a\u3044\u30e1\u30f3\u30d0\u95a2\u6570 SetSize \u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u57fa\u5e95\u30af\u30e9\u30b9\u3068\u6d3e\u751f\u30af\u30e9\u30b9 \u00b6 \u7d99\u627f\u306e\u5143\u306b\u306a\u3063\u305f\u30af\u30e9\u30b9\u306e\u3053\u3068\u3092\u57fa\u5e95\u30af\u30e9\u30b9\u3001 \u7d99\u627f\u3057\u3066\u4f5c\u3063\u305f\u30af\u30e9\u30b9\u306e\u3053\u3068\u3092\u6d3e\u751f\u30af\u30e9\u30b9\u3068\u3044\u3044\u307e\u3059\u3002 Rectangle \u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066 Square \u30af\u30e9\u30b9\u3092\u4f5c\u308b\u5834\u5408\u3001 Rectangle \u30af\u30e9\u30b9\u304c\u57fa\u5e95\u30af\u30e9\u30b9\u3001 Square \u30af\u30e9\u30b9\u304c\u6d3e\u751f\u30af\u30e9\u30b9\u3068\u306a\u308a\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 \u00b6 \u30e1\u30f3\u30d0\u3092\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u306f\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u3088\u3063\u3066\u5236\u9650\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u306f\u6b21\u306e3\u3064\u304c\u3042\u308a\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 \u81ea\u30af\u30e9\u30b9 \u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9 \u305d\u306e\u4ed6 public protected private \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f private \u306b\u306a\u308a\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u306b\u5bfe\u3059\u308b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 \u00b6 private \u306b\u3059\u308b\u3068\u81ea\u30af\u30e9\u30b9\u5185\u3067\u306e\u307f\u30e1\u30f3\u30d0\u304c\u53c2\u7167\u3067\u304d\u307e\u3059\u3002 private_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } private : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 width_ = size ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 } }; int main () { Rectangle r ; r . height_ = 10 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 r . width_ = 20 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 Square s ; s . SetSize ( 10 ); return 0 ; } protected \u306b\u3059\u308b\u3068\u81ea\u30af\u30e9\u30b9\u5185\u306b\u52a0\u3048\u3001\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u5185\u3067\u3082\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 protected_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } protected : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u53c2\u7167\u53ef width_ = size ; // \u53c2\u7167\u53ef } }; int main () { Rectangle r ; r . height_ = 10 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 r . width_ = 20 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 Square s ; s . SetSize ( 10 ); return 0 ; } public \u306b\u3059\u308b\u3068\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u306e\u5236\u9650\u306f\u306a\u304f\u306a\u308a\u307e\u3059\u3002 public_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } public : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u53c2\u7167\u53ef width_ = size ; // \u53c2\u7167\u53ef } }; int main () { Rectangle r ; r . height_ = 10 ; // \u53c2\u7167\u53ef r . width_ = 20 ; // \u53c2\u7167\u53ef Square s ; s . SetSize ( 10 ); return 0 ; } \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u6b21\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u304c\u51fa\u73fe\u3059\u308b\u307e\u3067\u304c\u6709\u52b9\u7bc4\u56f2\u3068\u306a\u308a\u307e\u3059\u3002 \u307e\u305f\u3001\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u4f55\u5ea6\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 class AccessSpecifier { void Private1 (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u306f private public : void Public1 (); void Public2 (); public : // \u5bfe\u8c61\u3068\u306a\u308b\u30e1\u30f3\u30d0\u304c\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3057 private : void Private2 (); private : // \u30a2\u30af\u30bb\u30b9\u30ec\u30d9\u30eb\u306e\u5909\u5316\u304c\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3057 void Private3 (); }; \u8aad\u307f\u3065\u3089\u3044\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3092\u9632\u3050\u305f\u3081\u3001 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u3067\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u7d99\u627f\u306b\u5bfe\u3059\u308b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 \u00b6 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u306f\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u3088\u3063\u3066 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3092\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u3092\u3055\u3089\u306b\u5236\u9650\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f private \u306b\u306a\u308a\u307e\u3059\u3002 class Base {}; class Sub1 : public Base {}; // public \u7d99\u627f class Sub2 : protected Base {}; // protected \u7d99\u627f class Sub3 : private Base {}; // private \u7d99\u627f class Sub4 : Base {}; // private \u7d99\u627f (\u30c7\u30d5\u30a9\u30eb\u30c8) \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u5b9f\u88c5\u3092\u884c\u3046\u5834\u5408\u306b\u306f public \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u8a73\u7d30\u306f \u6d3e\u751f\u30af\u30e9\u30b9 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"7.3. \u7d99\u627f"},{"location":"ch07-03-inheritance/#_1","text":"\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0 (\u30e1\u30f3\u30d0\u5909\u6570\u3068\u30e1\u30f3\u30d0\u95a2\u6570) \u3092\u5f15\u304d\u7d99\u3044\u3067 \u65b0\u3057\u3044\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3092\u7d99\u627f\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066 \u6b63\u65b9\u5f62\u3092\u6271\u3046 Square \u30af\u30e9\u30b9\u3092\u4f5c\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <iostream> class Rectangle { public : int Area () const { return height_ * width_ ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } }; int main () { Square s ; s . SetSize ( 10 ); std :: cout << s . Area () << std :: endl ; return 0 ; } Square \u30af\u30e9\u30b9\u3067\u306f Rectangle \u30af\u30e9\u30b9\u306e\u5168\u30e1\u30f3\u30d0\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570 SetSize \u3067 Rectangle \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570 height_ \u3068 width_ \u3092\u53c2\u7167\u3057\u305f\u308a\u3001 \u30e1\u30f3\u30d0\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3067 s.Area \u3068\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u7d99\u627f\u3092\u884c\u3063\u305f\u5834\u5408\u3082\u30e1\u30f3\u30d0\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001 Square \u30af\u30e9\u30b9\u3067\u306f Rectangle \u30af\u30e9\u30b9\u306b\u306f\u306a\u3044\u30e1\u30f3\u30d0\u95a2\u6570 SetSize \u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u7d99\u627f"},{"location":"ch07-03-inheritance/#_2","text":"\u7d99\u627f\u306e\u5143\u306b\u306a\u3063\u305f\u30af\u30e9\u30b9\u306e\u3053\u3068\u3092\u57fa\u5e95\u30af\u30e9\u30b9\u3001 \u7d99\u627f\u3057\u3066\u4f5c\u3063\u305f\u30af\u30e9\u30b9\u306e\u3053\u3068\u3092\u6d3e\u751f\u30af\u30e9\u30b9\u3068\u3044\u3044\u307e\u3059\u3002 Rectangle \u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066 Square \u30af\u30e9\u30b9\u3092\u4f5c\u308b\u5834\u5408\u3001 Rectangle \u30af\u30e9\u30b9\u304c\u57fa\u5e95\u30af\u30e9\u30b9\u3001 Square \u30af\u30e9\u30b9\u304c\u6d3e\u751f\u30af\u30e9\u30b9\u3068\u306a\u308a\u307e\u3059\u3002","title":"\u57fa\u5e95\u30af\u30e9\u30b9\u3068\u6d3e\u751f\u30af\u30e9\u30b9"},{"location":"ch07-03-inheritance/#_3","text":"\u30e1\u30f3\u30d0\u3092\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u306f\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u3088\u3063\u3066\u5236\u9650\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u306f\u6b21\u306e3\u3064\u304c\u3042\u308a\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 \u81ea\u30af\u30e9\u30b9 \u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9 \u305d\u306e\u4ed6 public protected private \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f private \u306b\u306a\u308a\u307e\u3059\u3002","title":"\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50"},{"location":"ch07-03-inheritance/#_4","text":"private \u306b\u3059\u308b\u3068\u81ea\u30af\u30e9\u30b9\u5185\u3067\u306e\u307f\u30e1\u30f3\u30d0\u304c\u53c2\u7167\u3067\u304d\u307e\u3059\u3002 private_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } private : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 width_ = size ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 } }; int main () { Rectangle r ; r . height_ = 10 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 r . width_ = 20 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 Square s ; s . SetSize ( 10 ); return 0 ; } protected \u306b\u3059\u308b\u3068\u81ea\u30af\u30e9\u30b9\u5185\u306b\u52a0\u3048\u3001\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u5185\u3067\u3082\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 protected_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } protected : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u53c2\u7167\u53ef width_ = size ; // \u53c2\u7167\u53ef } }; int main () { Rectangle r ; r . height_ = 10 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 r . width_ = 20 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 Square s ; s . SetSize ( 10 ); return 0 ; } public \u306b\u3059\u308b\u3068\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u306e\u5236\u9650\u306f\u306a\u304f\u306a\u308a\u307e\u3059\u3002 public_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } public : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u53c2\u7167\u53ef width_ = size ; // \u53c2\u7167\u53ef } }; int main () { Rectangle r ; r . height_ = 10 ; // \u53c2\u7167\u53ef r . width_ = 20 ; // \u53c2\u7167\u53ef Square s ; s . SetSize ( 10 ); return 0 ; } \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u6b21\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u304c\u51fa\u73fe\u3059\u308b\u307e\u3067\u304c\u6709\u52b9\u7bc4\u56f2\u3068\u306a\u308a\u307e\u3059\u3002 \u307e\u305f\u3001\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u4f55\u5ea6\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 class AccessSpecifier { void Private1 (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u306f private public : void Public1 (); void Public2 (); public : // \u5bfe\u8c61\u3068\u306a\u308b\u30e1\u30f3\u30d0\u304c\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3057 private : void Private2 (); private : // \u30a2\u30af\u30bb\u30b9\u30ec\u30d9\u30eb\u306e\u5909\u5316\u304c\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3057 void Private3 (); }; \u8aad\u307f\u3065\u3089\u3044\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3092\u9632\u3050\u305f\u3081\u3001 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u3067\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002","title":"\u30e1\u30f3\u30d0\u306b\u5bfe\u3059\u308b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50"},{"location":"ch07-03-inheritance/#_5","text":"\u6d3e\u751f\u30af\u30e9\u30b9\u3067\u306f\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u3088\u3063\u3066 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3092\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u3092\u3055\u3089\u306b\u5236\u9650\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f private \u306b\u306a\u308a\u307e\u3059\u3002 class Base {}; class Sub1 : public Base {}; // public \u7d99\u627f class Sub2 : protected Base {}; // protected \u7d99\u627f class Sub3 : private Base {}; // private \u7d99\u627f class Sub4 : Base {}; // private \u7d99\u627f (\u30c7\u30d5\u30a9\u30eb\u30c8) \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u5b9f\u88c5\u3092\u884c\u3046\u5834\u5408\u306b\u306f public \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u8a73\u7d30\u306f \u6d3e\u751f\u30af\u30e9\u30b9 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u7d99\u627f\u306b\u5bfe\u3059\u308b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50"},{"location":"ch07-04-polymorphism/","text":"\u591a\u614b\u6027 \u00b6 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8 \u00b6 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u304b\u3089 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u578b\u5909\u63db\u3092\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u306b\u3088\u3063\u3066\u3001 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u307e\u305f\u306f\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 polymorphism_upcast.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> class Rectangle { public : int Area () const { return height_ * width_ ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } }; int main () { Square s ; s . SetSize ( 10 ); const Rectangle & r = s ; std :: cout << \"area = \" << r . Area () << std :: endl ; return 0 ; } \u3053\u306e\u4f8b\u3067\u306f Square \u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 s \u3092 Rectangle \u30af\u30e9\u30b9\u306e\u53c2\u7167 r \u3067\u6271\u3063\u3066\u3044\u307e\u3059\u3002 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u306f\u6697\u9ed9\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u660e\u793a\u7684\u306b\u578b\u5909\u63db\u3092\u884c\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u00b6 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u304b\u3089 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u578b\u5909\u63db\u3092\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u308f\u306a\u3044\u3067\u6e08\u3080\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 \u4eee\u60f3\u95a2\u6570\u3068\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9 \u00b6 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u6319\u52d5\u3092\u5909\u66f4\u3067\u304d\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4eee\u60f3\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u4eee\u60f3\u95a2\u6570\u306b\u3059\u308b\u306b\u306f\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b virtual \u3092\u3064\u3051\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u4eee\u60f3\u95a2\u6570\u306e\u6319\u52d5\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3068\u3044\u3044\u307e\u3059\u3002 \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u306b\u306f\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b override \u3092\u3064\u3051\u307e\u3059\u3002 polymorphism_override.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> class Rectangle { public : virtual void Describe () const { std :: cout << \"height = \" << height_ << std :: endl ; std :: cout << \"width = \" << width_ << std :: endl ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } void Describe () const override { std :: cout << \"size = \" << height_ << std :: endl ; } }; int main () { Square s ; s . SetSize ( 10 ); const Rectangle & r = s ; r . Describe (); return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 size = 10 \u3053\u306e\u4f8b\u3067\u306f\u30e1\u30f3\u30d0\u95a2\u6570 Describe \u304c\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001 Rectangle \u30af\u30e9\u30b9\u3067\u306f\u306a\u304f Square \u30af\u30e9\u30b9\u306e Describe \u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3068\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 \u00b6 \u5b9a\u7fa9\u3092\u3082\u305f\u306a\u3044\u4eee\u60f3\u95a2\u6570\u3092\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u306b\u3059\u308b\u306b\u306f\u4eee\u60f3\u95a2\u6570\u306b = 0 \u3092\u3064\u3051\u307e\u3059\u3002 class Polygon { public : virtual void Area () const = 0 ; }; \u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u304c\u3042\u308b\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 C++ \u306b\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u3064\u304f\u308b\u305f\u3081\u306e\u5c02\u7528\u306e\u8a18\u6cd5\u306f\u306a\u3044\u305f\u3081\u3001 \u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3059\u3079\u3066\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3067\u3042\u308b\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002 class Polygon { public : virtual int Area () const = 0 ; }; class Rectangle : public Polygon { public : int Area () const override { return height_ * width_ ; } int height_ ; int width_ ; };","title":"7.4. \u591a\u614b\u6027"},{"location":"ch07-04-polymorphism/#_1","text":"","title":"\u591a\u614b\u6027"},{"location":"ch07-04-polymorphism/#_2","text":"\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u304b\u3089 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u578b\u5909\u63db\u3092\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u306b\u3088\u3063\u3066\u3001 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u307e\u305f\u306f\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 polymorphism_upcast.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> class Rectangle { public : int Area () const { return height_ * width_ ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } }; int main () { Square s ; s . SetSize ( 10 ); const Rectangle & r = s ; std :: cout << \"area = \" << r . Area () << std :: endl ; return 0 ; } \u3053\u306e\u4f8b\u3067\u306f Square \u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 s \u3092 Rectangle \u30af\u30e9\u30b9\u306e\u53c2\u7167 r \u3067\u6271\u3063\u3066\u3044\u307e\u3059\u3002 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u306f\u6697\u9ed9\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u660e\u793a\u7684\u306b\u578b\u5909\u63db\u3092\u884c\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8"},{"location":"ch07-04-polymorphism/#_3","text":"\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u304b\u3089 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u578b\u5909\u63db\u3092\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u308f\u306a\u3044\u3067\u6e08\u3080\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002","title":"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8"},{"location":"ch07-04-polymorphism/#_4","text":"\u6d3e\u751f\u30af\u30e9\u30b9\u3067\u6319\u52d5\u3092\u5909\u66f4\u3067\u304d\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4eee\u60f3\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u4eee\u60f3\u95a2\u6570\u306b\u3059\u308b\u306b\u306f\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b virtual \u3092\u3064\u3051\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u4eee\u60f3\u95a2\u6570\u306e\u6319\u52d5\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3068\u3044\u3044\u307e\u3059\u3002 \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u306b\u306f\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b override \u3092\u3064\u3051\u307e\u3059\u3002 polymorphism_override.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> class Rectangle { public : virtual void Describe () const { std :: cout << \"height = \" << height_ << std :: endl ; std :: cout << \"width = \" << width_ << std :: endl ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } void Describe () const override { std :: cout << \"size = \" << height_ << std :: endl ; } }; int main () { Square s ; s . SetSize ( 10 ); const Rectangle & r = s ; r . Describe (); return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 size = 10 \u3053\u306e\u4f8b\u3067\u306f\u30e1\u30f3\u30d0\u95a2\u6570 Describe \u304c\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001 Rectangle \u30af\u30e9\u30b9\u3067\u306f\u306a\u304f Square \u30af\u30e9\u30b9\u306e Describe \u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002","title":"\u4eee\u60f3\u95a2\u6570\u3068\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9"},{"location":"ch07-04-polymorphism/#_5","text":"\u5b9a\u7fa9\u3092\u3082\u305f\u306a\u3044\u4eee\u60f3\u95a2\u6570\u3092\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u306b\u3059\u308b\u306b\u306f\u4eee\u60f3\u95a2\u6570\u306b = 0 \u3092\u3064\u3051\u307e\u3059\u3002 class Polygon { public : virtual void Area () const = 0 ; }; \u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u304c\u3042\u308b\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 C++ \u306b\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u3064\u304f\u308b\u305f\u3081\u306e\u5c02\u7528\u306e\u8a18\u6cd5\u306f\u306a\u3044\u305f\u3081\u3001 \u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3059\u3079\u3066\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3067\u3042\u308b\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002 class Polygon { public : virtual int Area () const = 0 ; }; class Rectangle : public Polygon { public : int Area () const override { return height_ * width_ ; } int height_ ; int width_ ; };","title":"\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3068\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9"},{"location":"ch07-05-constructors/","text":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30af\u30e9\u30b9\u540d\u3068\u540c\u3058\u540d\u524d\u3067\u623b\u308a\u5024\u304c\u306a\u3044\u95a2\u6570\u304c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ); int Area () const ; private : const int height_ ; const int width_ ; }; \u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle r ( 10 , 20 ); \u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316 \u00b6 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30e1\u30f3\u30d0\u5909\u6570\u3092\u521d\u671f\u5316\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; \u521d\u671f\u5316\u306f\u5024\u306e\u5909\u66f4\u3067\u306f\u306a\u3044\u305f\u3081\u3001 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3055\u308c\u305f\u5024\u304b\u3089 const \u30e1\u30f3\u30d0\u5909\u6570\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9 \u00b6 \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ); int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; Rectangle :: Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {} \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u5024\u30921\u3064\u3082\u53d7\u3051\u53d6\u3089\u306a\u3044\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Rectangle { public : Rectangle () : height_ ( 0 ), width_ ( 0 ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle r ; \u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c1\u3064\u3082\u306a\u3044\u5834\u5408\u306e\u307f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6697\u9ed9\u7684\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u305d\u306e\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3060\u3051\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Copyable { public : Copyable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Copyable ( const Copyable & c ); // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf }; \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Copyable c1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Copyable c2 ( c1 ); // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 const \u3067\u306f\u306a\u3044\u53c2\u7167\u3067\u3042\u3063\u3066\u3082\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u304c\u3001 \u30b3\u30d4\u30fc\u5143\u3092\u5909\u66f4\u305b\u305a\u306b\u30b3\u30d4\u30fc\u3092\u884c\u3046\u305f\u3081\u306b const \u306e\u53c2\u7167\u306b\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u306f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002 \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u305d\u306e\u30af\u30e9\u30b9\u306e\u53f3\u8fba\u5024\u53c2\u7167\u3060\u3051\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Movable { public : Movable ( Movable && m ); }; \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Movable m1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Movable m2 ( std :: move ( m1 )); // \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 \u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068 explicit \u00b6 \u5024\u30921\u3064\u3060\u3051\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3082\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3059\u3002 class Square { public : Square ( int size ) : size_ ( size ) {} int Area () const { return size_ * size_ ; } private : int size_ ; }; \u53d7\u3051\u53d6\u308b\u5024\u304c2\u500b\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Square s ( 10 ); \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u305f\u5834\u5408\u3001 int \u304b\u3089 Square \u3078\u306e\u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3067\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 Square s = 10 ; \u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3067\u4f7f\u7528\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f \u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b explicit \u3092\u3064\u3051\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3092\u610f\u56f3\u3057\u3066\u4f7f\u7528\u3059\u308b\u5834\u5408\u3092\u9664\u304d\u3001 \u53d7\u3051\u53d6\u308b\u5024\u304c1\u3064\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f explicit \u3092\u3064\u3051\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092 explicit \u306b\u3059\u308b\u3068 \u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u5024\u6e21\u3057\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u4e00\u822c\u7684\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f explicit \u306b\u306f\u3057\u307e\u305b\u3093\u3002 class Square { public : explicit Square ( int size ) : size_ ( size ) {} int Area () const { return size_ * size_ ; } private : int size_ ; }; explicit \u3092\u3064\u3051\u308b\u3068\u4ee5\u4e0b\u306e\u8a18\u8ff0\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 Square s = 10 ; \u7d99\u627f \u00b6 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6697\u9ed9\u7684\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 constructor_inheritance.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> class Rectangle { public : Rectangle () : height_ ( 0 ), width_ ( 0 ) { std :: cout << \"Rectangle::Rectangle() is called.\" << std :: endl ; } int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; class Square : public Rectangle { public : Square () { std :: cout << \"Square::Square() is called.\" << std :: endl ; } }; int main () { Square s ; // Square \u30af\u30e9\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u7528 std :: cout << \"area = \" << s . Area () << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Rectangle::Rectangle() is called. Square::Square() is called. area = 0 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u884c\u9806\u5e8f\u306f\u3001\u5fc5\u305a\u6b21\u306e\u9806\u5e8f\u306b\u306a\u308a\u307e\u3059\u3002 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u660e\u793a\u7684\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; class Square : public Rectangle { public : Square ( int size ) : Rectangle ( size , size ) {} };","title":"7.5. \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-05-constructors/#_1","text":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30af\u30e9\u30b9\u540d\u3068\u540c\u3058\u540d\u524d\u3067\u623b\u308a\u5024\u304c\u306a\u3044\u95a2\u6570\u304c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ); int Area () const ; private : const int height_ ; const int width_ ; }; \u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle r ( 10 , 20 );","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-05-constructors/#_2","text":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30e1\u30f3\u30d0\u5909\u6570\u3092\u521d\u671f\u5316\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; \u521d\u671f\u5316\u306f\u5024\u306e\u5909\u66f4\u3067\u306f\u306a\u3044\u305f\u3081\u3001 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3055\u308c\u305f\u5024\u304b\u3089 const \u30e1\u30f3\u30d0\u5909\u6570\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316"},{"location":"ch07-05-constructors/#_3","text":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ); int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; Rectangle :: Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {}","title":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9"},{"location":"ch07-05-constructors/#_4","text":"\u5024\u30921\u3064\u3082\u53d7\u3051\u53d6\u3089\u306a\u3044\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Rectangle { public : Rectangle () : height_ ( 0 ), width_ ( 0 ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle r ; \u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c1\u3064\u3082\u306a\u3044\u5834\u5408\u306e\u307f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6697\u9ed9\u7684\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002","title":"\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-05-constructors/#_5","text":"\u305d\u306e\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3060\u3051\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Copyable { public : Copyable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Copyable ( const Copyable & c ); // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf }; \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Copyable c1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Copyable c2 ( c1 ); // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 const \u3067\u306f\u306a\u3044\u53c2\u7167\u3067\u3042\u3063\u3066\u3082\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u304c\u3001 \u30b3\u30d4\u30fc\u5143\u3092\u5909\u66f4\u305b\u305a\u306b\u30b3\u30d4\u30fc\u3092\u884c\u3046\u305f\u3081\u306b const \u306e\u53c2\u7167\u306b\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u306f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002","title":"\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-05-constructors/#_6","text":"\u305d\u306e\u30af\u30e9\u30b9\u306e\u53f3\u8fba\u5024\u53c2\u7167\u3060\u3051\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Movable { public : Movable ( Movable && m ); }; \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Movable m1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Movable m2 ( std :: move ( m1 )); // \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210","title":"\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-05-constructors/#explicit","text":"\u5024\u30921\u3064\u3060\u3051\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3082\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3059\u3002 class Square { public : Square ( int size ) : size_ ( size ) {} int Area () const { return size_ * size_ ; } private : int size_ ; }; \u53d7\u3051\u53d6\u308b\u5024\u304c2\u500b\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Square s ( 10 ); \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u305f\u5834\u5408\u3001 int \u304b\u3089 Square \u3078\u306e\u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3067\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 Square s = 10 ; \u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3067\u4f7f\u7528\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f \u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b explicit \u3092\u3064\u3051\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3092\u610f\u56f3\u3057\u3066\u4f7f\u7528\u3059\u308b\u5834\u5408\u3092\u9664\u304d\u3001 \u53d7\u3051\u53d6\u308b\u5024\u304c1\u3064\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f explicit \u3092\u3064\u3051\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092 explicit \u306b\u3059\u308b\u3068 \u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u5024\u6e21\u3057\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u4e00\u822c\u7684\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f explicit \u306b\u306f\u3057\u307e\u305b\u3093\u3002 class Square { public : explicit Square ( int size ) : size_ ( size ) {} int Area () const { return size_ * size_ ; } private : int size_ ; }; explicit \u3092\u3064\u3051\u308b\u3068\u4ee5\u4e0b\u306e\u8a18\u8ff0\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 Square s = 10 ;","title":"\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068 explicit"},{"location":"ch07-05-constructors/#_7","text":"\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6697\u9ed9\u7684\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 constructor_inheritance.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> class Rectangle { public : Rectangle () : height_ ( 0 ), width_ ( 0 ) { std :: cout << \"Rectangle::Rectangle() is called.\" << std :: endl ; } int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; class Square : public Rectangle { public : Square () { std :: cout << \"Square::Square() is called.\" << std :: endl ; } }; int main () { Square s ; // Square \u30af\u30e9\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u7528 std :: cout << \"area = \" << s . Area () << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Rectangle::Rectangle() is called. Square::Square() is called. area = 0 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u884c\u9806\u5e8f\u306f\u3001\u5fc5\u305a\u6b21\u306e\u9806\u5e8f\u306b\u306a\u308a\u307e\u3059\u3002 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u660e\u793a\u7684\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; class Square : public Rectangle { public : Square ( int size ) : Rectangle ( size , size ) {} };","title":"\u7d99\u627f"},{"location":"ch07-06-destructors/","text":"\u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7834\u68c4\u3059\u308b\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u958b\u653e\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 ~ \u306b\u30af\u30e9\u30b9\u540d\u3092\u3064\u3051\u305f\u540d\u524d\u3067\u623b\u308a\u5024\u304c\u306a\u3044\u95a2\u6570\u304c\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5f15\u6570\u3092\u3082\u3061\u307e\u305b\u3093\u3002 #include <iostream> class DynamicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { DynamicArray d ( 5 , 1 ); std :: cout << d . Get ( 2 ) << std :: endl ; d . Set ( 2 , 10 ); std :: cout << d . Get ( 2 ) << std :: endl ; return 0 ; } \u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3057\u306a\u3044\u5834\u5408\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6697\u9ed9\u7684\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9 \u00b6 \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class DynamicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray (); void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; DynamicArray ::~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } \u7d99\u627f \u00b6 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6697\u9ed9\u7684\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 destructor_inheritance.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <iostream> class BasicArray { public : ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { DynamicArray d ( 5 , 1 ); std :: cout << d . Get ( 2 ) << std :: endl ; d . Set ( 2 , 10 ); std :: cout << d . Get ( 2 ) << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 DynamicArray::~DynamicArray() is called. BasicArray::~BasicArray() is called. \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u884c\u9806\u5e8f\u306f\u3001\u5fc5\u305a\u6b21\u306e\u9806\u5e8f\u306b\u306a\u308a\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u4eee\u60f3\u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3046\u5834\u5408\u3001 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3060\u3051\u304c\u547c\u3073\u51fa\u3055\u308c\u3066 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u547c\u3073\u51fa\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 destructor_non_virtual.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <iostream> #include <memory> class BasicArray { public : ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { std :: unique_ptr < BasicArray > b ( new DynamicArray ( 5 , 1 )); std :: cout << b -> Get ( 2 ) << std :: endl ; b -> Set ( 2 , 10 ); std :: cout << b -> Get ( 2 ) << std :: endl ; return 0 ; } \u3053\u306e\u4f8b\u3067\u306f \u6d3e\u751f\u30af\u30e9\u30b9 DynamicArray \u3092\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066 \u57fa\u5e95\u30af\u30e9\u30b9 BasicArray \u306e\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3063\u3066\u3044\u307e\u3059\u3002 \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 BasicArray::~BasicArray() is called. DynamicArray \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u3066\u304a\u3089\u305a\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u554f\u984c\u3092\u9632\u3050\u305f\u3081\u306b\u3001 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4eee\u60f3\u95a2\u6570\u306b\u3057\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u306f\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u305f\u3081 override \u3092\u3064\u3051\u307e\u3059\u3002 destructor_virtual.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <iostream> #include <memory> class BasicArray { public : virtual ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () override { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { std :: unique_ptr < BasicArray > b ( new DynamicArray ( 5 , 1 )); std :: cout << b -> Get ( 2 ) << std :: endl ; b -> Set ( 2 , 10 ); std :: cout << b -> Get ( 2 ) << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 DynamicArray::~DynamicArray() is called. BasicArray::~BasicArray() is called. STL\u30b3\u30f3\u30c6\u30ca\u30af\u30e9\u30b9\u306e\u7d99\u627f STL\u30b3\u30f3\u30c6\u30ca\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4eee\u60f3\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081STL\u30b3\u30f3\u30c6\u30ca\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092 STL\u30b3\u30f3\u30c6\u30ca\u306b\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u4f7f\u7528\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002","title":"7.6. \u30c7\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-06-destructors/#_1","text":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7834\u68c4\u3059\u308b\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u958b\u653e\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 ~ \u306b\u30af\u30e9\u30b9\u540d\u3092\u3064\u3051\u305f\u540d\u524d\u3067\u623b\u308a\u5024\u304c\u306a\u3044\u95a2\u6570\u304c\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5f15\u6570\u3092\u3082\u3061\u307e\u305b\u3093\u3002 #include <iostream> class DynamicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { DynamicArray d ( 5 , 1 ); std :: cout << d . Get ( 2 ) << std :: endl ; d . Set ( 2 , 10 ); std :: cout << d . Get ( 2 ) << std :: endl ; return 0 ; } \u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3057\u306a\u3044\u5834\u5408\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6697\u9ed9\u7684\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002","title":"\u30c7\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-06-destructors/#_2","text":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class DynamicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray (); void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; DynamicArray ::~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; }","title":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9"},{"location":"ch07-06-destructors/#_3","text":"\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6697\u9ed9\u7684\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 destructor_inheritance.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <iostream> class BasicArray { public : ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { DynamicArray d ( 5 , 1 ); std :: cout << d . Get ( 2 ) << std :: endl ; d . Set ( 2 , 10 ); std :: cout << d . Get ( 2 ) << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 DynamicArray::~DynamicArray() is called. BasicArray::~BasicArray() is called. \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u884c\u9806\u5e8f\u306f\u3001\u5fc5\u305a\u6b21\u306e\u9806\u5e8f\u306b\u306a\u308a\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf","title":"\u7d99\u627f"},{"location":"ch07-06-destructors/#_4","text":"\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3046\u5834\u5408\u3001 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3060\u3051\u304c\u547c\u3073\u51fa\u3055\u308c\u3066 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u547c\u3073\u51fa\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 destructor_non_virtual.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <iostream> #include <memory> class BasicArray { public : ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { std :: unique_ptr < BasicArray > b ( new DynamicArray ( 5 , 1 )); std :: cout << b -> Get ( 2 ) << std :: endl ; b -> Set ( 2 , 10 ); std :: cout << b -> Get ( 2 ) << std :: endl ; return 0 ; } \u3053\u306e\u4f8b\u3067\u306f \u6d3e\u751f\u30af\u30e9\u30b9 DynamicArray \u3092\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066 \u57fa\u5e95\u30af\u30e9\u30b9 BasicArray \u306e\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3063\u3066\u3044\u307e\u3059\u3002 \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 BasicArray::~BasicArray() is called. DynamicArray \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u3066\u304a\u3089\u305a\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u554f\u984c\u3092\u9632\u3050\u305f\u3081\u306b\u3001 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4eee\u60f3\u95a2\u6570\u306b\u3057\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u306f\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u305f\u3081 override \u3092\u3064\u3051\u307e\u3059\u3002 destructor_virtual.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <iostream> #include <memory> class BasicArray { public : virtual ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () override { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { std :: unique_ptr < BasicArray > b ( new DynamicArray ( 5 , 1 )); std :: cout << b -> Get ( 2 ) << std :: endl ; b -> Set ( 2 , 10 ); std :: cout << b -> Get ( 2 ) << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 DynamicArray::~DynamicArray() is called. BasicArray::~BasicArray() is called. STL\u30b3\u30f3\u30c6\u30ca\u30af\u30e9\u30b9\u306e\u7d99\u627f STL\u30b3\u30f3\u30c6\u30ca\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4eee\u60f3\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081STL\u30b3\u30f3\u30c6\u30ca\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092 STL\u30b3\u30f3\u30c6\u30ca\u306b\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u4f7f\u7528\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002","title":"\u4eee\u60f3\u30c7\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-07-structs/","text":"\u69cb\u9020\u4f53 \u00b6 \u30af\u30e9\u30b9\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 private \u3067\u3059\u304c\u3001 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u3092 public \u306b\u3057\u305f\u3082\u306e\u304c\u69cb\u9020\u4f53\u3067\u3059\u3002 class \u306e\u4ee3\u308f\u308a\u306b struct \u3068\u3059\u308b\u3068\u69cb\u9020\u4f53\u306b\u306a\u308a\u307e\u3059\u3002 struct Rectangle { int height ; int width ; }; \u3053\u306e\u4f8b\u3067\u306f\u660e\u793a\u7684\u306b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u66f8\u3044\u3066\u3042\u308a\u307e\u305b\u3093\u304c\u3001 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5024\u304c public \u3067\u3042\u308b\u305f\u3081\u6b21\u306e\u3088\u3046\u306b\u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Rectangle r ; r . height = 10 ; r . width = 20 ; \u30af\u30e9\u30b9\u3068\u69cb\u9020\u4f53\u306e\u4f7f\u3044\u5206\u3051\u306b\u3064\u3044\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u3067\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002","title":"7.7. \u69cb\u9020\u4f53"},{"location":"ch07-07-structs/#_1","text":"\u30af\u30e9\u30b9\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 private \u3067\u3059\u304c\u3001 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u3092 public \u306b\u3057\u305f\u3082\u306e\u304c\u69cb\u9020\u4f53\u3067\u3059\u3002 class \u306e\u4ee3\u308f\u308a\u306b struct \u3068\u3059\u308b\u3068\u69cb\u9020\u4f53\u306b\u306a\u308a\u307e\u3059\u3002 struct Rectangle { int height ; int width ; }; \u3053\u306e\u4f8b\u3067\u306f\u660e\u793a\u7684\u306b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u66f8\u3044\u3066\u3042\u308a\u307e\u305b\u3093\u304c\u3001 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5024\u304c public \u3067\u3042\u308b\u305f\u3081\u6b21\u306e\u3088\u3046\u306b\u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Rectangle r ; r . height = 10 ; r . width = 20 ; \u30af\u30e9\u30b9\u3068\u69cb\u9020\u4f53\u306e\u4f7f\u3044\u5206\u3051\u306b\u3064\u3044\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u3067\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002","title":"\u69cb\u9020\u4f53"},{"location":"ch08-01-cpp-casts/","text":"C++ \u306e\u30ad\u30e3\u30b9\u30c8 \u00b6 C++ \u3067\u306f4\u7a2e\u985e\u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50 \u4e3b\u306a\u7528\u9014 static_cast \u578b\u5909\u63db\u3092\u660e\u793a\u7684\u306b\u884c\u3046 dynamic_cast \u57fa\u5e95\u30af\u30e9\u30b9\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6d3e\u751f\u30af\u30e9\u30b9\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u5909\u63db\u3059\u308b const_cast const\u4fee\u98fe\u5b50\u3092\u5916\u3059 reinterpret_cast \u30dd\u30a4\u30f3\u30bf\u306e\u578b\u5909\u63db\u3092\u884c\u3046 static_cast \u00b6 \u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3092\u660e\u793a\u7684\u306b\u884c\u3046\u305f\u3081\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 double dx = 3.14 ; int x = static_cast < int > ( dx ); dynamic_cast \u00b6 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u3059\u308b\u969b\u306b\u3001 dynamic_cast \u3092\u4f7f\u3044\u307e\u3059\u3002 const_cast \u00b6 const\u4fee\u98fe\u5b50\u3092\u5916\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 const std :: string str ( \"hoge\" ); std :: string & x = const_cast < std :: string &> ( str ); \u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u66f4\u3092\u52a0\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u300d\u305f\u3081\u306b const \u304c\u4ed8\u3044\u3066\u3044\u308b\u306b\u3082\u95a2\u308f\u3089\u305a\u3001 const_cast \u3067\u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u66f4\u3092\u52a0\u3048\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u300d\u3053\u3068\u306f\u671b\u307e\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u57fa\u672c\u7684\u306b\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002 reinterpret_cast \u00b6 \u30dd\u30a4\u30f3\u30bf\u306e\u578b\u5909\u63db\u3092\u884c\u3046\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 class A {}; class B {}; A a ; B * b = reinterpret_cast < B *> ( & a ); \u5909\u63db\u5f8c\u306e\u578b\u304b\u3089\u5909\u63db\u524d\u306e\u578b\u306b\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u70b9\u306f\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001 \u5909\u63db\u3057\u305f\u3082\u306e\u304c\u6b63\u3057\u304f\u6a5f\u80fd\u3059\u308b\u304b\u306f\u5b9f\u88c5\u306b\u4f9d\u5b58\u3059\u308b\u305f\u3081\u3001\u306a\u308b\u3079\u304f reinterpret_cast \u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002","title":"8.1. C++ \u306e\u30ad\u30e3\u30b9\u30c8"},{"location":"ch08-01-cpp-casts/#c","text":"C++ \u3067\u306f4\u7a2e\u985e\u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50 \u4e3b\u306a\u7528\u9014 static_cast \u578b\u5909\u63db\u3092\u660e\u793a\u7684\u306b\u884c\u3046 dynamic_cast \u57fa\u5e95\u30af\u30e9\u30b9\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6d3e\u751f\u30af\u30e9\u30b9\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u5909\u63db\u3059\u308b const_cast const\u4fee\u98fe\u5b50\u3092\u5916\u3059 reinterpret_cast \u30dd\u30a4\u30f3\u30bf\u306e\u578b\u5909\u63db\u3092\u884c\u3046","title":"C++ \u306e\u30ad\u30e3\u30b9\u30c8"},{"location":"ch08-01-cpp-casts/#static_cast","text":"\u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3092\u660e\u793a\u7684\u306b\u884c\u3046\u305f\u3081\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 double dx = 3.14 ; int x = static_cast < int > ( dx );","title":"static_cast"},{"location":"ch08-01-cpp-casts/#dynamic_cast","text":"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u3059\u308b\u969b\u306b\u3001 dynamic_cast \u3092\u4f7f\u3044\u307e\u3059\u3002","title":"dynamic_cast"},{"location":"ch08-01-cpp-casts/#const_cast","text":"const\u4fee\u98fe\u5b50\u3092\u5916\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 const std :: string str ( \"hoge\" ); std :: string & x = const_cast < std :: string &> ( str ); \u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u66f4\u3092\u52a0\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u300d\u305f\u3081\u306b const \u304c\u4ed8\u3044\u3066\u3044\u308b\u306b\u3082\u95a2\u308f\u3089\u305a\u3001 const_cast \u3067\u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u66f4\u3092\u52a0\u3048\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u300d\u3053\u3068\u306f\u671b\u307e\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u57fa\u672c\u7684\u306b\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002","title":"const_cast"},{"location":"ch08-01-cpp-casts/#reinterpret_cast","text":"\u30dd\u30a4\u30f3\u30bf\u306e\u578b\u5909\u63db\u3092\u884c\u3046\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 class A {}; class B {}; A a ; B * b = reinterpret_cast < B *> ( & a ); \u5909\u63db\u5f8c\u306e\u578b\u304b\u3089\u5909\u63db\u524d\u306e\u578b\u306b\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u70b9\u306f\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001 \u5909\u63db\u3057\u305f\u3082\u306e\u304c\u6b63\u3057\u304f\u6a5f\u80fd\u3059\u308b\u304b\u306f\u5b9f\u88c5\u306b\u4f9d\u5b58\u3059\u308b\u305f\u3081\u3001\u306a\u308b\u3079\u304f reinterpret_cast \u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002","title":"reinterpret_cast"},{"location":"ch08-02-c-cast/","text":"C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8 \u00b6 C++ \u306f C\u8a00\u8a9e\u3068\u4e92\u63db\u6027\u304c\u3042\u308b\u305f\u3081\u3001 (\u578b\u540d) \u3067C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 double dx = 3.14 ; int x = ( int ) dx ; \u3057\u304b\u3057\u3001C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u3001\u30b3\u30fc\u30c9\u304b\u3089\u30ad\u30e3\u30b9\u30c8\u306e\u610f\u56f3\u304c\u6c72\u307f\u53d6\u308a\u306b\u304f\u3044\u4e0a\u3001\u5b9f\u88c5\u8005\u306e\u610f\u306b\u53cd\u3057\u305f\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u3063\u305f\u3068\u3057\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308b\u305f\u3081\u3001\u4e0d\u5177\u5408\u3092\u751f\u307f\u51fa\u3059\u8981\u56e0\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u5bfe\u3057\u3066\u3001C++ \u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u306f\u7528\u9014\u306b\u5408\u308f\u305b\u3066\u7a2e\u985e\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u610f\u56f3\u304c\u660e\u78ba\u306b\u306a\u308b\u4e0a\u3001\u5b9f\u88c5\u8005\u306e\u610f\u306b\u53cd\u3057\u305f\u30ad\u30e3\u30b9\u30c8\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 int x = 100 ; int * px = static_cast < int *> ( x ); // static_cast\u306e\u610f\u56f3\u306b\u53cd\u3057\u3066\u3044\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u30ad\u30e3\u30b9\u30c8\u306e\u610f\u56f3\u3092\u660e\u78ba\u306b\u3059\u308b\u305f\u3081\u306b\u3001C++ \u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002","title":"8.2. C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8"},{"location":"ch08-02-c-cast/#c","text":"C++ \u306f C\u8a00\u8a9e\u3068\u4e92\u63db\u6027\u304c\u3042\u308b\u305f\u3081\u3001 (\u578b\u540d) \u3067C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 double dx = 3.14 ; int x = ( int ) dx ; \u3057\u304b\u3057\u3001C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u3001\u30b3\u30fc\u30c9\u304b\u3089\u30ad\u30e3\u30b9\u30c8\u306e\u610f\u56f3\u304c\u6c72\u307f\u53d6\u308a\u306b\u304f\u3044\u4e0a\u3001\u5b9f\u88c5\u8005\u306e\u610f\u306b\u53cd\u3057\u305f\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u3063\u305f\u3068\u3057\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308b\u305f\u3081\u3001\u4e0d\u5177\u5408\u3092\u751f\u307f\u51fa\u3059\u8981\u56e0\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u5bfe\u3057\u3066\u3001C++ \u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u306f\u7528\u9014\u306b\u5408\u308f\u305b\u3066\u7a2e\u985e\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u610f\u56f3\u304c\u660e\u78ba\u306b\u306a\u308b\u4e0a\u3001\u5b9f\u88c5\u8005\u306e\u610f\u306b\u53cd\u3057\u305f\u30ad\u30e3\u30b9\u30c8\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 int x = 100 ; int * px = static_cast < int *> ( x ); // static_cast\u306e\u610f\u56f3\u306b\u53cd\u3057\u3066\u3044\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u30ad\u30e3\u30b9\u30c8\u306e\u610f\u56f3\u3092\u660e\u78ba\u306b\u3059\u308b\u305f\u3081\u306b\u3001C++ \u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002","title":"C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8"},{"location":"ch09-01-function-templates/","text":"\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u00b6 \u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u6a5f\u80fd\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u578b\u306b\u4f9d\u5b58\u305b\u305a\u51e6\u7406\u3092\u5171\u901a\u5316\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 \u95a2\u6570\u306b\u5bfe\u3059\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T > T Sum ( T a , T b ) { return a + b ; } \u578b\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u306b\u306f typename \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u3053\u306e\u4f8b\u3067\u306f T \u3068\u3044\u3046\u578b\u30672\u3064\u306e\u5f15\u6570\u3068\u623b\u308a\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Sum < int > ( 1 , 2 ); // 3 Sum < double > ( 1.2 , 3.4 ); // 4.6 \u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b < ... > \u3067 T \u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u306e\u7701\u7565 \u00b6 \u5b9f\u5f15\u6570\u304b\u3089\u578b\u30d1\u30e9\u30e1\u30fc\u30bf T \u3092\u63a8\u8ad6\u3067\u304d\u308b\u5834\u5408\u306b\u306f \u547c\u3073\u51fa\u3057\u6642\u306e < ... > \u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Sum ( 1 , 2 ); // 3 Sum ( 1.2 , 3.4 ); // 4.6 \u7b2c1\u5f15\u6570\u3092 int \u3001\u7b2c2\u5f15\u6570\u3092 double \u306b\u3059\u308b\u3068 T \u306e\u578b\u3092\u63a8\u8ad6\u3067\u304d\u305a\u3001 \u547c\u3073\u51fa\u3057\u6642\u306e < ... > \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 Sum < double > ( 1 , 2.3 ); // 3.3 // Sum(1, 2.3); // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u8907\u6570\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570 \u00b6 \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306f 1\u3064\u3060\u3051\u3067\u306f\u306a\u304f\u8907\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u623b\u308a\u5024\u3092 double \u306b\u56fa\u5b9a\u3057\u3066\u7b2c1\u5f15\u6570\u3068\u7b2c2\u5f15\u6570\u3092 \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T , typename U > double Sum ( T a , U b ) { return a + b ; } \u3053\u306e\u5834\u5408\u306b\u306f\u6b21\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 Sum ( 1 , 2.3 ); // 3.3 \u623b\u308a\u5024\u306e\u578b\u63a8\u8ad6 \u00b6 \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3057\u305f\u5f15\u6570\u306e\u578b\u304b\u3089\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u306b\u306f decltype \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 template < typename T , typename U > auto Sum ( T a , U b ) -> decltype ( a + b ) { return a + b ; } \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316 \u00b6 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u306f\u578b\u3060\u3051\u3067\u306f\u306a\u304f \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3068\u3057\u3066\u914d\u5217\u306e\u30b5\u30a4\u30ba\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 template < int N > int Fibonacchi () { int a [ N + 1 ]; a [ 0 ] = 0 ; a [ 1 ] = 1 ; for ( auto i = 2 ; i <= N ; ++ i ) { a [ i ] = a [ i - 1 ] + a [ i - 2 ]; } return a [ N ]; } \u3053\u306e\u4f8b\u306f \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570 \u3092\u8a08\u7b97\u3059\u308b\u51e6\u7406\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u5024\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Fibonacchi < 10 > (); // 55","title":"9.1. \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ch09-01-function-templates/#_1","text":"\u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u6a5f\u80fd\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u578b\u306b\u4f9d\u5b58\u305b\u305a\u51e6\u7406\u3092\u5171\u901a\u5316\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 \u95a2\u6570\u306b\u5bfe\u3059\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T > T Sum ( T a , T b ) { return a + b ; } \u578b\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u306b\u306f typename \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u3053\u306e\u4f8b\u3067\u306f T \u3068\u3044\u3046\u578b\u30672\u3064\u306e\u5f15\u6570\u3068\u623b\u308a\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Sum < int > ( 1 , 2 ); // 3 Sum < double > ( 1.2 , 3.4 ); // 4.6 \u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b < ... > \u3067 T \u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002","title":"\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ch09-01-function-templates/#_2","text":"\u5b9f\u5f15\u6570\u304b\u3089\u578b\u30d1\u30e9\u30e1\u30fc\u30bf T \u3092\u63a8\u8ad6\u3067\u304d\u308b\u5834\u5408\u306b\u306f \u547c\u3073\u51fa\u3057\u6642\u306e < ... > \u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Sum ( 1 , 2 ); // 3 Sum ( 1.2 , 3.4 ); // 4.6 \u7b2c1\u5f15\u6570\u3092 int \u3001\u7b2c2\u5f15\u6570\u3092 double \u306b\u3059\u308b\u3068 T \u306e\u578b\u3092\u63a8\u8ad6\u3067\u304d\u305a\u3001 \u547c\u3073\u51fa\u3057\u6642\u306e < ... > \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 Sum < double > ( 1 , 2.3 ); // 3.3 // Sum(1, 2.3); // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc","title":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u306e\u7701\u7565"},{"location":"ch09-01-function-templates/#_3","text":"\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306f 1\u3064\u3060\u3051\u3067\u306f\u306a\u304f\u8907\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u623b\u308a\u5024\u3092 double \u306b\u56fa\u5b9a\u3057\u3066\u7b2c1\u5f15\u6570\u3068\u7b2c2\u5f15\u6570\u3092 \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T , typename U > double Sum ( T a , U b ) { return a + b ; } \u3053\u306e\u5834\u5408\u306b\u306f\u6b21\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 Sum ( 1 , 2.3 ); // 3.3","title":"\u8907\u6570\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570"},{"location":"ch09-01-function-templates/#_4","text":"\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3057\u305f\u5f15\u6570\u306e\u578b\u304b\u3089\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u306b\u306f decltype \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 template < typename T , typename U > auto Sum ( T a , U b ) -> decltype ( a + b ) { return a + b ; }","title":"\u623b\u308a\u5024\u306e\u578b\u63a8\u8ad6"},{"location":"ch09-01-function-templates/#_5","text":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u306f\u578b\u3060\u3051\u3067\u306f\u306a\u304f \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3068\u3057\u3066\u914d\u5217\u306e\u30b5\u30a4\u30ba\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 template < int N > int Fibonacchi () { int a [ N + 1 ]; a [ 0 ] = 0 ; a [ 1 ] = 1 ; for ( auto i = 2 ; i <= N ; ++ i ) { a [ i ] = a [ i - 1 ] + a [ i - 2 ]; } return a [ N ]; } \u3053\u306e\u4f8b\u306f \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570 \u3092\u8a08\u7b97\u3059\u308b\u51e6\u7406\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u5024\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Fibonacchi < 10 > (); // 55","title":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316"},{"location":"ch09-02-class-templates/","text":"\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u00b6 \u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T > class Rectangle { public : Rectangle ( T height , T width ) : height_ ( height ), width_ ( width ) {} T Area () const { return height_ * width_ ; } private : const T height_ ; const T width_ ; }; \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle < int > r1 ( 10 , 20 ); Rectangle < double > r2 ( 1.2 , 3.4 ); \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u304c\u5fc5\u8981\u306a\u306e\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u6642\u306e\u307f\u3067\u3001 \u751f\u6210\u5f8c\u306f\u901a\u5e38\u306e\u30af\u30e9\u30b9\u3068\u540c\u69d8\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 r1 . Area (); // 200 r2 . Area (); // 4.08 \u8907\u6570\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570 \u00b6 \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306f \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3082\u8907\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 template < typename T , typename U > class Rectangle { public : Rectangle ( T height , U width ) : height_ ( height ), width_ ( width ) {} double Area () const { return height_ * width_ ; } private : const T height_ ; const U width_ ; }; \u3053\u306e\u4f8b\u3067\u306f\u30e1\u30f3\u30d0\u95a2\u6570 Area() \u306e\u623b\u308a\u5024\u3092 double \u306b\u56fa\u5b9a\u3057\u3066 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u30922\u3064\u306b\u3057\u3066\u3044\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u63a8\u8ad6 \u00b6 \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u306b\u306f decltype \u5185\u3067 std::declval \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 template < typename T , typename U > class Rectangle { public : Rectangle ( T height , U width ) : height_ ( height ), width_ ( width ) {} auto Area () const -> decltype ( std :: declval < T > () * std :: declval < U > ()) { return height_ * width_ ; } private : const T height_ ; const U width_ ; }; \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316 \u00b6 \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u306f\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 template < typename T , int N > class Array { public : int size () const { return N ; } T data_ [ N ]; };","title":"9.2. \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ch09-02-class-templates/#_1","text":"\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T > class Rectangle { public : Rectangle ( T height , T width ) : height_ ( height ), width_ ( width ) {} T Area () const { return height_ * width_ ; } private : const T height_ ; const T width_ ; }; \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle < int > r1 ( 10 , 20 ); Rectangle < double > r2 ( 1.2 , 3.4 ); \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u304c\u5fc5\u8981\u306a\u306e\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u6642\u306e\u307f\u3067\u3001 \u751f\u6210\u5f8c\u306f\u901a\u5e38\u306e\u30af\u30e9\u30b9\u3068\u540c\u69d8\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 r1 . Area (); // 200 r2 . Area (); // 4.08","title":"\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ch09-02-class-templates/#_2","text":"\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306f \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3082\u8907\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 template < typename T , typename U > class Rectangle { public : Rectangle ( T height , U width ) : height_ ( height ), width_ ( width ) {} double Area () const { return height_ * width_ ; } private : const T height_ ; const U width_ ; }; \u3053\u306e\u4f8b\u3067\u306f\u30e1\u30f3\u30d0\u95a2\u6570 Area() \u306e\u623b\u308a\u5024\u3092 double \u306b\u56fa\u5b9a\u3057\u3066 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u30922\u3064\u306b\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8907\u6570\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570"},{"location":"ch09-02-class-templates/#_3","text":"\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u306b\u306f decltype \u5185\u3067 std::declval \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 template < typename T , typename U > class Rectangle { public : Rectangle ( T height , U width ) : height_ ( height ), width_ ( width ) {} auto Area () const -> decltype ( std :: declval < T > () * std :: declval < U > ()) { return height_ * width_ ; } private : const T height_ ; const U width_ ; };","title":"\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u63a8\u8ad6"},{"location":"ch09-02-class-templates/#_4","text":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u306f\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 template < typename T , int N > class Array { public : int size () const { return N ; } T data_ [ N ]; };","title":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316"}]}