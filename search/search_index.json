{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u30bc\u30ed\u304b\u3089\u5b66\u3076 C++ \u00b6 \u3053\u306e\u30b5\u30a4\u30c8\u306f C++ \u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u305f\u5b66\u7fd2\u30b5\u30a4\u30c8\u3067\u3059\u3002 \u672c\u66f8\u3092\u901a\u3058\u3066 C++ \u306e\u958b\u767a\u74b0\u5883\u3084\u69cb\u6587\u30fb\u5358\u4f53\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306a\u3069\u304c \u4e00\u901a\u308a\u5b66\u3079\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u5bfe\u8c61 \u00b6 C++ \u3092\u521d\u3081\u3066\u5b66\u3076\u4eba \u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u3092 1 \u3064\u4ee5\u4e0a\u7d4c\u9a13\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u4eba \u95a2\u6570\u3084\u30af\u30e9\u30b9\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306b\u5bfe\u3059\u308b\u77e5\u8b58\u3092\u3042\u308b\u7a0b\u5ea6\u524d\u63d0\u306b\u3057\u307e\u3059\u3002 C++ \u306e\u7279\u5fb4 \u00b6 C++ \u306f \u30d3\u30e3\u30fc\u30cd\u30fb\u30b9\u30c8\u30ed\u30f4\u30b9\u30c8\u30eb\u30c3\u30d7 \u306b\u3088\u308a\u958b\u767a\u3055\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3059\u3002 C++ \u306b\u306f\u4e3b\u306b\u6b21\u306e\u3088\u3046\u306a\u7279\u5fb4\u304c\u3042\u308a\u307e\u3059\u3002 \u9ad8\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9 \u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u304c\u5c11\u306a\u3044 \u67d4\u8edf\u6027\u304c\u3042\u308b \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u51fa\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u4f4e\u30ec\u30d9\u30eb\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u5206\u3001 \u4e0d\u5177\u5408\u304c\u6df7\u5165\u3057\u3084\u3059\u3044\u3068\u3044\u3046\u30c7\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002 \u3057\u304b\u3057\u53e4\u304f\u304b\u3089\u3042\u308b\u8a00\u8a9e\u306e\u305f\u3081\u3001\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u306f\u8c4a\u5bcc\u306b\u63c3\u3063\u3066\u3044\u307e\u3059\u3002 \u4ed6\u306e\u8a00\u8a9e\u306b\u6bd4\u3079\u308b\u3068\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3084\u3084\u8ca7\u5f31\u3067\u3059\u304c\u3001 \u3053\u308c\u306f\u67d4\u8edf\u6027\u3068\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u306e\u7d50\u679c\u3067\u3059\u3002 C++ \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066 \u00b6 C++98 (1998\u5e74\u5236\u5b9a) C++03 (2003\u5e74\u5236\u5b9a) C++11 (2011\u5e74\u5236\u5b9a) C++14 (2014\u5e74\u5236\u5b9a) C++17 (2017\u5e74\u5236\u5b9a) C++20 (2020\u5e74\u5236\u5b9a\u4e88\u5b9a) \u3053\u306e\u30b5\u30a4\u30c8\u3067\u306f C++11 \u3092\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002","title":"\u30db\u30fc\u30e0"},{"location":"#c","text":"\u3053\u306e\u30b5\u30a4\u30c8\u306f C++ \u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u305f\u5b66\u7fd2\u30b5\u30a4\u30c8\u3067\u3059\u3002 \u672c\u66f8\u3092\u901a\u3058\u3066 C++ \u306e\u958b\u767a\u74b0\u5883\u3084\u69cb\u6587\u30fb\u5358\u4f53\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u306a\u3069\u304c \u4e00\u901a\u308a\u5b66\u3079\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002","title":"\u30bc\u30ed\u304b\u3089\u5b66\u3076 C++"},{"location":"#_1","text":"C++ \u3092\u521d\u3081\u3066\u5b66\u3076\u4eba \u30d7\u30ed\u30b0\u30e9\u30e0\u8a00\u8a9e\u3092 1 \u3064\u4ee5\u4e0a\u7d4c\u9a13\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u4eba \u95a2\u6570\u3084\u30af\u30e9\u30b9\u30fb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306b\u5bfe\u3059\u308b\u77e5\u8b58\u3092\u3042\u308b\u7a0b\u5ea6\u524d\u63d0\u306b\u3057\u307e\u3059\u3002","title":"\u5bfe\u8c61"},{"location":"#c_1","text":"C++ \u306f \u30d3\u30e3\u30fc\u30cd\u30fb\u30b9\u30c8\u30ed\u30f4\u30b9\u30c8\u30eb\u30c3\u30d7 \u306b\u3088\u308a\u958b\u767a\u3055\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3059\u3002 C++ \u306b\u306f\u4e3b\u306b\u6b21\u306e\u3088\u3046\u306a\u7279\u5fb4\u304c\u3042\u308a\u307e\u3059\u3002 \u9ad8\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9 \u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u304c\u5c11\u306a\u3044 \u67d4\u8edf\u6027\u304c\u3042\u308b \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u51fa\u3057\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u4f4e\u30ec\u30d9\u30eb\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u5206\u3001 \u4e0d\u5177\u5408\u304c\u6df7\u5165\u3057\u3084\u3059\u3044\u3068\u3044\u3046\u30c7\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\u3002 \u3057\u304b\u3057\u53e4\u304f\u304b\u3089\u3042\u308b\u8a00\u8a9e\u306e\u305f\u3081\u3001\u30a8\u30b3\u30b7\u30b9\u30c6\u30e0\u306f\u8c4a\u5bcc\u306b\u63c3\u3063\u3066\u3044\u307e\u3059\u3002 \u4ed6\u306e\u8a00\u8a9e\u306b\u6bd4\u3079\u308b\u3068\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u3084\u3084\u8ca7\u5f31\u3067\u3059\u304c\u3001 \u3053\u308c\u306f\u67d4\u8edf\u6027\u3068\u306e\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u306e\u7d50\u679c\u3067\u3059\u3002","title":"C++ \u306e\u7279\u5fb4"},{"location":"#c_2","text":"C++98 (1998\u5e74\u5236\u5b9a) C++03 (2003\u5e74\u5236\u5b9a) C++11 (2011\u5e74\u5236\u5b9a) C++14 (2014\u5e74\u5236\u5b9a) C++17 (2017\u5e74\u5236\u5b9a) C++20 (2020\u5e74\u5236\u5b9a\u4e88\u5b9a) \u3053\u306e\u30b5\u30a4\u30c8\u3067\u306f C++11 \u3092\u5bfe\u8c61\u3068\u3057\u307e\u3059\u3002","title":"C++ \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3064\u3044\u3066"},{"location":"appendix-cast-details/","text":"\u30ad\u30e3\u30b9\u30c8\u306e\u8a73\u3057\u3044\u8aac\u660e \u00b6 C++ \u306e4\u7a2e\u985e\u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002 \u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50 CV \u4fee\u98fe\u5b50\u306e\u9664\u53bb CV \u4fee\u98fe\u5b50\u4ee5\u5916\u306e\u578b\u60c5\u5831\u306e\u5909\u66f4 \u30d3\u30c3\u30c8\u8868\u73fe\u306e\u5909\u63db static_cast dynamic_cast const_cast reinterpret_cast CV \u4fee\u98fe\u5b50\u306e\u8ffd\u52a0\u306f\u3069\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u3082\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 CV \u4fee\u98fe\u5b50 \u00b6 const \u4fee\u98fe\u5b50\u3068 volatile \u4fee\u98fe\u5b50 \u3092\u307e\u3068\u3081\u3066 CV \u4fee\u98fe\u5b50\u3068\u547c\u3073\u307e\u3059\u3002 volatile \u4fee\u98fe\u5b50\u306f cv (const \u304a\u3088\u3073 volatile) \u578b\u4fee\u98fe\u5b50 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 static_cast \u3068 dynamic_cast \u00b6 static_cast \u3068 dynamic_cast \u306f\u5024\u306e\u5909\u63db\u65b9\u6cd5\u3092\u6c7a\u5b9a\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u9055\u3044\u307e\u3059\u3002 static_cast \u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u5b9a dynamic_cast \u306f\u5b9f\u884c\u6642\u306b\u6c7a\u5b9a \u3053\u306e\u9055\u3044\u306b\u3088\u3063\u3066\u5b89\u5168\u306b\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u304c\u3067\u304d\u308b\u304b\u306a\u3069\u306e\u5dee\u304c\u3042\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30d3\u30c3\u30c8\u8868\u73fe\u306e\u5909\u63db \u00b6 static_cast \u3084 dynamic_cast \u3067\u306f\u578b\u306e\u5909\u63db\u3068\u540c\u6642\u306b\u30d3\u30c3\u30c8\u8868\u73fe\u3092\u5909\u63db\u3057\u307e\u3059\u304c\u3001 reinterpret_cast \u3067\u306f\u30d3\u30c3\u30c8\u8868\u73fe\u3092\u5909\u66f4\u305b\u305a\u306b\u578b\u3060\u3051\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 \u6574\u6570\u578b\u3068\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b\u306a\u3069\u30d3\u30c3\u30c8\u8868\u73fe\u304c\u7570\u306a\u308b\u578b\u306e\u5909\u63db\u3092\u884c\u3046\u3068\u3001 \u5024\u306e\u5909\u63db\u306e\u6709\u7121\u306b\u3088\u3063\u3066\u6319\u52d5\u306e\u5dee\u7570\u304c\u751f\u3058\u307e\u3059\u3002 double x = 2 ; int64_t s = static_cast < const int64_t &> ( x ); int64_t r = reinterpret_cast < const int64_t &> ( x ); std :: cout << s << std :: endl ; // 2 std :: cout << r << std :: endl ; // 4611686018427387904 (IEEE 754 \u306e\u5834\u5408) \u4e00\u822c\u306b\u6d3e\u751f\u30af\u30e9\u30b9\u304b\u3089\u57fa\u5e95\u30af\u30e9\u30b9\u3078\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u5834\u5408\u306b\u3082\u30d3\u30c3\u30c8\u8868\u73fe\u306e\u5909\u63db\u306f\u5fc5\u8981\u3067\u3059\u3002 \u305f\u3068\u3048\u3070 \u591a\u91cd\u7d99\u627f \u3092\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u3001 \u30aa\u30d5\u30bb\u30c3\u30c8\u304c 0 \u3067\u306f\u306a\u3044\u57fa\u5e95\u30af\u30e9\u30b9\u3078\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3068\u6b63\u3057\u3044\u5024\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> class Base1 { public : virtual ~ Base1 () = default ; int x = 2 ; }; class Base2 { public : virtual ~ Base2 () = default ; int y = 3 ; }; class Sub : public Base1 , public Base2 { public : ~ Sub () override = default ; }; int main () { Sub sub ; Base1 * s1 = static_cast < Base1 *> ( & sub ); Base2 * s2 = static_cast < Base2 *> ( & sub ); std :: cout << s1 -> x << std :: endl ; // 2 std :: cout << s2 -> y << std :: endl ; // 3 Base1 * r1 = reinterpret_cast < Base1 *> ( & sub ); Base2 * r2 = reinterpret_cast < Base2 *> ( & sub ); std :: cout << r1 -> x << std :: endl ; // 2 std :: cout << r2 -> y << std :: endl ; // 2 return 0 ; } C++ \u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u3067\u304d\u306a\u3044\u3053\u3068 \u00b6 C++ \u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u3092\u7121\u8996\u3057\u305f\u5909\u63db\u306a\u3069\u306f\u884c\u3048\u307e\u305b\u3093\u304c\u3001 C \u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u306a\u3089\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u3092\u7121\u8996\u3057\u305f\u5909\u63db\u304c\u5fc5\u8981\u3068\u306a\u308b\u306e\u306f\u30af\u30e9\u30b9\u8a2d\u8a08\u306b\u554f\u984c\u304c\u3042\u308b\u5834\u5408\u306a\u306e\u3067\u3001 C \u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u3092\u7528\u3044\u308b\u306e\u3067\u306f\u306a\u304f\u3001 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u3092\u4fee\u6b63\u3057\u3066 C++ \u306e\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\u3002 \u8a73\u7d30\u306f \u660e\u793a\u7684\u306a\u578b\u5909\u63db - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30ad\u30e3\u30b9\u30c8\u306e\u8a73\u3057\u3044\u8aac\u660e"},{"location":"appendix-cast-details/#_1","text":"C++ \u306e4\u7a2e\u985e\u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002 \u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50 CV \u4fee\u98fe\u5b50\u306e\u9664\u53bb CV \u4fee\u98fe\u5b50\u4ee5\u5916\u306e\u578b\u60c5\u5831\u306e\u5909\u66f4 \u30d3\u30c3\u30c8\u8868\u73fe\u306e\u5909\u63db static_cast dynamic_cast const_cast reinterpret_cast CV \u4fee\u98fe\u5b50\u306e\u8ffd\u52a0\u306f\u3069\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u3082\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u30ad\u30e3\u30b9\u30c8\u306e\u8a73\u3057\u3044\u8aac\u660e"},{"location":"appendix-cast-details/#cv","text":"const \u4fee\u98fe\u5b50\u3068 volatile \u4fee\u98fe\u5b50 \u3092\u307e\u3068\u3081\u3066 CV \u4fee\u98fe\u5b50\u3068\u547c\u3073\u307e\u3059\u3002 volatile \u4fee\u98fe\u5b50\u306f cv (const \u304a\u3088\u3073 volatile) \u578b\u4fee\u98fe\u5b50 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"CV \u4fee\u98fe\u5b50"},{"location":"appendix-cast-details/#static_cast-dynamic_cast","text":"static_cast \u3068 dynamic_cast \u306f\u5024\u306e\u5909\u63db\u65b9\u6cd5\u3092\u6c7a\u5b9a\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u304c\u9055\u3044\u307e\u3059\u3002 static_cast \u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u5b9a dynamic_cast \u306f\u5b9f\u884c\u6642\u306b\u6c7a\u5b9a \u3053\u306e\u9055\u3044\u306b\u3088\u3063\u3066\u5b89\u5168\u306b\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u304c\u3067\u304d\u308b\u304b\u306a\u3069\u306e\u5dee\u304c\u3042\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"static_cast \u3068 dynamic_cast"},{"location":"appendix-cast-details/#_2","text":"static_cast \u3084 dynamic_cast \u3067\u306f\u578b\u306e\u5909\u63db\u3068\u540c\u6642\u306b\u30d3\u30c3\u30c8\u8868\u73fe\u3092\u5909\u63db\u3057\u307e\u3059\u304c\u3001 reinterpret_cast \u3067\u306f\u30d3\u30c3\u30c8\u8868\u73fe\u3092\u5909\u66f4\u305b\u305a\u306b\u578b\u3060\u3051\u3092\u5909\u66f4\u3057\u307e\u3059\u3002 \u6574\u6570\u578b\u3068\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u578b\u306a\u3069\u30d3\u30c3\u30c8\u8868\u73fe\u304c\u7570\u306a\u308b\u578b\u306e\u5909\u63db\u3092\u884c\u3046\u3068\u3001 \u5024\u306e\u5909\u63db\u306e\u6709\u7121\u306b\u3088\u3063\u3066\u6319\u52d5\u306e\u5dee\u7570\u304c\u751f\u3058\u307e\u3059\u3002 double x = 2 ; int64_t s = static_cast < const int64_t &> ( x ); int64_t r = reinterpret_cast < const int64_t &> ( x ); std :: cout << s << std :: endl ; // 2 std :: cout << r << std :: endl ; // 4611686018427387904 (IEEE 754 \u306e\u5834\u5408) \u4e00\u822c\u306b\u6d3e\u751f\u30af\u30e9\u30b9\u304b\u3089\u57fa\u5e95\u30af\u30e9\u30b9\u3078\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u5834\u5408\u306b\u3082\u30d3\u30c3\u30c8\u8868\u73fe\u306e\u5909\u63db\u306f\u5fc5\u8981\u3067\u3059\u3002 \u305f\u3068\u3048\u3070 \u591a\u91cd\u7d99\u627f \u3092\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u3001 \u30aa\u30d5\u30bb\u30c3\u30c8\u304c 0 \u3067\u306f\u306a\u3044\u57fa\u5e95\u30af\u30e9\u30b9\u3078\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3068\u6b63\u3057\u3044\u5024\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> class Base1 { public : virtual ~ Base1 () = default ; int x = 2 ; }; class Base2 { public : virtual ~ Base2 () = default ; int y = 3 ; }; class Sub : public Base1 , public Base2 { public : ~ Sub () override = default ; }; int main () { Sub sub ; Base1 * s1 = static_cast < Base1 *> ( & sub ); Base2 * s2 = static_cast < Base2 *> ( & sub ); std :: cout << s1 -> x << std :: endl ; // 2 std :: cout << s2 -> y << std :: endl ; // 3 Base1 * r1 = reinterpret_cast < Base1 *> ( & sub ); Base2 * r2 = reinterpret_cast < Base2 *> ( & sub ); std :: cout << r1 -> x << std :: endl ; // 2 std :: cout << r2 -> y << std :: endl ; // 2 return 0 ; }","title":"\u30d3\u30c3\u30c8\u8868\u73fe\u306e\u5909\u63db"},{"location":"appendix-cast-details/#c","text":"C++ \u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u3092\u7121\u8996\u3057\u305f\u5909\u63db\u306a\u3069\u306f\u884c\u3048\u307e\u305b\u3093\u304c\u3001 C \u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u306a\u3089\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u3092\u7121\u8996\u3057\u305f\u5909\u63db\u304c\u5fc5\u8981\u3068\u306a\u308b\u306e\u306f\u30af\u30e9\u30b9\u8a2d\u8a08\u306b\u554f\u984c\u304c\u3042\u308b\u5834\u5408\u306a\u306e\u3067\u3001 C \u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u3092\u7528\u3044\u308b\u306e\u3067\u306f\u306a\u304f\u3001 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u3092\u4fee\u6b63\u3057\u3066 C++ \u306e\u30ad\u30e3\u30b9\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3057\u3087\u3046\u3002 \u8a73\u7d30\u306f \u660e\u793a\u7684\u306a\u578b\u5909\u63db - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"C++ \u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u3067\u304d\u306a\u3044\u3053\u3068"},{"location":"appendix-downcasts/","text":"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u00b6 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u304b\u3089\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u578b\u5909\u63db\u3092\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 C++ \u3067\u306f\u3001\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u3059\u308b\u969b\u306b dynamic_cast \u3084 static_cast \u3092\u4f7f\u3044\u307e\u3059\u3002 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u3057\u305f\u30af\u30e9\u30b9\u3092\u6271\u3046\u5834\u5408\u3001 \u30ad\u30e3\u30b9\u30c8\u5931\u6557\u3092\u8003\u616e\u3057\u305f\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u3063\u305f\u308a\u3001 \u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u9055\u53cd\u3092\u5f15\u304d\u8d77\u3053\u3059\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u308f\u306a\u3044\u3067\u6e08\u3080\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 dynamic_cast \u306b\u3088\u308b\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u00b6 dynamic_cast \u304c\u4f7f\u3048\u308b\u306e\u306f\u4eee\u60f3\u95a2\u6570\u3092\u6301\u3063\u305f\u30af\u30e9\u30b9\u306b\u9650\u5b9a\u3055\u308c\u307e\u3059\u3002 class Base { public : virtual ~ Base (){} }; class Sub1 : public Base {}; Sub1 * sub1 = dynamic_cast < Sub1 *> ( new Base ()); // \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 dynamic_cast \u306f\u4ed6\u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u3068\u7570\u306a\u308a\u3001\u5b9f\u884c\u6642\u306b\u30ad\u30e3\u30b9\u30c8\u306e\u6210\u5426\u3092\u5224\u65ad\u3057\u307e\u3059\u3002 dynamic_cast \u306f \u5b9f\u884c\u6642\u578b\u60c5\u5831 (RTTI) \u3092\u78ba\u8a8d\u3057\u305f\u4e0a\u3067\u3001\u7d99\u627f\u95a2\u4fc2\u304c\u4e0d\u6b63\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u30ad\u30e3\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\u3002 \u300c\u30dd\u30a4\u30f3\u30bf\u3067\u306e\u30ad\u30e3\u30b9\u30c8\u300d\u3068\u300c\u53c2\u7167\u3067\u306e\u30ad\u30e3\u30b9\u30c8\u300d\u3067\u306f\u3001\u5931\u6557\u6642\u306e\u6319\u52d5\u304c\u7570\u306a\u308a\u307e\u3059\u3002 \u30dd\u30a4\u30f3\u30bf\u3067\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u3001\u5931\u6557\u6642\u306b nullptr \u3092\u8fd4\u5374\u3057\u307e\u3059\u3002 class Base { public : virtual ~ Base (){} }; class Sub1 : public Base {}; class Sub2 : public Base {}; int main () { Base * base = new Sub1 ; Sub2 * sub2 = dynamic_cast < Sub2 *> ( base ); // \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 if ( sub2 == nullptr ) { std :: cout << \"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u5931\u6557\" << std :: endl ; } return 0 ; } \u53c2\u7167\u3067\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u3001\u5931\u6557\u6642\u306b std::bad_cast \u4f8b\u5916\u3092\u9001\u51fa\u3057\u307e\u3059\u3002 class Base { public : virtual ~ Base (){} }; class Sub1 : public Base {}; class Sub2 : public Base {}; int main () { try { Base * base = new Sub1 (); Sub2 & sub2 = dynamic_cast < Sub2 &> ( * base ); // \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 } catch ( const std :: bad_cast & ) { std :: cout << \"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u5931\u6557\" << std :: endl ; } return 0 ; } static_cast \u306b\u3088\u308b\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u00b6 \u30ad\u30e3\u30b9\u30c8\u5143\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u6b63\u3057\u304f\u30ad\u30e3\u30b9\u30c8\u5f8c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u81ea\u660e\u3067\u3042\u308c\u3070\u3001 static_cast \u3092\u5229\u7528\u3057\u3066\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 class Base { public : virtual ~ Base (){} }; class Sub1 : public Base { public : int x_ ; }; class Sub2 : public Base {} Base * base = new Sub1 (); // Sub1 \u304b\u3089\u306e\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8 Sub1 * sub1 = static_cast < Sub1 *> ( base ); // Sub1 \u3078\u306e\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 // base \u306e\u5b9f\u4f53\u306f Sub1 \u306a\u306e\u3067\u554f\u984c\u306a\u3057 static_cast \u306f dynamic_cast \u3068\u306f\u9055\u3044\u3001 \u5b9f\u884c\u6642\u306e\u578b\u306e\u60c5\u5831\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001 \u6b21\u306e\u3088\u3046\u306a\u5371\u967a\u306a\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3082\u51fa\u6765\u3066\u3057\u307e\u3044\u307e\u3059\u3002 static_cast \u306e\u5834\u5408\u3001\u30ad\u30e3\u30b9\u30c8\u304c\u6210\u529f\u3057\u3066\u3082\u52d5\u4f5c\u306f\u4fdd\u8a3c\u3055\u308c\u306a\u3044\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 class Base { public : virtual ~ Base (){} }; class Sub1 : public Base { public : int x_ ; }; class Sub2 : public Base {} Base * base = new Sub2 (); // Sub2 \u304b\u3089\u306e\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8 Sub1 * sub1 = static_cast < Sub1 *> ( base ); // Sub1 \u3078\u306e\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 sub1 -> x_ = 100 ; // sub1 \u306f Sub2 \u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u6307\u3057\u305f\u30dd\u30a4\u30f3\u30bf // Sub2 \u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u9818\u57df x_ \u3092\u53c2\u7167\u3057\u3088\u3046\u3068\u3057\u3066\u4e0d\u6b63\u306a\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u306b\u306a\u308b","title":"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8"},{"location":"appendix-downcasts/#_1","text":"\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u304b\u3089\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u578b\u5909\u63db\u3092\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 C++ \u3067\u306f\u3001\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u3059\u308b\u969b\u306b dynamic_cast \u3084 static_cast \u3092\u4f7f\u3044\u307e\u3059\u3002 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u3057\u305f\u30af\u30e9\u30b9\u3092\u6271\u3046\u5834\u5408\u3001 \u30ad\u30e3\u30b9\u30c8\u5931\u6557\u3092\u8003\u616e\u3057\u305f\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u3063\u305f\u308a\u3001 \u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u9055\u53cd\u3092\u5f15\u304d\u8d77\u3053\u3059\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u308f\u306a\u3044\u3067\u6e08\u3080\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002","title":"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8"},{"location":"appendix-downcasts/#dynamic_cast","text":"dynamic_cast \u304c\u4f7f\u3048\u308b\u306e\u306f\u4eee\u60f3\u95a2\u6570\u3092\u6301\u3063\u305f\u30af\u30e9\u30b9\u306b\u9650\u5b9a\u3055\u308c\u307e\u3059\u3002 class Base { public : virtual ~ Base (){} }; class Sub1 : public Base {}; Sub1 * sub1 = dynamic_cast < Sub1 *> ( new Base ()); // \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 dynamic_cast \u306f\u4ed6\u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u3068\u7570\u306a\u308a\u3001\u5b9f\u884c\u6642\u306b\u30ad\u30e3\u30b9\u30c8\u306e\u6210\u5426\u3092\u5224\u65ad\u3057\u307e\u3059\u3002 dynamic_cast \u306f \u5b9f\u884c\u6642\u578b\u60c5\u5831 (RTTI) \u3092\u78ba\u8a8d\u3057\u305f\u4e0a\u3067\u3001\u7d99\u627f\u95a2\u4fc2\u304c\u4e0d\u6b63\u3067\u3042\u3063\u305f\u5834\u5408\u3001\u30ad\u30e3\u30b9\u30c8\u306b\u5931\u6557\u3057\u307e\u3059\u3002 \u300c\u30dd\u30a4\u30f3\u30bf\u3067\u306e\u30ad\u30e3\u30b9\u30c8\u300d\u3068\u300c\u53c2\u7167\u3067\u306e\u30ad\u30e3\u30b9\u30c8\u300d\u3067\u306f\u3001\u5931\u6557\u6642\u306e\u6319\u52d5\u304c\u7570\u306a\u308a\u307e\u3059\u3002 \u30dd\u30a4\u30f3\u30bf\u3067\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u3001\u5931\u6557\u6642\u306b nullptr \u3092\u8fd4\u5374\u3057\u307e\u3059\u3002 class Base { public : virtual ~ Base (){} }; class Sub1 : public Base {}; class Sub2 : public Base {}; int main () { Base * base = new Sub1 ; Sub2 * sub2 = dynamic_cast < Sub2 *> ( base ); // \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 if ( sub2 == nullptr ) { std :: cout << \"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u5931\u6557\" << std :: endl ; } return 0 ; } \u53c2\u7167\u3067\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u3001\u5931\u6557\u6642\u306b std::bad_cast \u4f8b\u5916\u3092\u9001\u51fa\u3057\u307e\u3059\u3002 class Base { public : virtual ~ Base (){} }; class Sub1 : public Base {}; class Sub2 : public Base {}; int main () { try { Base * base = new Sub1 (); Sub2 & sub2 = dynamic_cast < Sub2 &> ( * base ); // \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 } catch ( const std :: bad_cast & ) { std :: cout << \"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u5931\u6557\" << std :: endl ; } return 0 ; }","title":"dynamic_cast \u306b\u3088\u308b\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8"},{"location":"appendix-downcasts/#static_cast","text":"\u30ad\u30e3\u30b9\u30c8\u5143\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u6b63\u3057\u304f\u30ad\u30e3\u30b9\u30c8\u5f8c\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u81ea\u660e\u3067\u3042\u308c\u3070\u3001 static_cast \u3092\u5229\u7528\u3057\u3066\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 class Base { public : virtual ~ Base (){} }; class Sub1 : public Base { public : int x_ ; }; class Sub2 : public Base {} Base * base = new Sub1 (); // Sub1 \u304b\u3089\u306e\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8 Sub1 * sub1 = static_cast < Sub1 *> ( base ); // Sub1 \u3078\u306e\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 // base \u306e\u5b9f\u4f53\u306f Sub1 \u306a\u306e\u3067\u554f\u984c\u306a\u3057 static_cast \u306f dynamic_cast \u3068\u306f\u9055\u3044\u3001 \u5b9f\u884c\u6642\u306e\u578b\u306e\u60c5\u5831\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001 \u6b21\u306e\u3088\u3046\u306a\u5371\u967a\u306a\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3082\u51fa\u6765\u3066\u3057\u307e\u3044\u307e\u3059\u3002 static_cast \u306e\u5834\u5408\u3001\u30ad\u30e3\u30b9\u30c8\u304c\u6210\u529f\u3057\u3066\u3082\u52d5\u4f5c\u306f\u4fdd\u8a3c\u3055\u308c\u306a\u3044\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 class Base { public : virtual ~ Base (){} }; class Sub1 : public Base { public : int x_ ; }; class Sub2 : public Base {} Base * base = new Sub2 (); // Sub2 \u304b\u3089\u306e\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8 Sub1 * sub1 = static_cast < Sub1 *> ( base ); // Sub1 \u3078\u306e\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 sub1 -> x_ = 100 ; // sub1 \u306f Sub2 \u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u6307\u3057\u305f\u30dd\u30a4\u30f3\u30bf // Sub2 \u306b\u306f\u5b58\u5728\u3057\u306a\u3044\u9818\u57df x_ \u3092\u53c2\u7167\u3057\u3088\u3046\u3068\u3057\u3066\u4e0d\u6b63\u306a\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u306b\u306a\u308b","title":"static_cast \u306b\u3088\u308b\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8"},{"location":"appendix-malloc-and-free/","text":"malloc/free \u00b6 C\u8a00\u8a9e\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570 malloc/free \u3092\u5229\u7528\u3057\u3066\u3001\u30d2\u30fc\u30d7\u306b\u30e1\u30e2\u30ea\u3092\u52d5\u7684\u306b\u78ba\u4fdd/\u89e3\u653e\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002 sizeof \u00b6 sizeof \u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u578b\u306e\u30d0\u30a4\u30c8\u5358\u4f4d\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u64cd\u4f5c\u3059\u308b\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b\u3068\u304d\u306b\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 \u74b0\u5883\u4f9d\u5b58 \u51fa\u529b\u3055\u308c\u308b\u30b5\u30a4\u30ba\u306f\u5b9f\u884c\u74b0\u5883\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 #include <iostream> double x = 3.14 ; std :: cout << sizeof ( 3 ) << std :: endl ; // 4 std :: cout << sizeof ( int ) << std :: endl ; // 4 std :: cout << sizeof ( x ) << std :: endl ; // 8 std :: cout << sizeof ( & x ) << std :: endl ; // 8 malloc \u00b6 \u30d2\u30fc\u30d7\u306b\u30e1\u30e2\u30ea\u3092\u52d5\u7684\u306b\u78ba\u4fdd\u3059\u308b\u5834\u5408\u306f malloc \u3092\u5229\u7528\u3057\u307e\u3059\u3002 #include <cstdlib> int * p1 = ( int * ) malloc ( sizeof ( int )); // (\u578b\u540d*)malloc(\u78ba\u4fdd\u3059\u308b\u9818\u57df\u306e\u30b5\u30a4\u30ba) int * p2 = ( int * ) malloc ( sizeof ( int ) * 5 ); // int[5] \u306e\u9818\u57df\u3092\u78ba\u4fdd\u3059\u308b\u5834\u5408 free \u00b6 \u30d2\u30fc\u30d7\u306b\u52d5\u7684\u306b\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u3092\u89e3\u653e\u3059\u308b\u5834\u5408\u306f free \u3092\u5229\u7528\u3057\u307e\u3059\u3002 #include <cstdlib> int * p = ( int * ) malloc ( sizeof ( int ) * 5 ); free ( p ); // \u30e1\u30e2\u30ea\u306e\u89e3\u653e malloc \u3092\u5229\u7528\u3057\u3066\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u306e\u89e3\u653e\u3092\u5fd8\u308c\u308b\u3068\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306b\u306a\u308a\u307e\u3059\u3002 malloc \u3068 free \u306f\u5fc5\u305a\u30bb\u30c3\u30c8\u3067\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002 new/delete\u3068\u306e\u9055\u3044 \u00b6 new/delete \u3068\u9055\u3044\u3001 malloc/free \u3067\u751f\u6210\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fb\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u547c\u3073\u51fa\u3057\u304c\u884c\u308f\u308c\u307e\u305b\u3093\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4e88\u671f\u305b\u306c\u52d5\u4f5c\u3092\u3059\u308b\u539f\u56e0\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3001\u57fa\u672c\u7684\u306b new/delete \u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 #include <cstdlib> class MyClass { public : MyClass () { std :: cout << \"MyClass' constructor is called.\" << std :: endl ; } ~ MyClass () { std :: cout << \"MyClass' destructor is called.\" << std :: endl ; } }; int main () { std :: cout << \"---new/delete---\" << std :: endl ; MyClass * mc1 = new MyClass (); delete mc1 ; std :: cout << \"---malloc/free---\" << std :: endl ; MyClass * mc2 = ( MyClass * ) malloc ( sizeof ( MyClass )); free ( mc2 ); return 0 ; } \u5b9f\u884c\u7d50\u679c ---new/delete--- MyClass' constructor is called. MyClass' destructor is called. ---malloc/free---","title":"malloc/free"},{"location":"appendix-malloc-and-free/#mallocfree","text":"C\u8a00\u8a9e\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570 malloc/free \u3092\u5229\u7528\u3057\u3066\u3001\u30d2\u30fc\u30d7\u306b\u30e1\u30e2\u30ea\u3092\u52d5\u7684\u306b\u78ba\u4fdd/\u89e3\u653e\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002","title":"malloc/free"},{"location":"appendix-malloc-and-free/#sizeof","text":"sizeof \u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u578b\u306e\u30d0\u30a4\u30c8\u5358\u4f4d\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\u64cd\u4f5c\u3059\u308b\u30e1\u30e2\u30ea\u306e\u30b5\u30a4\u30ba\u3092\u6307\u5b9a\u3059\u308b\u3068\u304d\u306b\u4f7f\u7528\u3055\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 \u74b0\u5883\u4f9d\u5b58 \u51fa\u529b\u3055\u308c\u308b\u30b5\u30a4\u30ba\u306f\u5b9f\u884c\u74b0\u5883\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002 #include <iostream> double x = 3.14 ; std :: cout << sizeof ( 3 ) << std :: endl ; // 4 std :: cout << sizeof ( int ) << std :: endl ; // 4 std :: cout << sizeof ( x ) << std :: endl ; // 8 std :: cout << sizeof ( & x ) << std :: endl ; // 8","title":"sizeof"},{"location":"appendix-malloc-and-free/#malloc","text":"\u30d2\u30fc\u30d7\u306b\u30e1\u30e2\u30ea\u3092\u52d5\u7684\u306b\u78ba\u4fdd\u3059\u308b\u5834\u5408\u306f malloc \u3092\u5229\u7528\u3057\u307e\u3059\u3002 #include <cstdlib> int * p1 = ( int * ) malloc ( sizeof ( int )); // (\u578b\u540d*)malloc(\u78ba\u4fdd\u3059\u308b\u9818\u57df\u306e\u30b5\u30a4\u30ba) int * p2 = ( int * ) malloc ( sizeof ( int ) * 5 ); // int[5] \u306e\u9818\u57df\u3092\u78ba\u4fdd\u3059\u308b\u5834\u5408","title":"malloc"},{"location":"appendix-malloc-and-free/#free","text":"\u30d2\u30fc\u30d7\u306b\u52d5\u7684\u306b\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u3092\u89e3\u653e\u3059\u308b\u5834\u5408\u306f free \u3092\u5229\u7528\u3057\u307e\u3059\u3002 #include <cstdlib> int * p = ( int * ) malloc ( sizeof ( int ) * 5 ); free ( p ); // \u30e1\u30e2\u30ea\u306e\u89e3\u653e malloc \u3092\u5229\u7528\u3057\u3066\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u306e\u89e3\u653e\u3092\u5fd8\u308c\u308b\u3068\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306b\u306a\u308a\u307e\u3059\u3002 malloc \u3068 free \u306f\u5fc5\u305a\u30bb\u30c3\u30c8\u3067\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002","title":"free"},{"location":"appendix-malloc-and-free/#newdelete","text":"new/delete \u3068\u9055\u3044\u3001 malloc/free \u3067\u751f\u6210\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fb\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u547c\u3073\u51fa\u3057\u304c\u884c\u308f\u308c\u307e\u305b\u3093\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4e88\u671f\u305b\u306c\u52d5\u4f5c\u3092\u3059\u308b\u539f\u56e0\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u306e\u3067\u3001\u57fa\u672c\u7684\u306b new/delete \u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9 #include <cstdlib> class MyClass { public : MyClass () { std :: cout << \"MyClass' constructor is called.\" << std :: endl ; } ~ MyClass () { std :: cout << \"MyClass' destructor is called.\" << std :: endl ; } }; int main () { std :: cout << \"---new/delete---\" << std :: endl ; MyClass * mc1 = new MyClass (); delete mc1 ; std :: cout << \"---malloc/free---\" << std :: endl ; MyClass * mc2 = ( MyClass * ) malloc ( sizeof ( MyClass )); free ( mc2 ); return 0 ; } \u5b9f\u884c\u7d50\u679c ---new/delete--- MyClass' constructor is called. MyClass' destructor is called. ---malloc/free---","title":"new/delete\u3068\u306e\u9055\u3044"},{"location":"appendix-preprocessor-directives/","text":"\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u53f8\u4ee4 \u00b6 \u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3046\u524d\u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u63db\u306a\u3069\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9 \u00b6 #include \u3067\u6307\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u305d\u306e\u5834\u306b\u5c55\u958b\u3057\u307e\u3059\u3002 \u5358\u7d14\u306a\u30d5\u30a1\u30a4\u30eb\u5c55\u958b\u3067\u3042\u308b\u305f\u3081\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u306a\u3069\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u306e\u6307\u5b9a\u306b\u306f \"...\" \u3068 <...> \u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002 <...> \u306f\u6a19\u6e96\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002 \u6a19\u6e96\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u4e00\u822c\u306b\u6b21\u306e\u3082\u306e\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002 C \u304a\u3088\u3073 C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u51e6\u7406\u7cfb\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea (Windows \u306b\u304a\u3051\u308b windows.h \u306a\u3069) \u30aa\u30d7\u30b7\u30e7\u30f3\u6307\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea (\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069) \"...\" \u306f\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002 \u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u306f <...> \u3068\u540c\u69d8\u306b\u6a19\u6e96\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002 \u30de\u30af\u30ed \u00b6 #define \u3067\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u3066\u6587\u5b57\u5217\u7f6e\u63db\u3092\u884c\u3044\u307e\u3059\u3002 \u5b9a\u7fa9\u3055\u308c\u305f\u30de\u30af\u30ed\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u307e\u3067\u6709\u52b9\u3067\u3059\u3002 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u9014\u4e2d\u3067\u7121\u52b9\u5316\u3059\u308b\u306b\u306f #undef \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f62\u5f0f \u00b6 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f62\u5f0f\u306e\u30de\u30af\u30ed\u306f\u56fa\u5b9a\u306e\u6587\u5b57\u5217\u3078\u7f6e\u63db\u3055\u308c\u307e\u3059\u3002 \u4e00\u822c\u306b\u5b9a\u6570\u3068\u3057\u3066\u5229\u7528\u3055\u308c\u307e\u3059\u304c\u3001 \u7279\u5225\u306a\u7406\u7531\u304c\u306a\u3044\u9650\u308a constexpr \u5909\u6570\u306e\u4f7f\u7528\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 #define BUFFER_SIZE 256 int main () { // `char buffer[256];` \u306b\u7f6e\u63db\u3055\u308c\u308b char buffer [ BUFFER_SIZE ]; return 0 ; } \u95a2\u6570\u5f62\u5f0f \u00b6 \u95a2\u6570\u5f62\u5f0f\u306e\u30de\u30af\u30ed\u306f\u5f15\u6570\u3092\u4f7f\u7528\u3057\u3066\u6587\u5b57\u5217\u3078\u7f6e\u63db\u3055\u308c\u307e\u3059\u3002 \u4e00\u822c\u306b\u578b\u306b\u4f9d\u5b58\u3057\u306a\u3044\u95a2\u6570\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u304c\u3001 \u7279\u5225\u306a\u7406\u7531\u304c\u306a\u3044\u9650\u308a\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4f7f\u7528\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 #include <iostream> #define ECHO(VALUE) VALUE int main () { // `std::cout << 2 << std::endl;` \u306b\u7f6e\u63db\u3055\u308c\u308b std :: cout << ECHO ( 2 ) << std :: endl ; // `std::cout << \"abc\" << std::endl;` \u306b\u7f6e\u63db\u3055\u308c\u308b std :: cout << ECHO ( \"abc\" ) << std :: endl ; return 0 ; } \u610f\u56f3\u3057\u306a\u3044\u6319\u52d5\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u7f6e\u63db\u5185\u5bb9\u306e\u5de5\u592b\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 #include <iostream> // VALUE1 \u3068 VALUE2 \u306e\u548c #define SUM(VALUE1, VALUE2) VALUE1 + VALUE2 int main () { // `1 + 2` \u306b\u7f6e\u63db\u3055\u308c\u308b int a = SUM ( 1 , 2 ); // `1 + 2 * 3` \u306b\u7f6e\u63db\u3055\u308c\u308b int b = SUM ( 1 , 2 ) * 3 ; std :: cout << a << std :: endl ; // 3 std :: cout << b << std :: endl ; // 7 (9 \u306b\u306a\u3089\u306a\u3044) return 0 ; } \u610f\u56f3\u901a\u308a\u306e\u6319\u52d5\u306b\u3059\u308b\u305f\u3081\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u62ec\u5f27\u3067\u56f2\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 // VALUE1 \u3068 VALUE2 \u306e\u548c #define SUM(VALUE1, VALUE2) (VALUE1 + VALUE2) \u4ed6\u306b\u3082\u6b21\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002 #include <iostream> // \u6761\u4ef6 EXPECTED \u304c\u6e80\u305f\u3055\u308c\u3066\u3044\u306a\u3044\u6642\u306b MESSAGE \u3092\u51fa\u529b // `\\` \u3067\u6539\u884c\u3067\u304d\u308b #define ERROR_LOG(EXPECTED, MESSAGE) \\ if (!(EXPECTED)) { \\ std::cout << MESSAGE << std::endl; \\ } int main () { // \u671f\u5f85\u901a\u308a\u306e\u52d5\u4f5c ERROR_LOG ( 1 > 0 , \"message1\" ); // true \u306a\u306e\u3067\u5b9f\u884c\u3055\u308c\u306a\u3044 ERROR_LOG ( 1 < 0 , \"message2\" ); // false \u306a\u306e\u3067\u5b9f\u884c\u3055\u308c\u308b // \u5c55\u958b\u3055\u308c\u308b\u3068\u30d6\u30ed\u30c3\u30af\u6709\u308a if \u6587\u306a\u306e\u3067\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u306a\u304f\u3066\u3082\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044 ERROR_LOG ( false , \"message3\" ) // \u30d6\u30ed\u30c3\u30af\u7121\u3057 if \u6587\u3067\u306f\u5236\u5fa1\u69cb\u9020\u304c\u5909\u5316\u3057\u3066\u3057\u307e\u3046 if ( false ) ERROR_LOG ( false , \"message4\" ) else ERROR_LOG ( false , \"message5\" ) // \u5b9f\u884c\u3055\u308c\u306a\u3044 return 0 ; } \u30d6\u30ed\u30c3\u30af\u7121\u3057 if \u6587\u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002 if ( false ) if ( ! ( false )) { std :: cout << \"message4\" << std :: endl ; } else if ( ! ( false )) { std :: cout << \"message5\" << std :: endl ; } \u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u6574\u5f62\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 if ( false ) if ( ! ( false )) { std :: cout << \"message4\" << std :: endl ; } else if ( ! ( false )) { std :: cout << \"message5\" << std :: endl ; } else \u304c if \u306e\u4e2d\u306b\u5165\u3063\u3066\u3057\u307e\u3044\u3001\u6b21\u306e if \u3068\u3064\u306a\u304c\u3063\u3066 else if \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u554f\u984c\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u306f \u8907\u6587\u30de\u30af\u30ed \u3068\u547c\u3070\u308c\u308b\u30a4\u30c7\u30a3\u30aa\u30e0\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #define ERROR_LOG(EXPECTED, MESSAGE) \\ do { \\ if (!(EXPECTED)) { \\ std::cout << MESSAGE << std::endl; \\ } \\ } while (false) \u5b9a\u7fa9\u6e08\u307f\u30de\u30af\u30ed \u00b6 \u5b9a\u7fa9\u6e08\u307f\u30de\u30af\u30ed\u306e\u4e00\u90e8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u4e00\u89a7\u306f \u30c6\u30ad\u30b9\u30c8\u30de\u30af\u30ed\u306e\u7f6e\u63db - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30d5\u30a1\u30a4\u30eb\u540d\u3068\u884c\u756a\u53f7 \u00b6 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3084\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u3068\u3057\u3066 __FILE__ \u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3001 __LINE__ \u3067\u884c\u756a\u53f7\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30ed\u30b0\u51fa\u529b\u3067\u306f\u3053\u308c\u3089\u306e\u5024\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u3001 \u30ed\u30b0\u51fa\u529b\u95a2\u6570\u3092\u95a2\u6570\u5f62\u5f0f\u306e\u30de\u30af\u30ed\u3067\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u3002 C++ \u30d0\u30fc\u30b8\u30e7\u30f3 \u00b6 __cplusplus \u3067\u4f7f\u7528\u3057\u3066\u3044\u308b C++ \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8868\u3059\u6570\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 C++11 \u3067\u3042\u308c\u3070 201103L \u3068\u3044\u3046\u5024\u306b\u7f6e\u63db\u3055\u308c\u307e\u3059\u3002 C++ \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5fdc\u3058\u3066\u6709\u52b9/\u7121\u52b9\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 \u6761\u4ef6 \u00b6 \u6b21\u306e\u53f8\u4ee4\u3067\u6761\u4ef6\u306b\u5fdc\u3058\u3066\u30b3\u30fc\u30c9\u306e\u6709\u52b9/\u7121\u52b9\u3092\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #if #elif #else #endif #include <iostream> int main () { #if true std :: cout << \"true\" << std :: endl ; // \u6709\u52b9 (\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b) #endif #if false std :: cout << \"false\" << std :: endl ; // \u7121\u52b9 (\u30b3\u30f3\u30d1\u30a4\u30eb\u524d\u306b\u524a\u9664\u3055\u308c\u308b) #endif #if false std :: cout << \"1\" << std :: endl ; // \u7121\u52b9 #elif true std :: cout << \"2\" << std :: endl ; // \u6709\u52b9 #else std :: cout << \"3\" << std :: endl ; // \u7121\u52b9 #endif return 0 ; } defined \u306b\u3088\u3063\u3066\u30de\u30af\u30ed\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u6761\u4ef6\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <iostream> // \u6761\u4ef6\u3060\u3051\u306b\u4f7f\u7528\u3059\u308b\u30de\u30af\u30ed\u306f\u7f6e\u63db\u6587\u5b57\u5217\u3092\u7a7a\u306b\u3059\u308b #define SAMPLE_A int main () { #if defined SAMPLE_A std :: cout << \"A\" << std :: endl ; // \u6709\u52b9 #endif #if defined SAMPLE_B std :: cout << \"B\" << std :: endl ; // \u7121\u52b9 #endif return 0 ; } #ifdef \u3068 #ifndef \u00b6 \u30de\u30af\u30ed\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u6761\u4ef6\u306f\u591a\u7528\u3055\u308c\u308b\u305f\u3081\u3001 #if defined \u306e\u77ed\u7e2e\u3068\u3057\u3066 #ifdef \u3001 \u5426\u5b9a #if !defined \u306e\u77ed\u7e2e\u3068\u3057\u3066 #ifndef \u3068\u3044\u3046\u53f8\u4ee4\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u3089\u3092\u6d3b\u7528\u3057\u3066\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u306f\u5b9f\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002 #ifndef SAMPLE_H_ #define SAMPLE_H_ // \u5185\u5bb9 #endif // SAMPLE_H_","title":"\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u53f8\u4ee4"},{"location":"appendix-preprocessor-directives/#_1","text":"\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3046\u524d\u306b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u63db\u306a\u3069\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002","title":"\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u53f8\u4ee4"},{"location":"appendix-preprocessor-directives/#_2","text":"#include \u3067\u6307\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u305d\u306e\u5834\u306b\u5c55\u958b\u3057\u307e\u3059\u3002 \u5358\u7d14\u306a\u30d5\u30a1\u30a4\u30eb\u5c55\u958b\u3067\u3042\u308b\u305f\u3081\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u306a\u3069\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u306e\u6307\u5b9a\u306b\u306f \"...\" \u3068 <...> \u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002 <...> \u306f\u6a19\u6e96\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002 \u6a19\u6e96\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306f\u4e00\u822c\u306b\u6b21\u306e\u3082\u306e\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002 C \u304a\u3088\u3073 C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea \u51e6\u7406\u7cfb\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea (Windows \u306b\u304a\u3051\u308b windows.h \u306a\u3069) \u30aa\u30d7\u30b7\u30e7\u30f3\u6307\u5b9a\u3055\u308c\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea (\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069) \"...\" \u306f\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002 \u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u306f <...> \u3068\u540c\u69d8\u306b\u6a19\u6e96\u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u3092\u691c\u7d22\u3057\u307e\u3059\u3002","title":"\u30a4\u30f3\u30af\u30eb\u30fc\u30c9"},{"location":"appendix-preprocessor-directives/#_3","text":"#define \u3067\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u3066\u6587\u5b57\u5217\u7f6e\u63db\u3092\u884c\u3044\u307e\u3059\u3002 \u5b9a\u7fa9\u3055\u308c\u305f\u30de\u30af\u30ed\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u672b\u5c3e\u307e\u3067\u6709\u52b9\u3067\u3059\u3002 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u9014\u4e2d\u3067\u7121\u52b9\u5316\u3059\u308b\u306b\u306f #undef \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"\u30de\u30af\u30ed"},{"location":"appendix-preprocessor-directives/#_4","text":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f62\u5f0f\u306e\u30de\u30af\u30ed\u306f\u56fa\u5b9a\u306e\u6587\u5b57\u5217\u3078\u7f6e\u63db\u3055\u308c\u307e\u3059\u3002 \u4e00\u822c\u306b\u5b9a\u6570\u3068\u3057\u3066\u5229\u7528\u3055\u308c\u307e\u3059\u304c\u3001 \u7279\u5225\u306a\u7406\u7531\u304c\u306a\u3044\u9650\u308a constexpr \u5909\u6570\u306e\u4f7f\u7528\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 #define BUFFER_SIZE 256 int main () { // `char buffer[256];` \u306b\u7f6e\u63db\u3055\u308c\u308b char buffer [ BUFFER_SIZE ]; return 0 ; }","title":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5f62\u5f0f"},{"location":"appendix-preprocessor-directives/#_5","text":"\u95a2\u6570\u5f62\u5f0f\u306e\u30de\u30af\u30ed\u306f\u5f15\u6570\u3092\u4f7f\u7528\u3057\u3066\u6587\u5b57\u5217\u3078\u7f6e\u63db\u3055\u308c\u307e\u3059\u3002 \u4e00\u822c\u306b\u578b\u306b\u4f9d\u5b58\u3057\u306a\u3044\u95a2\u6570\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u304c\u3001 \u7279\u5225\u306a\u7406\u7531\u304c\u306a\u3044\u9650\u308a\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u4f7f\u7528\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 #include <iostream> #define ECHO(VALUE) VALUE int main () { // `std::cout << 2 << std::endl;` \u306b\u7f6e\u63db\u3055\u308c\u308b std :: cout << ECHO ( 2 ) << std :: endl ; // `std::cout << \"abc\" << std::endl;` \u306b\u7f6e\u63db\u3055\u308c\u308b std :: cout << ECHO ( \"abc\" ) << std :: endl ; return 0 ; } \u610f\u56f3\u3057\u306a\u3044\u6319\u52d5\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u7f6e\u63db\u5185\u5bb9\u306e\u5de5\u592b\u304c\u5fc5\u8981\u3068\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 #include <iostream> // VALUE1 \u3068 VALUE2 \u306e\u548c #define SUM(VALUE1, VALUE2) VALUE1 + VALUE2 int main () { // `1 + 2` \u306b\u7f6e\u63db\u3055\u308c\u308b int a = SUM ( 1 , 2 ); // `1 + 2 * 3` \u306b\u7f6e\u63db\u3055\u308c\u308b int b = SUM ( 1 , 2 ) * 3 ; std :: cout << a << std :: endl ; // 3 std :: cout << b << std :: endl ; // 7 (9 \u306b\u306a\u3089\u306a\u3044) return 0 ; } \u610f\u56f3\u901a\u308a\u306e\u6319\u52d5\u306b\u3059\u308b\u305f\u3081\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u62ec\u5f27\u3067\u56f2\u3080\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 // VALUE1 \u3068 VALUE2 \u306e\u548c #define SUM(VALUE1, VALUE2) (VALUE1 + VALUE2) \u4ed6\u306b\u3082\u6b21\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002 #include <iostream> // \u6761\u4ef6 EXPECTED \u304c\u6e80\u305f\u3055\u308c\u3066\u3044\u306a\u3044\u6642\u306b MESSAGE \u3092\u51fa\u529b // `\\` \u3067\u6539\u884c\u3067\u304d\u308b #define ERROR_LOG(EXPECTED, MESSAGE) \\ if (!(EXPECTED)) { \\ std::cout << MESSAGE << std::endl; \\ } int main () { // \u671f\u5f85\u901a\u308a\u306e\u52d5\u4f5c ERROR_LOG ( 1 > 0 , \"message1\" ); // true \u306a\u306e\u3067\u5b9f\u884c\u3055\u308c\u306a\u3044 ERROR_LOG ( 1 < 0 , \"message2\" ); // false \u306a\u306e\u3067\u5b9f\u884c\u3055\u308c\u308b // \u5c55\u958b\u3055\u308c\u308b\u3068\u30d6\u30ed\u30c3\u30af\u6709\u308a if \u6587\u306a\u306e\u3067\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u306a\u304f\u3066\u3082\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044 ERROR_LOG ( false , \"message3\" ) // \u30d6\u30ed\u30c3\u30af\u7121\u3057 if \u6587\u3067\u306f\u5236\u5fa1\u69cb\u9020\u304c\u5909\u5316\u3057\u3066\u3057\u307e\u3046 if ( false ) ERROR_LOG ( false , \"message4\" ) else ERROR_LOG ( false , \"message5\" ) // \u5b9f\u884c\u3055\u308c\u306a\u3044 return 0 ; } \u30d6\u30ed\u30c3\u30af\u7121\u3057 if \u6587\u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002 if ( false ) if ( ! ( false )) { std :: cout << \"message4\" << std :: endl ; } else if ( ! ( false )) { std :: cout << \"message5\" << std :: endl ; } \u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u6574\u5f62\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 if ( false ) if ( ! ( false )) { std :: cout << \"message4\" << std :: endl ; } else if ( ! ( false )) { std :: cout << \"message5\" << std :: endl ; } else \u304c if \u306e\u4e2d\u306b\u5165\u3063\u3066\u3057\u307e\u3044\u3001\u6b21\u306e if \u3068\u3064\u306a\u304c\u3063\u3066 else if \u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u554f\u984c\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u306f \u8907\u6587\u30de\u30af\u30ed \u3068\u547c\u3070\u308c\u308b\u30a4\u30c7\u30a3\u30aa\u30e0\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #define ERROR_LOG(EXPECTED, MESSAGE) \\ do { \\ if (!(EXPECTED)) { \\ std::cout << MESSAGE << std::endl; \\ } \\ } while (false)","title":"\u95a2\u6570\u5f62\u5f0f"},{"location":"appendix-preprocessor-directives/#_6","text":"\u5b9a\u7fa9\u6e08\u307f\u30de\u30af\u30ed\u306e\u4e00\u90e8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u4e00\u89a7\u306f \u30c6\u30ad\u30b9\u30c8\u30de\u30af\u30ed\u306e\u7f6e\u63db - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u5b9a\u7fa9\u6e08\u307f\u30de\u30af\u30ed"},{"location":"appendix-preprocessor-directives/#_7","text":"\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3084\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u60c5\u5831\u3068\u3057\u3066 __FILE__ \u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3001 __LINE__ \u3067\u884c\u756a\u53f7\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30ed\u30b0\u51fa\u529b\u3067\u306f\u3053\u308c\u3089\u306e\u5024\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b\u3001 \u30ed\u30b0\u51fa\u529b\u95a2\u6570\u3092\u95a2\u6570\u5f62\u5f0f\u306e\u30de\u30af\u30ed\u3067\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u3002","title":"\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u884c\u756a\u53f7"},{"location":"appendix-preprocessor-directives/#c","text":"__cplusplus \u3067\u4f7f\u7528\u3057\u3066\u3044\u308b C++ \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8868\u3059\u6570\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 C++11 \u3067\u3042\u308c\u3070 201103L \u3068\u3044\u3046\u5024\u306b\u7f6e\u63db\u3055\u308c\u307e\u3059\u3002 C++ \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5fdc\u3058\u3066\u6709\u52b9/\u7121\u52b9\u3092\u5236\u5fa1\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002","title":"C++ \u30d0\u30fc\u30b8\u30e7\u30f3"},{"location":"appendix-preprocessor-directives/#_8","text":"\u6b21\u306e\u53f8\u4ee4\u3067\u6761\u4ef6\u306b\u5fdc\u3058\u3066\u30b3\u30fc\u30c9\u306e\u6709\u52b9/\u7121\u52b9\u3092\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #if #elif #else #endif #include <iostream> int main () { #if true std :: cout << \"true\" << std :: endl ; // \u6709\u52b9 (\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b) #endif #if false std :: cout << \"false\" << std :: endl ; // \u7121\u52b9 (\u30b3\u30f3\u30d1\u30a4\u30eb\u524d\u306b\u524a\u9664\u3055\u308c\u308b) #endif #if false std :: cout << \"1\" << std :: endl ; // \u7121\u52b9 #elif true std :: cout << \"2\" << std :: endl ; // \u6709\u52b9 #else std :: cout << \"3\" << std :: endl ; // \u7121\u52b9 #endif return 0 ; } defined \u306b\u3088\u3063\u3066\u30de\u30af\u30ed\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u6761\u4ef6\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <iostream> // \u6761\u4ef6\u3060\u3051\u306b\u4f7f\u7528\u3059\u308b\u30de\u30af\u30ed\u306f\u7f6e\u63db\u6587\u5b57\u5217\u3092\u7a7a\u306b\u3059\u308b #define SAMPLE_A int main () { #if defined SAMPLE_A std :: cout << \"A\" << std :: endl ; // \u6709\u52b9 #endif #if defined SAMPLE_B std :: cout << \"B\" << std :: endl ; // \u7121\u52b9 #endif return 0 ; }","title":"\u6761\u4ef6"},{"location":"appendix-preprocessor-directives/#ifdef-ifndef","text":"\u30de\u30af\u30ed\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u6761\u4ef6\u306f\u591a\u7528\u3055\u308c\u308b\u305f\u3081\u3001 #if defined \u306e\u77ed\u7e2e\u3068\u3057\u3066 #ifdef \u3001 \u5426\u5b9a #if !defined \u306e\u77ed\u7e2e\u3068\u3057\u3066 #ifndef \u3068\u3044\u3046\u53f8\u4ee4\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u3089\u3092\u6d3b\u7528\u3057\u3066\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u306f\u5b9f\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002 #ifndef SAMPLE_H_ #define SAMPLE_H_ // \u5185\u5bb9 #endif // SAMPLE_H_","title":"#ifdef \u3068 #ifndef"},{"location":"appendix-void-pointer/","text":"void \u30dd\u30a4\u30f3\u30bf \u00b6 \u578b\u3092\u3082\u305f\u306a\u3044\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u3046\u5834\u5408\u306b void \u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u3042\u3089\u3086\u308b\u30dd\u30a4\u30f3\u30bf\u306f void \u30dd\u30a4\u30f3\u30bf\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001 \u578b\u304c\u5fc5\u8981\u306a\u5834\u5408\u306b\u5b89\u5168\u3067\u306a\u3044\u30ad\u30e3\u30b9\u30c8\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002 \u578b\u306e\u975e\u516c\u958b \u00b6 void \u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3068 \u578b\u3092\u516c\u958b\u305b\u305a\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 integer.h #ifndef INTEGER_H_ #define INTEGER_H_ void * integer_create ( int v ); int integer_get ( const void * instance ); void integer_destroy ( void * instance ); #endif // INTEGER_H_ integer.cc #include \"integer.h\" namespace { class Integer { public : explicit Integer ( int x ) : x_ ( x ) {} int Get () const { return x_ ; } private : int x_ ; }; } // namespace void * integer_create ( int v ) { return new Integer ( v ); } int integer_get ( const void * instance ) { return reinterpret_cast < const Integer *> ( instance ) -> Get (); } void integer_destroy ( void * instance ) { delete reinterpret_cast < Integer *> ( instance ); } main.cc #include <iostream> #include \"integer.h\" int main () { void * obj = integer_create ( 5 ); std :: cout << integer_get ( obj ) << std :: endl ; integer_destroy ( obj ); obj = nullptr ; return 0 ; } \u3053\u306e\u4f8b\u3067\u306f Integer \u30af\u30e9\u30b9\u3092\u516c\u958b\u305b\u305a\u306b void \u30dd\u30a4\u30f3\u30bf\u3068\u3057\u3066\u6271\u3063\u3066\u3044\u307e\u3059\u3002 static_cast \u306b\u3088\u308b\u30ad\u30e3\u30b9\u30c8 \u00b6 void \u30dd\u30a4\u30f3\u30bf\u306f\u30dd\u30a4\u30f3\u30bf\u306e\u4e00\u7a2e\u3067\u3059\u304c\u3001 reinterpret_cast \u3067\u306f\u306a\u304f static_cast \u3067\u3082\u30ad\u30e3\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002 int integer_get ( const void * const instance ) { return static_cast < const Integer * const > ( instance ) -> Get (); } void integer_destroy ( void * instance ) { delete static_cast < Integer *> ( instance ); } C \u306b\u304a\u3051\u308b\u578b\u975e\u4f9d\u5b58\u306e\u51e6\u7406 \u00b6 C \u306b\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u306a\u3044\u305f\u3081\u3001 \u578b\u306b\u4f9d\u5b58\u3057\u306a\u3044\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u306b\u3082 void \u30dd\u30a4\u30f3\u30bf\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001\u4efb\u610f\u306e\u578b\u306e\u914d\u5217\u3092\u30bd\u30fc\u30c8\u3059\u308b C \u306e qsort \u306f\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <stdlib.h> int cmp_int ( const void * a , const void * b ) { int a_val = * ( const int * ) a ; int b_val = * ( const int * ) b ; if ( a_val < b_val ) { return - 1 ; } if ( a_val > b_val ) { return 1 ; } return 0 ; } int main () { int x [ 5 ] = { 1 , 5 , 2 , 4 , 3 }; qsort ( x , 5 , sizeof ( int ), cmp_int ); return 0 ; } C++ \u3067\u306f\u3053\u306e\u7528\u9014\u3067 void \u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u7528\u305b\u305a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"void \u30dd\u30a4\u30f3\u30bf"},{"location":"appendix-void-pointer/#void","text":"\u578b\u3092\u3082\u305f\u306a\u3044\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u3046\u5834\u5408\u306b void \u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u3042\u3089\u3086\u308b\u30dd\u30a4\u30f3\u30bf\u306f void \u30dd\u30a4\u30f3\u30bf\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001 \u578b\u304c\u5fc5\u8981\u306a\u5834\u5408\u306b\u5b89\u5168\u3067\u306a\u3044\u30ad\u30e3\u30b9\u30c8\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002","title":"void \u30dd\u30a4\u30f3\u30bf"},{"location":"appendix-void-pointer/#_1","text":"void \u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3068 \u578b\u3092\u516c\u958b\u305b\u305a\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 integer.h #ifndef INTEGER_H_ #define INTEGER_H_ void * integer_create ( int v ); int integer_get ( const void * instance ); void integer_destroy ( void * instance ); #endif // INTEGER_H_ integer.cc #include \"integer.h\" namespace { class Integer { public : explicit Integer ( int x ) : x_ ( x ) {} int Get () const { return x_ ; } private : int x_ ; }; } // namespace void * integer_create ( int v ) { return new Integer ( v ); } int integer_get ( const void * instance ) { return reinterpret_cast < const Integer *> ( instance ) -> Get (); } void integer_destroy ( void * instance ) { delete reinterpret_cast < Integer *> ( instance ); } main.cc #include <iostream> #include \"integer.h\" int main () { void * obj = integer_create ( 5 ); std :: cout << integer_get ( obj ) << std :: endl ; integer_destroy ( obj ); obj = nullptr ; return 0 ; } \u3053\u306e\u4f8b\u3067\u306f Integer \u30af\u30e9\u30b9\u3092\u516c\u958b\u305b\u305a\u306b void \u30dd\u30a4\u30f3\u30bf\u3068\u3057\u3066\u6271\u3063\u3066\u3044\u307e\u3059\u3002","title":"\u578b\u306e\u975e\u516c\u958b"},{"location":"appendix-void-pointer/#static_cast","text":"void \u30dd\u30a4\u30f3\u30bf\u306f\u30dd\u30a4\u30f3\u30bf\u306e\u4e00\u7a2e\u3067\u3059\u304c\u3001 reinterpret_cast \u3067\u306f\u306a\u304f static_cast \u3067\u3082\u30ad\u30e3\u30b9\u30c8\u3067\u304d\u307e\u3059\u3002 int integer_get ( const void * const instance ) { return static_cast < const Integer * const > ( instance ) -> Get (); } void integer_destroy ( void * instance ) { delete static_cast < Integer *> ( instance ); }","title":"static_cast \u306b\u3088\u308b\u30ad\u30e3\u30b9\u30c8"},{"location":"appendix-void-pointer/#c","text":"C \u306b\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u306a\u3044\u305f\u3081\u3001 \u578b\u306b\u4f9d\u5b58\u3057\u306a\u3044\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u306b\u3082 void \u30dd\u30a4\u30f3\u30bf\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u3001\u4efb\u610f\u306e\u578b\u306e\u914d\u5217\u3092\u30bd\u30fc\u30c8\u3059\u308b C \u306e qsort \u306f\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <stdlib.h> int cmp_int ( const void * a , const void * b ) { int a_val = * ( const int * ) a ; int b_val = * ( const int * ) b ; if ( a_val < b_val ) { return - 1 ; } if ( a_val > b_val ) { return 1 ; } return 0 ; } int main () { int x [ 5 ] = { 1 , 5 , 2 , 4 , 3 }; qsort ( x , 5 , sizeof ( int ), cmp_int ); return 0 ; } C++ \u3067\u306f\u3053\u306e\u7528\u9014\u3067 void \u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u7528\u305b\u305a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"C \u306b\u304a\u3051\u308b\u578b\u975e\u4f9d\u5b58\u306e\u51e6\u7406"},{"location":"ch01-01-installation/","text":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 \u30b3\u30f3\u30d1\u30a4\u30e9 \u00b6 C++ \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u591a\u304f\u306e\u30d9\u30f3\u30c0\u304c\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002 \u4ee3\u8868\u7684\u306a\u3082\u306e\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9 Linux macOS Windows GCC \ufe0f Clang Visual C++ GCC \u306f Linux \u3092\u30e1\u30a4\u30f3\u306b\u4f7f\u7528\u3055\u308c\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u304c\u3001 Linux \u4ee5\u5916\u306e\u4e3b\u8981\u306a\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001 \u4e00\u756a\u5b9f\u7e3e\u306e\u3042\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002 Clang \u306f\u8fd1\u5e74\u6ce8\u76ee\u3055\u308c\u3066\u3044\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3001 \u4eca\u5f8c\u306f GCC \u306b\u53d6\u3063\u3066\u4ee3\u308f\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002 \u672c\u66f8\u3067\u306f Windows \u7248\u306e GCC \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 GCC \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u306f msys2 \u3068\u3044\u3046\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 msys2 \u306f Linux \u3067\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30de\u30f3\u30c9\u306e\u4e00\u90e8\u3092 Windows \u306b\u79fb\u690d\u3057\u305f\u30c4\u30fc\u30eb\u30bb\u30c3\u30c8\u3067\u3059\u3002 msys2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 \u4e0b\u8a18\u306e msys2 \u306e\u516c\u5f0f\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 https://www.msys2.org/ \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306f msys2-i386-yyyymmdd.exe, msys2-x86_64-yyyymmdd.exe \u306e 2 \u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u524d\u8005\u304c 32 \u30d3\u30c3\u30c8\u7248\u3067\u5f8c\u8005\u304c 64 \u30d3\u30c3\u30c8\u7248\u306b\u306a\u308a\u307e\u3059\u3002 \u672c\u66f8\u3067\u306f 64 \u30d3\u30c3\u30c8\u7248\u3092\u3082\u3068\u306b\u8aac\u660e\u3059\u308b\u306e\u3067\u300164 \u30d3\u30c3\u30c8\u7248\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 GCC \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pacman -S gcc IDE \u00b6 C++ \u7528\u306e IDE \u3068\u3057\u3066\u306f Visual Studio Code \u304c\u4eba\u6c17\u3067\u3059\u3002 Visual Studio Code \u81ea\u4f53\u306f\u30a8\u30c7\u30a3\u30bf\u306a\u306e\u3067\u3059\u304c\u3001\u62e1\u5f35\u6a5f\u80fd\u3092\u5165\u308c\u308b\u3053\u3068\u3067 C++ \u5411\u3051\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u4e0b\u8a18\u30b5\u30a4\u30c8\u3088\u308a Visual Studio Code \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://code.visualstudio.com/ Visual Studio Code \u306e\u62e1\u5f35\u6a5f\u80fd\u3067\u3042\u308b C/C++ \u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 Visual Studio Code \u3092\u8d77\u52d5\u3057\u305f\u5f8c\u3001 Ctrl+Shift+X \u3092\u62bc\u3059\u3068 \u62e1\u5f35\u6a5f\u80fd\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u753b\u9762\u306b\u5207\u308a\u66ff\u308f\u308b\u306e\u3067\u3001 C/C++ \u3092\u691c\u7d22\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"1.1. \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ch01-01-installation/#_1","text":"","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ch01-01-installation/#_2","text":"C++ \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u591a\u304f\u306e\u30d9\u30f3\u30c0\u304c\u958b\u767a\u3057\u3066\u3044\u307e\u3059\u3002 \u4ee3\u8868\u7684\u306a\u3082\u306e\u306b\u306f\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9 Linux macOS Windows GCC \ufe0f Clang Visual C++ GCC \u306f Linux \u3092\u30e1\u30a4\u30f3\u306b\u4f7f\u7528\u3055\u308c\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u304c\u3001 Linux \u4ee5\u5916\u306e\u4e3b\u8981\u306a\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u3082\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001 \u4e00\u756a\u5b9f\u7e3e\u306e\u3042\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002 Clang \u306f\u8fd1\u5e74\u6ce8\u76ee\u3055\u308c\u3066\u3044\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3001 \u4eca\u5f8c\u306f GCC \u306b\u53d6\u3063\u3066\u4ee3\u308f\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3059\u3002 \u672c\u66f8\u3067\u306f Windows \u7248\u306e GCC \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 GCC \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u306f msys2 \u3068\u3044\u3046\u30c4\u30fc\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 msys2 \u306f Linux \u3067\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30de\u30f3\u30c9\u306e\u4e00\u90e8\u3092 Windows \u306b\u79fb\u690d\u3057\u305f\u30c4\u30fc\u30eb\u30bb\u30c3\u30c8\u3067\u3059\u3002","title":"\u30b3\u30f3\u30d1\u30a4\u30e9"},{"location":"ch01-01-installation/#msys2","text":"\u4e0b\u8a18\u306e msys2 \u306e\u516c\u5f0f\u30da\u30fc\u30b8\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3059\u3002 https://www.msys2.org/ \u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u306f msys2-i386-yyyymmdd.exe, msys2-x86_64-yyyymmdd.exe \u306e 2 \u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u524d\u8005\u304c 32 \u30d3\u30c3\u30c8\u7248\u3067\u5f8c\u8005\u304c 64 \u30d3\u30c3\u30c8\u7248\u306b\u306a\u308a\u307e\u3059\u3002 \u672c\u66f8\u3067\u306f 64 \u30d3\u30c3\u30c8\u7248\u3092\u3082\u3068\u306b\u8aac\u660e\u3059\u308b\u306e\u3067\u300164 \u30d3\u30c3\u30c8\u7248\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"msys2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ch01-01-installation/#gcc","text":"msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pacman -S gcc","title":"GCC \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"ch01-01-installation/#ide","text":"C++ \u7528\u306e IDE \u3068\u3057\u3066\u306f Visual Studio Code \u304c\u4eba\u6c17\u3067\u3059\u3002 Visual Studio Code \u81ea\u4f53\u306f\u30a8\u30c7\u30a3\u30bf\u306a\u306e\u3067\u3059\u304c\u3001\u62e1\u5f35\u6a5f\u80fd\u3092\u5165\u308c\u308b\u3053\u3068\u3067 C++ \u5411\u3051\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u4e0b\u8a18\u30b5\u30a4\u30c8\u3088\u308a Visual Studio Code \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 https://code.visualstudio.com/ Visual Studio Code \u306e\u62e1\u5f35\u6a5f\u80fd\u3067\u3042\u308b C/C++ \u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 Visual Studio Code \u3092\u8d77\u52d5\u3057\u305f\u5f8c\u3001 Ctrl+Shift+X \u3092\u62bc\u3059\u3068 \u62e1\u5f35\u6a5f\u80fd\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u753b\u9762\u306b\u5207\u308a\u66ff\u308f\u308b\u306e\u3067\u3001 C/C++ \u3092\u691c\u7d22\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"IDE"},{"location":"ch01-02-hello-world/","text":"Hello, World! \u00b6 Visual Studio Code \u4e0a\u3067 main.cc \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066 \u4e0b\u8a18\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 #include <iostream> int main () { std :: cout << \"Hello, World!\" << std :: endl ; return 0 ; } msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.cc \u6210\u529f\u3059\u308b\u3068 a.exe \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002 \u3053\u308c\u304c\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u306e\u3067\u3001\u5b9f\u884c\u3059\u308b\u3068 Hello, World! \u3068\u3044\u3046 \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 $ ./a.exe Hello, World!","title":"1.2. Hello, World!"},{"location":"ch01-02-hello-world/#hello-world","text":"Visual Studio Code \u4e0a\u3067 main.cc \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066 \u4e0b\u8a18\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 #include <iostream> int main () { std :: cout << \"Hello, World!\" << std :: endl ; return 0 ; } msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.cc \u6210\u529f\u3059\u308b\u3068 a.exe \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002 \u3053\u308c\u304c\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308b\u306e\u3067\u3001\u5b9f\u884c\u3059\u308b\u3068 Hello, World! \u3068\u3044\u3046 \u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002 $ ./a.exe Hello, World!","title":"Hello, World!"},{"location":"ch02-01-variables/","text":"\u5909\u6570 \u00b6 C++ \u3067\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 \u6574\u6570\u5024\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 int x = 5 ; int \u306f\u6574\u6570\u3092\u8868\u73fe\u3059\u308b\u578b\u3067\u3059\u3002 \u5ba3\u8a00\u6642\u306b\u521d\u671f\u5316\u3092\u305b\u305a\u306b\u3042\u3068\u3067\u5024\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 int x ; x = 5 ; \u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u307e\u307e\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u3068\u4e0d\u5b9a\u306a\u5024\u304c\u5165\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002 int x ; std :: cout << x << std :: endl ; // \u4e0d\u5b9a\u306a\u5024\u304c\u51fa\u529b\u3055\u308c\u308b const \u00b6 const \u3092\u4ed8\u3051\u308b\u3068\u5024\u306e\u66f8\u304d\u63db\u3048\u304c\u7981\u6b62\u3067\u304d\u307e\u3059\u3002 const int x = 5 ; x = 10 ; // \u30a8\u30e9\u30fc constexpr \u00b6 constexpr \u3092\u4ed8\u3051\u308b\u3068\u5b9a\u6570\u306b\u3067\u304d\u307e\u3059\u3002 constexpr int x = 5 ; const \u306e\u5024\u306f\u5b9f\u884c\u6642\u306b\u6c7a\u5b9a\u3057\u307e\u3059\u304c constexpr \u306e\u5024\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u5b9a\u3057\u307e\u3059\u3002 \u578b\u63a8\u8ad6 \u00b6 \u5909\u6570\u306e\u5ba3\u8a00\u6642\u306b\u306f\u660e\u793a\u7684\u306b\u578b\u3092\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082 auto \u3092\u4f7f\u3046\u3068 \u53f3\u8fba\u306e\u5024\u304b\u3089\u578b\u3092\u63a8\u8ad6\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 auto x = 5 ; // x \u306f int \u3068\u63a8\u8ad6","title":"2.1. \u5909\u6570"},{"location":"ch02-01-variables/#_1","text":"C++ \u3067\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 \u6574\u6570\u5024\u306e\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 int x = 5 ; int \u306f\u6574\u6570\u3092\u8868\u73fe\u3059\u308b\u578b\u3067\u3059\u3002 \u5ba3\u8a00\u6642\u306b\u521d\u671f\u5316\u3092\u305b\u305a\u306b\u3042\u3068\u3067\u5024\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 int x ; x = 5 ; \u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u307e\u307e\u5909\u6570\u3092\u4f7f\u7528\u3059\u308b\u3068\u4e0d\u5b9a\u306a\u5024\u304c\u5165\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002 int x ; std :: cout << x << std :: endl ; // \u4e0d\u5b9a\u306a\u5024\u304c\u51fa\u529b\u3055\u308c\u308b","title":"\u5909\u6570"},{"location":"ch02-01-variables/#const","text":"const \u3092\u4ed8\u3051\u308b\u3068\u5024\u306e\u66f8\u304d\u63db\u3048\u304c\u7981\u6b62\u3067\u304d\u307e\u3059\u3002 const int x = 5 ; x = 10 ; // \u30a8\u30e9\u30fc","title":"const"},{"location":"ch02-01-variables/#constexpr","text":"constexpr \u3092\u4ed8\u3051\u308b\u3068\u5b9a\u6570\u306b\u3067\u304d\u307e\u3059\u3002 constexpr int x = 5 ; const \u306e\u5024\u306f\u5b9f\u884c\u6642\u306b\u6c7a\u5b9a\u3057\u307e\u3059\u304c constexpr \u306e\u5024\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6c7a\u5b9a\u3057\u307e\u3059\u3002","title":"constexpr"},{"location":"ch02-01-variables/#_2","text":"\u5909\u6570\u306e\u5ba3\u8a00\u6642\u306b\u306f\u660e\u793a\u7684\u306b\u578b\u3092\u6307\u5b9a\u3057\u306a\u304f\u3066\u3082 auto \u3092\u4f7f\u3046\u3068 \u53f3\u8fba\u306e\u5024\u304b\u3089\u578b\u3092\u63a8\u8ad6\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 auto x = 5 ; // x \u306f int \u3068\u63a8\u8ad6","title":"\u578b\u63a8\u8ad6"},{"location":"ch02-02-primitive-types/","text":"\u57fa\u672c\u578b \u00b6 C++ \u3067\u306f\u3058\u3081\u304b\u3089\u4f7f\u7528\u3067\u304d\u308b\u57fa\u672c\u578b\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 bool \u00b6 bool \u306f\u771f\u507d\u5024\u3092\u8868\u3059\u578b\u3067 true \u307e\u305f\u306f false \u304c\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 bool ok = true ; char \u00b6 char \u306f\u30a2\u30b9\u30ad\u30fc\u6587\u5b571\u6587\u5b57\u3092\u8868\u73fe\u3059\u308b\u578b\u3067\u3059\u3002 \u305f\u3060\u3057\u5185\u90e8\u8868\u73fe\u306f\u30a2\u30b9\u30ad\u30fc\u30b3\u30fc\u30c9\u306e\u6574\u6570\u5024\u3068\u3057\u3066\u6271\u308f\u308c\u3001 \u6a19\u6e96\u51fa\u529b\u306a\u3069\u306b\u51fa\u529b\u3059\u308b\u969b\u306b\u6587\u5b57\u306b\u5909\u63db\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 char x = 'x' ; \u6570\u5024 \u00b6 \u6570\u5024\u3092\u8868\u73fe\u3059\u308b\u578b\u306f\u8907\u6570\u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u6574\u6570\u578b \u00b6 \u6574\u6570\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306e\u578b\u3067\u3059\u3002 char short int long \u4e0b\u306b\u884c\u304f\u306b\u9023\u308c\u3066\u5927\u304d\u306a\u5024\u304c\u8868\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u5909\u6570\u306e\u30b5\u30a4\u30ba\u3082\u5897\u5927\u3057\u307e\u3059\u3002 \u5177\u4f53\u7684\u306a\u30b5\u30a4\u30ba\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u304c GCC \u3067\u306f 8, 16, 32, 64 \u30d3\u30c3\u30c8\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4e00\u822c\u7684\u306b\u306f int \u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 \u7b26\u53f7\u4ed8\u304d\u30fb\u7b26\u53f7\u306a\u3057\u6574\u6570\u578b \u00b6 \u5404\u6574\u6570\u578b\u306b unsigned \u3092\u4ed8\u3051\u308b\u3068\u6b63\u306e\u6570\u3057\u304b\u8868\u73fe\u3067\u304d\u306a\u304f\u306a\u308b\u4ee3\u308f\u308a\u306b \u5927\u304d\u306a\u5024\u304c\u8868\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 unsigned int x = 4000000000 ; signed \u3092\u4ed8\u3051\u308b\u3068\u6b63\u8ca0\u4e21\u65b9\u306e\u5024\u304c\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 \u660e\u793a\u7684\u306b\u4ed8\u3051\u306a\u304f\u3066\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u306f signed \u306b\u306a\u308a\u307e\u3059\u3002 \u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b \u00b6 \u4e0a\u8ff0\u306e\u6574\u6570\u578b\u306f\u578b\u306e\u30b5\u30a4\u30ba\u304c\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u307e\u3061\u307e\u3061\u306a\u306e\u3067 \u8907\u6570\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f \u79fb\u690d\u6027\u306e\u9762\u3067\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u3068\u304d\u306f\u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int8_t int16_t int32_t int64_t uint8_t uint16_t uint32_t uint64_t \u6570\u5024\u306f\u578b\u306e\u30d3\u30c3\u30c8\u30b5\u30a4\u30ba\u3092\u8868\u3057\u3066\u304a\u308a\u3001u \u306f unsigned \u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002 \u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f #include <cstdint> \u3068\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 #include <cstdint> int32_t x = 5 ; \u6d6e\u52d5\u5c0f\u6570\u70b9\u578b \u00b6 \u5c0f\u6570\u3092\u8868\u73fe\u3059\u308b\u578b\u306f\u6b21\u306e2\u3064\u306e\u578b\u304c\u3042\u308a\u307e\u3059\u3002 float double float \u306f 32 \u30d3\u30c3\u30c8\u306e\u5927\u304d\u3055\u3092\u6301\u3061\u3001 double \u306f 64 \u30d3\u30c3\u30c8\u306e\u5927\u304d\u3055\u3092\u6301\u3061\u307e\u3059\u3002 \u307e\u305f double \u306e\u65b9\u304c float \u306b\u6bd4\u3079\u3066\u8a08\u7b97\u7cbe\u5ea6\u304c\u9ad8\u3044\u3067\u3059\u304c\u6570\u5024\u8a08\u7b97\u306e \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u4f4e\u3044\u3067\u3059\u3002 \u5217\u6319\u578b \u00b6 \u5217\u6319\u578b\u306f\u3001\u540d\u524d\u3092\u4ed8\u3051\u305f\u5b9a\u6570\uff08\u5217\u6319\u5b50\uff09\u306e\u96c6\u5408\u3092\u6271\u3046\u578b\u3067\u3059\u3002 enum \u00b6 \u5217\u6319\u578b\u3067\u3042\u308b enum \u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 enum Day { Sun , // 0 Mon , // 1 Tue , // 2 Wed , // 3 Thu , // 4 Fri , // 5 Sat // 6 }; enum \u306e\u5404\u5217\u6319\u5b50\u306f\u3001\u5185\u90e8\u3067\u306f\u6574\u6570\u3068\u3057\u3066\u6271\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u5404\u5217\u6319\u5b50\u306e\u5b9a\u7fa9\u306e\u969b\u306b\u5024\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3001 0 \u304b\u3089\u9806\u306b\u5024\u304c\u5272\u308a\u632f\u3089\u308c\u307e\u3059\u3002 \u5217\u6319\u5b50 = \u6574\u6570 \u3068\u66f8\u304f\u3053\u3068\u3067\u5024\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5217\u6319\u5b50\u4ee5\u964d\u306f\u3001\u9806\u306b\u6574\u6570\u304c\u5272\u308a\u632f\u3089\u308c\u307e\u3059\u3002 enum Day { Sun = 1 , // 1 Mon , // 2 Tue , // 3 Wed = 8 , // 8 Thu , // 9 Fri , // 10 Sat // 11 }; enum \u3092\u6271\u3046\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Day day = Fri ; \u6570\u5024\u578b\u306b enum \u306e\u5024\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c\u3001 enum \u306b\u6570\u5024\u3092\u76f4\u63a5\u4ee3\u5165\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u3002 int x = Fri ; // OK Day day = 5 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u5217\u6319\u5b50\u306e\u540d\u524d\u306f\u88ab\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 enum Day { Sun , Mon , Tue , Wed , Thu , Fri , Sat }; enum SolarSystem { Sun , // Sun \u306f enum Day \u5185\u3067\u5b9a\u7fa9\u6e08\u307f\u306e\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc Mercury , Venus , Earth , Mars , Jupiter , Saturn , Uranus , Neptune }; enum class \u00b6 enum class \u3067\u5217\u6319\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 enum class Day { Sun , Mon , Tue , Wed , Thu , Fri , Sat }; \u57fa\u672c\u7684\u306b\u306f enum \u3068\u540c\u3058\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002 enum class \u3092\u6271\u3046\u306b\u306f \u578b\u540d::\u5217\u6319\u5b50\u540d \u3068\u3057\u307e\u3059\u3002 Day day = Day :: Fri ; // OK Day day = Fri ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u660e\u793a\u7684\u306b\u578b\u5909\u63db\u3092\u3057\u306a\u3044\u9650\u308a\u3001\u6570\u5024\u578b\u306b enum class \u306e\u5024\u306e\u4ee3\u5165\u306f\u3067\u304d\u307e\u305b\u3093\u3002 int x = Day :: Fri ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u660e\u793a\u7684\u306a\u578b\u5909\u63db \u660e\u793a\u7684\u306b\u578b\u5909\u63db \u3092\u884c\u3046\u3053\u3068\u3067\u3001\u6570\u5024\u578b\u306a\u3069\u306b enum class \u306e\u5024\u306e\u4ee3\u5165\u304c\u53ef\u80fd\u3067\u3059\u3002 int x = static_cast < int > ( Day :: Fri ); enum class \u306e\u5834\u5408\u3001\u5217\u6319\u5b50\u306e\u540d\u524d\u306f\u578b\u3054\u3068\u306b\u533a\u5225\u3055\u308c\u308b\u305f\u3081\u3001 \u4ed6\u306e\u5217\u6319\u578b\u306e\u5217\u6319\u5b50\u3068\u540d\u524d\u304c\u88ab\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002 enum class Day { Sun , // Day::Sun Mon , Tue , Wed , Thu , Fri , Sat }; enum class SolarSystem { Sun , // Day::Sun \u3068 SolarSystem::Sun \u306f\u533a\u5225\u3055\u308c\u308b\u305f\u3081OK Mercury , Venus , Earth , Mars , Jupiter , Saturn , Uranus , Neptune };","title":"2.2. \u57fa\u672c\u578b"},{"location":"ch02-02-primitive-types/#_1","text":"C++ \u3067\u306f\u3058\u3081\u304b\u3089\u4f7f\u7528\u3067\u304d\u308b\u57fa\u672c\u578b\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002","title":"\u57fa\u672c\u578b"},{"location":"ch02-02-primitive-types/#bool","text":"bool \u306f\u771f\u507d\u5024\u3092\u8868\u3059\u578b\u3067 true \u307e\u305f\u306f false \u304c\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002 bool ok = true ;","title":"bool"},{"location":"ch02-02-primitive-types/#char","text":"char \u306f\u30a2\u30b9\u30ad\u30fc\u6587\u5b571\u6587\u5b57\u3092\u8868\u73fe\u3059\u308b\u578b\u3067\u3059\u3002 \u305f\u3060\u3057\u5185\u90e8\u8868\u73fe\u306f\u30a2\u30b9\u30ad\u30fc\u30b3\u30fc\u30c9\u306e\u6574\u6570\u5024\u3068\u3057\u3066\u6271\u308f\u308c\u3001 \u6a19\u6e96\u51fa\u529b\u306a\u3069\u306b\u51fa\u529b\u3059\u308b\u969b\u306b\u6587\u5b57\u306b\u5909\u63db\u3055\u308c\u3066\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 char x = 'x' ;","title":"char"},{"location":"ch02-02-primitive-types/#_2","text":"\u6570\u5024\u3092\u8868\u73fe\u3059\u308b\u578b\u306f\u8907\u6570\u7a2e\u985e\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u6570\u5024"},{"location":"ch02-02-primitive-types/#_3","text":"\u6574\u6570\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306e\u578b\u3067\u3059\u3002 char short int long \u4e0b\u306b\u884c\u304f\u306b\u9023\u308c\u3066\u5927\u304d\u306a\u5024\u304c\u8868\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u3001\u5909\u6570\u306e\u30b5\u30a4\u30ba\u3082\u5897\u5927\u3057\u307e\u3059\u3002 \u5177\u4f53\u7684\u306a\u30b5\u30a4\u30ba\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u304c GCC \u3067\u306f 8, 16, 32, 64 \u30d3\u30c3\u30c8\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u4e00\u822c\u7684\u306b\u306f int \u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002","title":"\u6574\u6570\u578b"},{"location":"ch02-02-primitive-types/#_4","text":"\u5404\u6574\u6570\u578b\u306b unsigned \u3092\u4ed8\u3051\u308b\u3068\u6b63\u306e\u6570\u3057\u304b\u8868\u73fe\u3067\u304d\u306a\u304f\u306a\u308b\u4ee3\u308f\u308a\u306b \u5927\u304d\u306a\u5024\u304c\u8868\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 unsigned int x = 4000000000 ; signed \u3092\u4ed8\u3051\u308b\u3068\u6b63\u8ca0\u4e21\u65b9\u306e\u5024\u304c\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 \u660e\u793a\u7684\u306b\u4ed8\u3051\u306a\u304f\u3066\u3082\u30c7\u30d5\u30a9\u30eb\u30c8\u306f signed \u306b\u306a\u308a\u307e\u3059\u3002","title":"\u7b26\u53f7\u4ed8\u304d\u30fb\u7b26\u53f7\u306a\u3057\u6574\u6570\u578b"},{"location":"ch02-02-primitive-types/#_5","text":"\u4e0a\u8ff0\u306e\u6574\u6570\u578b\u306f\u578b\u306e\u30b5\u30a4\u30ba\u304c\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u307e\u3061\u307e\u3061\u306a\u306e\u3067 \u8907\u6570\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f \u79fb\u690d\u6027\u306e\u9762\u3067\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u306e\u3088\u3046\u306a\u3068\u304d\u306f\u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int8_t int16_t int32_t int64_t uint8_t uint16_t uint32_t uint64_t \u6570\u5024\u306f\u578b\u306e\u30d3\u30c3\u30c8\u30b5\u30a4\u30ba\u3092\u8868\u3057\u3066\u304a\u308a\u3001u \u306f unsigned \u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002 \u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f #include <cstdint> \u3068\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 #include <cstdint> int32_t x = 5 ;","title":"\u30b5\u30a4\u30ba\u6307\u5b9a\u4ed8\u304d\u6574\u6570\u578b"},{"location":"ch02-02-primitive-types/#_6","text":"\u5c0f\u6570\u3092\u8868\u73fe\u3059\u308b\u578b\u306f\u6b21\u306e2\u3064\u306e\u578b\u304c\u3042\u308a\u307e\u3059\u3002 float double float \u306f 32 \u30d3\u30c3\u30c8\u306e\u5927\u304d\u3055\u3092\u6301\u3061\u3001 double \u306f 64 \u30d3\u30c3\u30c8\u306e\u5927\u304d\u3055\u3092\u6301\u3061\u307e\u3059\u3002 \u307e\u305f double \u306e\u65b9\u304c float \u306b\u6bd4\u3079\u3066\u8a08\u7b97\u7cbe\u5ea6\u304c\u9ad8\u3044\u3067\u3059\u304c\u6570\u5024\u8a08\u7b97\u306e \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u4f4e\u3044\u3067\u3059\u3002","title":"\u6d6e\u52d5\u5c0f\u6570\u70b9\u578b"},{"location":"ch02-02-primitive-types/#_7","text":"\u5217\u6319\u578b\u306f\u3001\u540d\u524d\u3092\u4ed8\u3051\u305f\u5b9a\u6570\uff08\u5217\u6319\u5b50\uff09\u306e\u96c6\u5408\u3092\u6271\u3046\u578b\u3067\u3059\u3002","title":"\u5217\u6319\u578b"},{"location":"ch02-02-primitive-types/#enum","text":"\u5217\u6319\u578b\u3067\u3042\u308b enum \u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 enum Day { Sun , // 0 Mon , // 1 Tue , // 2 Wed , // 3 Thu , // 4 Fri , // 5 Sat // 6 }; enum \u306e\u5404\u5217\u6319\u5b50\u306f\u3001\u5185\u90e8\u3067\u306f\u6574\u6570\u3068\u3057\u3066\u6271\u308f\u308c\u3066\u3044\u307e\u3059\u3002 \u5404\u5217\u6319\u5b50\u306e\u5b9a\u7fa9\u306e\u969b\u306b\u5024\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3001 0 \u304b\u3089\u9806\u306b\u5024\u304c\u5272\u308a\u632f\u3089\u308c\u307e\u3059\u3002 \u5217\u6319\u5b50 = \u6574\u6570 \u3068\u66f8\u304f\u3053\u3068\u3067\u5024\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u5024\u304c\u6307\u5b9a\u3055\u308c\u305f\u5217\u6319\u5b50\u4ee5\u964d\u306f\u3001\u9806\u306b\u6574\u6570\u304c\u5272\u308a\u632f\u3089\u308c\u307e\u3059\u3002 enum Day { Sun = 1 , // 1 Mon , // 2 Tue , // 3 Wed = 8 , // 8 Thu , // 9 Fri , // 10 Sat // 11 }; enum \u3092\u6271\u3046\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Day day = Fri ; \u6570\u5024\u578b\u306b enum \u306e\u5024\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c\u3001 enum \u306b\u6570\u5024\u3092\u76f4\u63a5\u4ee3\u5165\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u307e\u305b\u3093\u3002 int x = Fri ; // OK Day day = 5 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u5217\u6319\u5b50\u306e\u540d\u524d\u306f\u88ab\u3089\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 enum Day { Sun , Mon , Tue , Wed , Thu , Fri , Sat }; enum SolarSystem { Sun , // Sun \u306f enum Day \u5185\u3067\u5b9a\u7fa9\u6e08\u307f\u306e\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc Mercury , Venus , Earth , Mars , Jupiter , Saturn , Uranus , Neptune };","title":"enum"},{"location":"ch02-02-primitive-types/#enum-class","text":"enum class \u3067\u5217\u6319\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 enum class Day { Sun , Mon , Tue , Wed , Thu , Fri , Sat }; \u57fa\u672c\u7684\u306b\u306f enum \u3068\u540c\u3058\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u70b9\u304c\u7570\u306a\u308a\u307e\u3059\u3002 enum class \u3092\u6271\u3046\u306b\u306f \u578b\u540d::\u5217\u6319\u5b50\u540d \u3068\u3057\u307e\u3059\u3002 Day day = Day :: Fri ; // OK Day day = Fri ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u660e\u793a\u7684\u306b\u578b\u5909\u63db\u3092\u3057\u306a\u3044\u9650\u308a\u3001\u6570\u5024\u578b\u306b enum class \u306e\u5024\u306e\u4ee3\u5165\u306f\u3067\u304d\u307e\u305b\u3093\u3002 int x = Day :: Fri ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u660e\u793a\u7684\u306a\u578b\u5909\u63db \u660e\u793a\u7684\u306b\u578b\u5909\u63db \u3092\u884c\u3046\u3053\u3068\u3067\u3001\u6570\u5024\u578b\u306a\u3069\u306b enum class \u306e\u5024\u306e\u4ee3\u5165\u304c\u53ef\u80fd\u3067\u3059\u3002 int x = static_cast < int > ( Day :: Fri ); enum class \u306e\u5834\u5408\u3001\u5217\u6319\u5b50\u306e\u540d\u524d\u306f\u578b\u3054\u3068\u306b\u533a\u5225\u3055\u308c\u308b\u305f\u3081\u3001 \u4ed6\u306e\u5217\u6319\u578b\u306e\u5217\u6319\u5b50\u3068\u540d\u524d\u304c\u88ab\u3063\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002 enum class Day { Sun , // Day::Sun Mon , Tue , Wed , Thu , Fri , Sat }; enum class SolarSystem { Sun , // Day::Sun \u3068 SolarSystem::Sun \u306f\u533a\u5225\u3055\u308c\u308b\u305f\u3081OK Mercury , Venus , Earth , Mars , Jupiter , Saturn , Uranus , Neptune };","title":"enum class"},{"location":"ch02-03-literals/","text":"\u30ea\u30c6\u30e9\u30eb \u00b6 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\u8a18\u8ff0\u3055\u308c\u308b\u5b9a\u6570\u5024\u306e\u3053\u3068\u3092\u30ea\u30c6\u30e9\u30eb\u3068\u3044\u3044\u307e\u3059\u3002 \u672c\u9805\u3067\u306f\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\u4ed6\u306e\u30ea\u30c6\u30e9\u30eb\u306b\u3064\u3044\u3066\u306f \u5f0f - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6574\u6570\u30ea\u30c6\u30e9\u30eb \u00b6 \u6570\u5b57\u306e\u5148\u982d\u306b\u7279\u5b9a\u306e\u6587\u5b57\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u6574\u6570\u306e\u57fa\u6570\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 26 // 10\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 032 // \u5148\u982d\u306b0\u3092\u4ed8\u3051\u308b\u30688\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 0x1a // \u5148\u982d\u306b0x\u3092\u4ed8\u3051\u308b\u306816\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 0x1A // 16\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u5185\u306e\u6587\u5b57\u306f\u5c0f\u6587\u5b57\u3067\u3082\u5927\u6587\u5b57\u3067\u3082\u533a\u5225\u3055\u308c\u306a\u3044\u306e\u30670x1a\u3068\u540c\u3058 \u6570\u5b57\u306e\u672b\u5c3e\u306b\u6587\u5b57\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u6b21\u306e\u3088\u3046\u306a\u578b\u3092\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 26u // unsigned\u578b\u306e26 26l // long\u578b\u306e26 26ul // unsigned long\u578b\u306e26 0x1Aul // unsigned long\u578b\u306e0x1A","title":"2.3. \u30ea\u30c6\u30e9\u30eb"},{"location":"ch02-03-literals/#_1","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\u8a18\u8ff0\u3055\u308c\u308b\u5b9a\u6570\u5024\u306e\u3053\u3068\u3092\u30ea\u30c6\u30e9\u30eb\u3068\u3044\u3044\u307e\u3059\u3002 \u672c\u9805\u3067\u306f\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\u4ed6\u306e\u30ea\u30c6\u30e9\u30eb\u306b\u3064\u3044\u3066\u306f \u5f0f - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30ea\u30c6\u30e9\u30eb"},{"location":"ch02-03-literals/#_2","text":"\u6570\u5b57\u306e\u5148\u982d\u306b\u7279\u5b9a\u306e\u6587\u5b57\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u6574\u6570\u306e\u57fa\u6570\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 26 // 10\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 032 // \u5148\u982d\u306b0\u3092\u4ed8\u3051\u308b\u30688\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 0x1a // \u5148\u982d\u306b0x\u3092\u4ed8\u3051\u308b\u306816\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb 0x1A // 16\u9032\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u5185\u306e\u6587\u5b57\u306f\u5c0f\u6587\u5b57\u3067\u3082\u5927\u6587\u5b57\u3067\u3082\u533a\u5225\u3055\u308c\u306a\u3044\u306e\u30670x1a\u3068\u540c\u3058 \u6570\u5b57\u306e\u672b\u5c3e\u306b\u6587\u5b57\u3092\u52a0\u3048\u308b\u3053\u3068\u3067\u6b21\u306e\u3088\u3046\u306a\u578b\u3092\u8868\u73fe\u3067\u304d\u307e\u3059\u3002 26u // unsigned\u578b\u306e26 26l // long\u578b\u306e26 26ul // unsigned long\u578b\u306e26 0x1Aul // unsigned long\u578b\u306e0x1A","title":"\u6574\u6570\u30ea\u30c6\u30e9\u30eb"},{"location":"ch02-04-pointers/","text":"\u30dd\u30a4\u30f3\u30bf \u00b6 \u30dd\u30a4\u30f3\u30bf\u3068\u3044\u3046\u306e\u306f\u4ed6\u306e\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u4ed5\u7d44\u307f\u306e1\u3064\u3067\u3059\u3002 Windows \u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3084 Linux \u306e\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3068\u540c\u3058\u3088\u3046\u306a\u6a5f\u80fd\u3067\u3059\u3002 int x = 5 ; int * p = & x ; int* \u3068\u66f8\u304f\u3068 int \u578b\u306e\u5909\u6570\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u578b\u3068\u306a\u308a\u307e\u3059\u3002 &x \u3068\u3044\u3046\u306e\u306f x \u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\u305f\u3081\u306e\u6f14\u7b97\u3067\u3059\u3002 nullptr \u00b6 \u3069\u306e\u5909\u6570\u3082\u53c2\u7167\u3057\u3066\u3044\u306a\u3044\u30dd\u30a4\u30f3\u30bf\u306e\u3053\u3068\u3092\u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3068\u547c\u3073\u307e\u3059\u3002C++\u3067\u306f\u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3092\u8868\u3059\u30ad\u30fc\u30ef\u30fc\u30c9\u3068\u3057\u3066 nullptr \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 int * p = nullptr ; NULL \u30de\u30af\u30ed C++11 \u307e\u3067\u306f nullptr \u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u306a\u304f\u3001\u4ee3\u308f\u308a\u306b NULL \u3092\u4f7f\u7528\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3057\u305f\u3002 NULL \u306e\u5b9f\u4f53\u306f\u30dd\u30a4\u30f3\u30bf\u578b\u3067\u306f\u306a\u304f int \u578b\u306e 0 \u306a\u3069\u3067\u3042\u308b\u305f\u3081\u4e0d\u90fd\u5408\u304c\u751f\u3058\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3057\u305f\u3002 C++11 \u3067\u306f\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b nullptr \u304c\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u3002 \u305d\u306e\u305f\u3081 C++11 \u4ee5\u964d\u3067\u306f NULL \u3067\u306f\u306a\u304f nullptr \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u8a73\u7d30\u306f nullptr - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff08\u9006\u53c2\u7167\uff09 \u00b6 \u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5909\u6570\u306e\u5024\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002 int x = 5 ; int * p = & x ; int y = * p ; \u5909\u6570\u304b\u3089\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\u3068\u304d\u306b\u306f & \u3092\u4ed8\u3051\u3001\u30dd\u30a4\u30f3\u30bf\u304b\u3089\u5024\u3092\u5f97\u308b\u306b\u306f * \u3092\u4ed8\u3051\u307e\u3059\u3002 const\u30dd\u30a4\u30f3\u30bf \u00b6 \u30dd\u30a4\u30f3\u30bf\u578b\u306b const \u3092\u4ed8\u3051\u308b\u5834\u5408\u3001 const \u306e\u4ed8\u3051\u308b\u4f4d\u7f6e\u306b\u3088\u3063\u3066\u610f\u5473\u5408\u3044\u304c\u5909\u308f\u308a\u307e\u3059\u3002 * \u306e\u524d\u306b const \u3092\u4ed8\u3051\u308b\u3068\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u793a\u3059\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 int x = 123 ; const int * p = & x ; * p = 456 ; // \u30a8\u30e9\u30fc * \u306e\u5f8c\u306b const \u3092\u4ed8\u3051\u308b\u3068\u3001\u30dd\u30a4\u30f3\u30bf\u81ea\u8eab\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 int x = 123 ; int * const p = & x ; p = nullptr ; // \u30a8\u30e9\u30fc \u4f75\u7528\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 const int * const p = & x ; \u53c2\u7167 \u00b6 \u30dd\u30a4\u30f3\u30bf\u306b\u4f3c\u305f\u4ed5\u7d44\u307f\u3068\u3057\u3066\u53c2\u7167\u304c\u3042\u308a\u307e\u3059\u3002 int x = 100 ; int * p = & x ; // p\u306f\u30dd\u30a4\u30f3\u30bf\u578b int & r = x ; // r\u306f\u53c2\u7167\u578b * p = 200 ; r = 200 ; int& \u3068\u66f8\u304f\u3068 int \u306e\u53c2\u7167\u578b\u3068\u306a\u308a\u307e\u3059\u3002 \u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u793a\u3059\u5024\u3092\u6271\u3046\u306b\u306f * \u3092\u4ed8\u3051\u3066\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001 \u53c2\u7167\u3067\u306f\u4f55\u3082\u4ed8\u4e0e\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u3001\u898b\u305f\u76ee\u4e0a\u3067\u306f\u5024\u578b\u306e\u3088\u3046\u306b\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002","title":"2.4. \u30dd\u30a4\u30f3\u30bf"},{"location":"ch02-04-pointers/#_1","text":"\u30dd\u30a4\u30f3\u30bf\u3068\u3044\u3046\u306e\u306f\u4ed6\u306e\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u4ed5\u7d44\u307f\u306e1\u3064\u3067\u3059\u3002 Windows \u306e\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3084 Linux \u306e\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3068\u540c\u3058\u3088\u3046\u306a\u6a5f\u80fd\u3067\u3059\u3002 int x = 5 ; int * p = & x ; int* \u3068\u66f8\u304f\u3068 int \u578b\u306e\u5909\u6570\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u578b\u3068\u306a\u308a\u307e\u3059\u3002 &x \u3068\u3044\u3046\u306e\u306f x \u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\u305f\u3081\u306e\u6f14\u7b97\u3067\u3059\u3002","title":"\u30dd\u30a4\u30f3\u30bf"},{"location":"ch02-04-pointers/#nullptr","text":"\u3069\u306e\u5909\u6570\u3082\u53c2\u7167\u3057\u3066\u3044\u306a\u3044\u30dd\u30a4\u30f3\u30bf\u306e\u3053\u3068\u3092\u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3068\u547c\u3073\u307e\u3059\u3002C++\u3067\u306f\u30cc\u30eb\u30dd\u30a4\u30f3\u30bf\u3092\u8868\u3059\u30ad\u30fc\u30ef\u30fc\u30c9\u3068\u3057\u3066 nullptr \u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 int * p = nullptr ; NULL \u30de\u30af\u30ed C++11 \u307e\u3067\u306f nullptr \u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u306a\u304f\u3001\u4ee3\u308f\u308a\u306b NULL \u3092\u4f7f\u7528\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3057\u305f\u3002 NULL \u306e\u5b9f\u4f53\u306f\u30dd\u30a4\u30f3\u30bf\u578b\u3067\u306f\u306a\u304f int \u578b\u306e 0 \u306a\u3069\u3067\u3042\u308b\u305f\u3081\u4e0d\u90fd\u5408\u304c\u751f\u3058\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3057\u305f\u3002 C++11 \u3067\u306f\u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b nullptr \u304c\u5c0e\u5165\u3055\u308c\u307e\u3057\u305f\u3002 \u305d\u306e\u305f\u3081 C++11 \u4ee5\u964d\u3067\u306f NULL \u3067\u306f\u306a\u304f nullptr \u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u8a73\u7d30\u306f nullptr - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"nullptr"},{"location":"ch02-04-pointers/#_2","text":"\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5909\u6570\u306e\u5024\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002 int x = 5 ; int * p = & x ; int y = * p ; \u5909\u6570\u304b\u3089\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\u3068\u304d\u306b\u306f & \u3092\u4ed8\u3051\u3001\u30dd\u30a4\u30f3\u30bf\u304b\u3089\u5024\u3092\u5f97\u308b\u306b\u306f * \u3092\u4ed8\u3051\u307e\u3059\u3002","title":"\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\uff08\u9006\u53c2\u7167\uff09"},{"location":"ch02-04-pointers/#const","text":"\u30dd\u30a4\u30f3\u30bf\u578b\u306b const \u3092\u4ed8\u3051\u308b\u5834\u5408\u3001 const \u306e\u4ed8\u3051\u308b\u4f4d\u7f6e\u306b\u3088\u3063\u3066\u610f\u5473\u5408\u3044\u304c\u5909\u308f\u308a\u307e\u3059\u3002 * \u306e\u524d\u306b const \u3092\u4ed8\u3051\u308b\u3068\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u793a\u3059\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 int x = 123 ; const int * p = & x ; * p = 456 ; // \u30a8\u30e9\u30fc * \u306e\u5f8c\u306b const \u3092\u4ed8\u3051\u308b\u3068\u3001\u30dd\u30a4\u30f3\u30bf\u81ea\u8eab\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 int x = 123 ; int * const p = & x ; p = nullptr ; // \u30a8\u30e9\u30fc \u4f75\u7528\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 const int * const p = & x ;","title":"const\u30dd\u30a4\u30f3\u30bf"},{"location":"ch02-04-pointers/#_3","text":"\u30dd\u30a4\u30f3\u30bf\u306b\u4f3c\u305f\u4ed5\u7d44\u307f\u3068\u3057\u3066\u53c2\u7167\u304c\u3042\u308a\u307e\u3059\u3002 int x = 100 ; int * p = & x ; // p\u306f\u30dd\u30a4\u30f3\u30bf\u578b int & r = x ; // r\u306f\u53c2\u7167\u578b * p = 200 ; r = 200 ; int& \u3068\u66f8\u304f\u3068 int \u306e\u53c2\u7167\u578b\u3068\u306a\u308a\u307e\u3059\u3002 \u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3057\u793a\u3059\u5024\u3092\u6271\u3046\u306b\u306f * \u3092\u4ed8\u3051\u3066\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001 \u53c2\u7167\u3067\u306f\u4f55\u3082\u4ed8\u4e0e\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u305f\u3081\u3001\u898b\u305f\u76ee\u4e0a\u3067\u306f\u5024\u578b\u306e\u3088\u3046\u306b\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002","title":"\u53c2\u7167"},{"location":"ch02-05-comments/","text":"\u30b3\u30e1\u30f3\u30c8 \u00b6 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 // '//' \u3067\u59cb\u307e\u308b\u884c\u306f\u30b3\u30e1\u30f3\u30c8\u3068\u898b\u306a\u3055\u308c\u307e\u3059 int x = 5 ; // \u3053\u306e\u3088\u3046\u306b // \u8907\u6570\u884c\u306b\u307e\u305f\u304c\u3063\u3066 // \u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059 /* ... */ \u3067\u56f2\u307e\u308c\u305f\u884c\u3082\u30b3\u30e1\u30f3\u30c8\u3068\u898b\u306a\u3055\u308c\u307e\u3059\u3002 \u8907\u6570\u884c\u306b\u307e\u305f\u304c\u308b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304f\u6642\u306b\u4fbf\u5229\u3067\u3059\u3002 /* * \u9593\u306b\u73fe\u308c\u308b '*' \u306f\u66f8\u304b\u306a\u304f\u3066\u3082\u3044\u3044\u3067\u3059\u304c * \u7fd2\u6163\u7684\u306b\u66f8\u304f\u3053\u3068\u306e\u307b\u3046\u304c\u591a\u3044\u3067\u3059 */ /* ... */ \u306f\u5165\u308c\u5b50\u306b\u3057\u3066\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002 /* /* \u3053\u308c\u306f\u4e0d\u6b63\u306a\u30b3\u30e1\u30f3\u30c8\u3067\u3059 */ */","title":"2.5. \u30b3\u30e1\u30f3\u30c8"},{"location":"ch02-05-comments/#_1","text":"\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5185\u306b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 // '//' \u3067\u59cb\u307e\u308b\u884c\u306f\u30b3\u30e1\u30f3\u30c8\u3068\u898b\u306a\u3055\u308c\u307e\u3059 int x = 5 ; // \u3053\u306e\u3088\u3046\u306b // \u8907\u6570\u884c\u306b\u307e\u305f\u304c\u3063\u3066 // \u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059 /* ... */ \u3067\u56f2\u307e\u308c\u305f\u884c\u3082\u30b3\u30e1\u30f3\u30c8\u3068\u898b\u306a\u3055\u308c\u307e\u3059\u3002 \u8907\u6570\u884c\u306b\u307e\u305f\u304c\u308b\u30b3\u30e1\u30f3\u30c8\u3092\u66f8\u304f\u6642\u306b\u4fbf\u5229\u3067\u3059\u3002 /* * \u9593\u306b\u73fe\u308c\u308b '*' \u306f\u66f8\u304b\u306a\u304f\u3066\u3082\u3044\u3044\u3067\u3059\u304c * \u7fd2\u6163\u7684\u306b\u66f8\u304f\u3053\u3068\u306e\u307b\u3046\u304c\u591a\u3044\u3067\u3059 */ /* ... */ \u306f\u5165\u308c\u5b50\u306b\u3057\u3066\u4f7f\u3046\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044\u3002 /* /* \u3053\u308c\u306f\u4e0d\u6b63\u306a\u30b3\u30e1\u30f3\u30c8\u3067\u3059 */ */","title":"\u30b3\u30e1\u30f3\u30c8"},{"location":"ch02-06-control-flow/","text":"\u5236\u5fa1\u6587 \u00b6 if \u00b6 \u6761\u4ef6\u5206\u5c90\u3092\u3057\u305f\u3044\u6642\u306b\u306f if \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } if \u306e\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u4f55\u304b\u51e6\u7406\u3092\u3057\u305f\u3051\u308c\u3070 else \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } else { ... } \u3055\u3089\u306b\u5225\u306e\u6761\u4ef6\u3067\u51e6\u7406\u3092\u5206\u5c90\u3057\u305f\u3051\u308c\u3070 else if \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } else if ( x == 6 ) { ... } else { ... } switch \u00b6 \u4e00\u3064\u306e\u5909\u6570\u306e\u5024\u3092\u8abf\u3079\u306a\u304c\u3089\u5206\u5c90\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\u306f switch \u6587\u3092\u4f7f\u3044\u307e\u3059\u3002 switch ( x ) { case 0 : // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 break ; case 1 : // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 break ; default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 break ; } \u305f\u3060\u3057 switch \u6587\u304c\u4f7f\u7528\u3067\u304d\u308b\u306e\u306f\u57fa\u672c\u578b\u306e\u307f\u3067\u3059\u3002 \u4e0a\u8a18\u306e\u69cb\u6587\u306f if \u3067\u66f8\u304d\u76f4\u3059\u3068\u6b21\u3068\u7b49\u4fa1\u306b\u306a\u308a\u307e\u3059\u3002 if ( x == 0 ) { // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 } else if ( x == 1 ) { // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 } else { // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } \u305f\u3060\u3057 switch \u6587\u306e\u307b\u3046\u304c if \u3088\u308a\u3082\u6bd4\u8f03\u56de\u6570\u304c\u5c11\u306a\u3044\u305f\u3081\u52b9\u7387\u7684\u3067\u3059\u3002 if \u306f\u307e\u305a\u306f\u3058\u3081\u306b x == 0 \u304c true \u304b\u3069\u3046\u304b\u3092\u8abf\u3079 false \u3067\u3042\u308c\u3070 \u6b21\u306b x == 1 \u3092\u8a55\u4fa1\u3057\u307e\u3059\u304c\u3001 switch \u6587\u306f\u3044\u304d\u306a\u308a\u7279\u5b9a\u306e case \u306b\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002 \u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc \u00b6 switch \u306e\u5404 case \u5185\u306b\u66f8\u304b\u308c\u3066\u3044\u308b break \u306f\u66f8\u304b\u306a\u304f\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001 \u305d\u306e\u5834\u5408\u632f\u308b\u821e\u3044\u304c\u5909\u308f\u308a\u307e\u3059\u3002 switch ( x ) { case 0 : // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 case 1 : // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } break \u3092\u66f8\u3044\u305f\u5834\u5408\u306f switch \u6587\u306e\u51e6\u7406\u306f\u305d\u3053\u3067\u7d42\u308f\u308a\u307e\u3059\u304c\u3001 break \u3092\u66f8\u304b\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u305d\u306e\u307e\u307e\u4e0b\u306e case \u306b\u51e6\u7406\u304c\u6d41\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3064\u307e\u308a\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f x == 0 \u3067\u3042\u308c\u3070 case 0 \u5185\u306e\u51e6\u7406\u3092\u884c\u3063\u305f\u5f8c\u306b case 1 \u5185\u306e\u51e6\u7406\u3092\u884c\u3044\u3001\u6700\u5f8c\u306b default \u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 x == 1 \u3067\u3042\u308c\u3070\u540c\u69d8\u306e\u632f\u308b\u821e\u3044\u304c case 1 \u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a switch \u6587\u306e\u4ed5\u69d8\u3092\u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc\u3068\u8a00\u3044\u307e\u3059\u3002 \u3053\u308c\u306f case 0 \u3068 case 1 \u306e\u51e6\u7406\u304c\u540c\u3058\u3082\u306e\u306b\u306a\u308b\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002 switch ( x ) { case 0 : case 1 : // x == 0 \u307e\u305f\u306f x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } \u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc\u3092\u3055\u305b\u308b\u30b7\u30fc\u30f3\u306f\u307e\u305a\u306a\u3044\u305f\u3081\u3001 break \u3092\u5fd8\u308c\u305a\u306b\u4ed8\u3051\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 while \u00b6 while \u306f () \u306b\u6e21\u3055\u308c\u305f\u6761\u4ef6\u304c true \u3067\u3042\u308b\u9650\u308a { ... } \u5185\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u7d9a\u3051\u307e\u3059\u3002 int x = 5 ; bool done = false ; while ( ! done ) { x += x - 3 ; std :: cout << x << std :: endl ; if ( x % 5 == 0 ) { done = true ; } } do-while \u00b6 \u6700\u521d\u306e1\u56de\u306f\u7121\u6761\u4ef6\u3067 do { ... } \u5185\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3001 2\u56de\u76ee\u4ee5\u964d\u306f while () \u306b\u6e21\u3055\u308c\u305f\u6761\u4ef6\u304c true \u3067\u3042\u308b\u9650\u308a do { ... } \u5185\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u7d9a\u3051\u307e\u3059\u3002 int x = 5 ; bool done = false ; do { x += x - 3 ; std :: cout << x << std :: endl ; if ( x % 5 == 0 ) { done = true ; } } while ( ! done ); for \u00b6 for \u306f\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3073\u306b\u5909\u5316\u3059\u308b\u5909\u6570\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 for ( int i = 0 ; i < 10 ; ++ i ) { std :: cout << i << std :: endl ; } i \u306f\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3073\u306b 0, 1, 2, ..., 9 \u3068\u5024\u304c\u5909\u5316\u3057\u7d9a\u3051\u307e\u3059\u3002 for (int i = 0; i < 10; ++i) \u3068\u3044\u3046\u306e\u306f i \u306b 0 \u3092\u8a2d\u5b9a\u3057\u3066 i < 10 \u3092\u6e80\u305f\u3059\u307e\u3067 i \u3092 +1 \u3057\u306a\u304c\u3089\u30eb\u30fc\u30d7\u3092\u7d99\u7d9a\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002 for \u306f\u3053\u306e\u66f8\u304d\u65b9\u4ee5\u5916\u306b \u7bc4\u56f2 for \u3068\u3044\u3046\u66f8\u304d\u65b9\u3082\u3042\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f 3.9. \u7bc4\u56f2 for \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30eb\u30fc\u30d7\u51e6\u7406\u306e\u4e2d\u65ad \u00b6 \u30eb\u30fc\u30d7\u6587 while \u3001 do-while \u3001 for \u306e\u30eb\u30fc\u30d7\u51e6\u7406\u306f break \u307e\u305f\u306f continue \u3067\u4e2d\u65ad\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 break \u00b6 \u73fe\u5728\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u4e2d\u65ad\u3057\u3066\u30eb\u30fc\u30d7\u6587\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002 int x = 5 ; while ( true ) { x += x - 3 ; std :: cout << x << std :: endl ; if ( x % 5 == 0 ) { break ; // while \u6587\u3092\u629c\u3051\u308b } } \u30eb\u30fc\u30d7\u6587\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001\u6700\u3082\u5185\u5074\u306b\u3042\u308b\u6587\u306e\u307f\u304c\u5bfe\u8c61\u306b\u306a\u308a\u307e\u3059\u3002 for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { if ( i == j ) { break ; // j \u306e\u30eb\u30fc\u30d7\u6587\u3092\u629c\u3051\u308b } std :: cout << i << \",\" << j << std :: endl ; } } continue \u00b6 \u73fe\u5728\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u4e2d\u65ad\u3057\u3066\u3001\u6b21\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 for ( int i = 0 ; i < 10 ; ++ i ) { if ( i == 5 ) { continue ; // 5 \u3060\u3051\u30b9\u30ad\u30c3\u30d7 } std :: cout << i << std :: endl ; } \u30eb\u30fc\u30d7\u6587\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001\u6700\u3082\u5185\u5074\u306b\u3042\u308b\u6587\u306e\u307f\u304c\u5bfe\u8c61\u306b\u306a\u308a\u307e\u3059\u3002 for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { if ( i == j ) { continue ; // j \u306e\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u30b9\u30ad\u30c3\u30d7 } std :: cout << i << \",\" << j << std :: endl ; } } contiune \u3067\u306f\u6b21\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u3001 do-while \u3067\u306f\u5148\u982d\u306b\u623b\u308b\u306e\u3067\u306f\u306a\u304f\u672b\u5c3e\u3078\u79fb\u52d5\u3059\u308b\u52d5\u4f5c\u3068\u306a\u308a\u307e\u3059\u3002 do { std :: cout << \"done\" << std :: endl ; continue ; // \u30eb\u30fc\u30d7\u51e6\u7406\u3092\u30b9\u30ad\u30c3\u30d7 (\u5148\u982d\u306b\u623b\u308b\u52d5\u4f5c\u306a\u3089\u7121\u9650\u30eb\u30fc\u30d7\u3068\u306a\u308b) std :: cout << \"never reached\" << std :: endl ; // \u5b9f\u884c\u3055\u308c\u306a\u3044 } while ( false ); // \u6761\u4ef6\u304c false \u3067\u3042\u308b\u305f\u30811\u56de\u76ee\u3067\u7d42\u4e86","title":"2.6. \u5236\u5fa1\u6587"},{"location":"ch02-06-control-flow/#_1","text":"","title":"\u5236\u5fa1\u6587"},{"location":"ch02-06-control-flow/#if","text":"\u6761\u4ef6\u5206\u5c90\u3092\u3057\u305f\u3044\u6642\u306b\u306f if \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } if \u306e\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u4f55\u304b\u51e6\u7406\u3092\u3057\u305f\u3051\u308c\u3070 else \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } else { ... } \u3055\u3089\u306b\u5225\u306e\u6761\u4ef6\u3067\u51e6\u7406\u3092\u5206\u5c90\u3057\u305f\u3051\u308c\u3070 else if \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 int x = 5 ; if ( x == 5 ) { ... } else if ( x == 6 ) { ... } else { ... }","title":"if"},{"location":"ch02-06-control-flow/#switch","text":"\u4e00\u3064\u306e\u5909\u6570\u306e\u5024\u3092\u8abf\u3079\u306a\u304c\u3089\u5206\u5c90\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\u306f switch \u6587\u3092\u4f7f\u3044\u307e\u3059\u3002 switch ( x ) { case 0 : // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 break ; case 1 : // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 break ; default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 break ; } \u305f\u3060\u3057 switch \u6587\u304c\u4f7f\u7528\u3067\u304d\u308b\u306e\u306f\u57fa\u672c\u578b\u306e\u307f\u3067\u3059\u3002 \u4e0a\u8a18\u306e\u69cb\u6587\u306f if \u3067\u66f8\u304d\u76f4\u3059\u3068\u6b21\u3068\u7b49\u4fa1\u306b\u306a\u308a\u307e\u3059\u3002 if ( x == 0 ) { // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 } else if ( x == 1 ) { // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 } else { // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } \u305f\u3060\u3057 switch \u6587\u306e\u307b\u3046\u304c if \u3088\u308a\u3082\u6bd4\u8f03\u56de\u6570\u304c\u5c11\u306a\u3044\u305f\u3081\u52b9\u7387\u7684\u3067\u3059\u3002 if \u306f\u307e\u305a\u306f\u3058\u3081\u306b x == 0 \u304c true \u304b\u3069\u3046\u304b\u3092\u8abf\u3079 false \u3067\u3042\u308c\u3070 \u6b21\u306b x == 1 \u3092\u8a55\u4fa1\u3057\u307e\u3059\u304c\u3001 switch \u6587\u306f\u3044\u304d\u306a\u308a\u7279\u5b9a\u306e case \u306b\u30b8\u30e3\u30f3\u30d7\u3057\u307e\u3059\u3002","title":"switch"},{"location":"ch02-06-control-flow/#_2","text":"switch \u306e\u5404 case \u5185\u306b\u66f8\u304b\u308c\u3066\u3044\u308b break \u306f\u66f8\u304b\u306a\u304f\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001 \u305d\u306e\u5834\u5408\u632f\u308b\u821e\u3044\u304c\u5909\u308f\u308a\u307e\u3059\u3002 switch ( x ) { case 0 : // x == 0 \u306e\u3068\u304d\u306e\u51e6\u7406 case 1 : // x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } break \u3092\u66f8\u3044\u305f\u5834\u5408\u306f switch \u6587\u306e\u51e6\u7406\u306f\u305d\u3053\u3067\u7d42\u308f\u308a\u307e\u3059\u304c\u3001 break \u3092\u66f8\u304b\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u305d\u306e\u307e\u307e\u4e0b\u306e case \u306b\u51e6\u7406\u304c\u6d41\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3064\u307e\u308a\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f x == 0 \u3067\u3042\u308c\u3070 case 0 \u5185\u306e\u51e6\u7406\u3092\u884c\u3063\u305f\u5f8c\u306b case 1 \u5185\u306e\u51e6\u7406\u3092\u884c\u3044\u3001\u6700\u5f8c\u306b default \u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 x == 1 \u3067\u3042\u308c\u3070\u540c\u69d8\u306e\u632f\u308b\u821e\u3044\u304c case 1 \u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a switch \u6587\u306e\u4ed5\u69d8\u3092\u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc\u3068\u8a00\u3044\u307e\u3059\u3002 \u3053\u308c\u306f case 0 \u3068 case 1 \u306e\u51e6\u7406\u304c\u540c\u3058\u3082\u306e\u306b\u306a\u308b\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002 switch ( x ) { case 0 : case 1 : // x == 0 \u307e\u305f\u306f x == 1 \u306e\u3068\u304d\u306e\u51e6\u7406 default : // x \u304c\u305d\u308c\u4ee5\u5916\u306e\u3068\u304d\u306e\u51e6\u7406 } \u305d\u308c\u4ee5\u5916\u306e\u30b1\u30fc\u30b9\u3067\u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc\u3092\u3055\u305b\u308b\u30b7\u30fc\u30f3\u306f\u307e\u305a\u306a\u3044\u305f\u3081\u3001 break \u3092\u5fd8\u308c\u305a\u306b\u4ed8\u3051\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u30d5\u30a9\u30fc\u30eb\u30b9\u30eb\u30fc"},{"location":"ch02-06-control-flow/#while","text":"while \u306f () \u306b\u6e21\u3055\u308c\u305f\u6761\u4ef6\u304c true \u3067\u3042\u308b\u9650\u308a { ... } \u5185\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u7d9a\u3051\u307e\u3059\u3002 int x = 5 ; bool done = false ; while ( ! done ) { x += x - 3 ; std :: cout << x << std :: endl ; if ( x % 5 == 0 ) { done = true ; } }","title":"while"},{"location":"ch02-06-control-flow/#do-while","text":"\u6700\u521d\u306e1\u56de\u306f\u7121\u6761\u4ef6\u3067 do { ... } \u5185\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3001 2\u56de\u76ee\u4ee5\u964d\u306f while () \u306b\u6e21\u3055\u308c\u305f\u6761\u4ef6\u304c true \u3067\u3042\u308b\u9650\u308a do { ... } \u5185\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u7d9a\u3051\u307e\u3059\u3002 int x = 5 ; bool done = false ; do { x += x - 3 ; std :: cout << x << std :: endl ; if ( x % 5 == 0 ) { done = true ; } } while ( ! done );","title":"do-while"},{"location":"ch02-06-control-flow/#for","text":"for \u306f\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3073\u306b\u5909\u5316\u3059\u308b\u5909\u6570\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 for ( int i = 0 ; i < 10 ; ++ i ) { std :: cout << i << std :: endl ; } i \u306f\u30eb\u30fc\u30d7\u3059\u308b\u305f\u3073\u306b 0, 1, 2, ..., 9 \u3068\u5024\u304c\u5909\u5316\u3057\u7d9a\u3051\u307e\u3059\u3002 for (int i = 0; i < 10; ++i) \u3068\u3044\u3046\u306e\u306f i \u306b 0 \u3092\u8a2d\u5b9a\u3057\u3066 i < 10 \u3092\u6e80\u305f\u3059\u307e\u3067 i \u3092 +1 \u3057\u306a\u304c\u3089\u30eb\u30fc\u30d7\u3092\u7d99\u7d9a\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u306b\u306a\u308a\u307e\u3059\u3002 for \u306f\u3053\u306e\u66f8\u304d\u65b9\u4ee5\u5916\u306b \u7bc4\u56f2 for \u3068\u3044\u3046\u66f8\u304d\u65b9\u3082\u3042\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f 3.9. \u7bc4\u56f2 for \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"for"},{"location":"ch02-06-control-flow/#_3","text":"\u30eb\u30fc\u30d7\u6587 while \u3001 do-while \u3001 for \u306e\u30eb\u30fc\u30d7\u51e6\u7406\u306f break \u307e\u305f\u306f continue \u3067\u4e2d\u65ad\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u30eb\u30fc\u30d7\u51e6\u7406\u306e\u4e2d\u65ad"},{"location":"ch02-06-control-flow/#break","text":"\u73fe\u5728\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u4e2d\u65ad\u3057\u3066\u30eb\u30fc\u30d7\u6587\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002 int x = 5 ; while ( true ) { x += x - 3 ; std :: cout << x << std :: endl ; if ( x % 5 == 0 ) { break ; // while \u6587\u3092\u629c\u3051\u308b } } \u30eb\u30fc\u30d7\u6587\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001\u6700\u3082\u5185\u5074\u306b\u3042\u308b\u6587\u306e\u307f\u304c\u5bfe\u8c61\u306b\u306a\u308a\u307e\u3059\u3002 for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { if ( i == j ) { break ; // j \u306e\u30eb\u30fc\u30d7\u6587\u3092\u629c\u3051\u308b } std :: cout << i << \",\" << j << std :: endl ; } }","title":"break"},{"location":"ch02-06-control-flow/#continue","text":"\u73fe\u5728\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u4e2d\u65ad\u3057\u3066\u3001\u6b21\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 for ( int i = 0 ; i < 10 ; ++ i ) { if ( i == 5 ) { continue ; // 5 \u3060\u3051\u30b9\u30ad\u30c3\u30d7 } std :: cout << i << std :: endl ; } \u30eb\u30fc\u30d7\u6587\u304c\u30cd\u30b9\u30c8\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3001\u6700\u3082\u5185\u5074\u306b\u3042\u308b\u6587\u306e\u307f\u304c\u5bfe\u8c61\u306b\u306a\u308a\u307e\u3059\u3002 for ( int i = 0 ; i < 3 ; ++ i ) { for ( int j = 0 ; j < 3 ; ++ j ) { if ( i == j ) { continue ; // j \u306e\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u30b9\u30ad\u30c3\u30d7 } std :: cout << i << \",\" << j << std :: endl ; } } contiune \u3067\u306f\u6b21\u306e\u30eb\u30fc\u30d7\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u3001 do-while \u3067\u306f\u5148\u982d\u306b\u623b\u308b\u306e\u3067\u306f\u306a\u304f\u672b\u5c3e\u3078\u79fb\u52d5\u3059\u308b\u52d5\u4f5c\u3068\u306a\u308a\u307e\u3059\u3002 do { std :: cout << \"done\" << std :: endl ; continue ; // \u30eb\u30fc\u30d7\u51e6\u7406\u3092\u30b9\u30ad\u30c3\u30d7 (\u5148\u982d\u306b\u623b\u308b\u52d5\u4f5c\u306a\u3089\u7121\u9650\u30eb\u30fc\u30d7\u3068\u306a\u308b) std :: cout << \"never reached\" << std :: endl ; // \u5b9f\u884c\u3055\u308c\u306a\u3044 } while ( false ); // \u6761\u4ef6\u304c false \u3067\u3042\u308b\u305f\u30811\u56de\u76ee\u3067\u7d42\u4e86","title":"continue"},{"location":"ch02-07-operators/","text":"\u6f14\u7b97\u5b50 \u00b6 \u7b97\u8853\u6f14\u7b97\u5b50\u3092\u4e2d\u5fc3\u306b\u3001C++ \u3067\u5229\u7528\u3067\u304d\u308b\u6f14\u7b97\u5b50\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u672c\u9805\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u306a\u3044\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u306f \u5f0f - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u56db\u5247\u6f14\u7b97\u3068\u5270\u4f59 \u00b6 \u57fa\u672c\u7684\u306a\u6f14\u7b97\u306f\u6b21\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002 x + y ; // \u52a0\u7b97 x - y ; // \u6e1b\u7b97 x * y ; // \u4e57\u7b97 x / y ; // \u9664\u7b97 x % y ; // \u5270\u4f59 0 \u3067\u9664\u7b97(\u5270\u4f59)\u3092\u884c\u3046\u3068\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308b\u305f\u3081\u3001\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30bc\u30ed\u9664\u7b97 int div = 100 / 0 ; // \u5b9f\u884c\u6642\u30a8\u30e9\u30fc int mod = 100 % 0 ; // \u5b9f\u884c\u6642\u30a8\u30e9\u30fc \u6f14\u7b97\u306e\u5bfe\u8c61\u3068\u306a\u308b\u3044\u305a\u308c\u304b\u306e\u5024\u304c double ( float )\u306e\u5834\u5408\u3001 \u4ed6\u65b9\u306e\u5024\u3082 double ( float ) \u3068\u3057\u3066\u5909\u63db\u3055\u308c\u305f\u4e0a\u3067\u6f14\u7b97\u304c\u884c\u308f\u308c\u307e\u3059\u3002 int ix = 100 ; int iy = 50 ; double dx = 100.0 ; double dy = 50.0 ; auto a = ix / iy ; // int = int / int auto b = ix / dy ; // double = double(int\u304b\u3089\u5909\u63db) / double auto c = dx / iy ; // double = double / double(int\u304b\u3089\u5909\u63db) auto d = dx / dy ; // double = double / double \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 \u00b6 ++ x ; // \u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 x ++ ; // \u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 -- x ; // \u524d\u7f6e\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 x -- ; // \u5f8c\u7f6e\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 \u524d\u7f6e\u306e\u5834\u5408\u306f\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u6f14\u7b97\u304c\u5148\u306b\u884c\u308f\u308c\u307e\u3059\u3002 int a = 5 ; int b = 0 ; b = ++ a ; // a\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u304b\u3089\u3001b\u306b\u4ee3\u5165\u3059\u308b std :: cout << a << std :: endl ; // 6 std :: cout << b << std :: endl ; // 6 \u5bfe\u3057\u3066\u3001\u5f8c\u7f6e\u306e\u5834\u5408\u306f\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u6f14\u7b97\u4ee5\u5916\u306e\u51e6\u7406\u304c\u5148\u306b\u884c\u308f\u308c\u307e\u3059\u3002 int a = 5 ; int b = 0 ; b = a ++ ; // a\u3092b\u306b\u4ee3\u5165\u3057\u3066\u304b\u3089\u3001a\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b std :: cout << a << std :: endl ; // 6 std :: cout << b << std :: endl ; // 5 \u4f7f\u7528\u3059\u308b\u72b6\u6cc1\u306b\u3082\u4f9d\u308a\u307e\u3059\u304c\u3001 \u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3088\u308a\u3082\u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u307b\u3046\u304c\u52b9\u7387\u304c\u826f\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30d3\u30c3\u30c8\u306e\u6f14\u7b97 \u00b6 \u30d3\u30c3\u30c8\u306b\u5bfe\u3059\u308b\u6f14\u7b97\u306f\u6b21\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002 ~ x // \u5426\u5b9a x << y // \u5de6\u30b7\u30d5\u30c8 x >> b // \u53f3\u30b7\u30d5\u30c8 x & y // \u8ad6\u7406\u7a4d x | y // \u8ad6\u7406\u548c x ^ y // \u6392\u4ed6\u7684\u8ad6\u7406\u548c std::bitset \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d3\u30c3\u30c8\u5217(2\u9032\u6570)\u3067\u306e\u8868\u8a18\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 #include <bitset> #include <iostream> auto bits_a = std :: bitset < 8 > ( \"00001111\" ); // 15\u30928\u30d3\u30c3\u30c8\u3067\u8868\u3059: 00001111 std :: cout << ~ bits_a << std :: endl ; // \u5426\u5b9a: 11110000 std :: cout << ( bits_a << 2 ) << std :: endl ; // \u5de6\u306b2\u30b7\u30d5\u30c8: 00111100 std :: cout << ( bits_a >> 2 ) << std :: endl ; // \u53f3\u306b2\u30b7\u30d5\u30c8: 00000011 auto bits_b = std :: bitset < 8 > ( \"00111100\" ); // 60\u30928\u30d3\u30c3\u30c8\u3067\u8868\u3059: 00111100 std :: cout << ( bits_a & bits_b ) << std :: endl ; // \u8ad6\u7406\u7a4d: 00001100 std :: cout << ( bits_a | bits_b ) << std :: endl ; // \u8ad6\u7406\u548c: 00111111 std :: cout << ( bits_a ^ bits_b ) << std :: endl ; // \u6392\u4ed6\u7684\u8ad6\u7406\u548c: 00110011 \u6570\u5024\u578b\u3067\u3082\u30d3\u30c3\u30c8\u6f14\u7b97\u306f\u884c\u306a\u3048\u307e\u3059\u3002 \u30d3\u30c3\u30c8\u3092\u53d6\u308a\u6271\u3046\u969b\u306f\u3001 unsigned \u304c\u4ed8\u3044\u305f\u7b26\u53f7\u306a\u3057\u6574\u6570\u578b\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 unsigned int a = 0x0000000f ; // 15 std :: cout << std :: showbase << std :: hex ; // \u57fa\u6570\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u51fa\u529b + 16\u9032\u6cd5\u3067\u51fa\u529b std :: cout << ~ a << std :: endl ; // 0xfffffff0 std :: cout << ( a << 2 ) << std :: endl ; // 0x3c std :: cout << ( a >> 2 ) << std :: endl ; // 0x3 unsigned int b = 0x0000003c ; // 60 std :: cout << ( a & b ) << std :: endl ; // 0xc std :: cout << ( a | b ) << std :: endl ; // 0x3f std :: cout << ( a ^ b ) << std :: endl ; // 0x33 \u8907\u5408\u4ee3\u5165 \u00b6 \u7b97\u8853\u6f14\u7b97\u5b50\u3068\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u7b97\u8853\u3068\u4ee3\u5165\u3092\u540c\u6642\u306b\u884c\u3046\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 a += b // a = a + b \u3068\u540c\u3058 a -= b // a = a - b a *= b // a = a * b a /= b // a = a / b a %= b // a = a % b a &= b // a = a & b a |= b // a = a | b a ^= b // a = a ^ b a <<= b // a = a << b a >>= b // a = a >> b \u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u7b97\u8853\u6f14\u7b97\u5b50\u3088\u308a\u3082\u5f8c\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 \u8907\u5408\u4ee3\u5165\u3082\u3001\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u540c\u69d8\u306b\u7b97\u8853\u6f14\u7b97\u5b50\u3088\u308a\u3082\u5f8c\u306b\u89e3\u91c8\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 int x = 2 ; x *= 4 + 3 ; std :: cout << x << std :: endl ; // 14 int y = 2 ; y = y * 4 + 3 ; std :: cout << y << std :: endl ; // 11 \u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d \u6f14\u7b97\u5b50\u3054\u3068\u306b\u89e3\u91c8\u3055\u308c\u308b\u512a\u5148\u9806\u4f4d\u306f\u6c7a\u307e\u3063\u3066\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f C++\u306e\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"2.7. \u6f14\u7b97\u5b50"},{"location":"ch02-07-operators/#_1","text":"\u7b97\u8853\u6f14\u7b97\u5b50\u3092\u4e2d\u5fc3\u306b\u3001C++ \u3067\u5229\u7528\u3067\u304d\u308b\u6f14\u7b97\u5b50\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u672c\u9805\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u306a\u3044\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u306f \u5f0f - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u6f14\u7b97\u5b50"},{"location":"ch02-07-operators/#_2","text":"\u57fa\u672c\u7684\u306a\u6f14\u7b97\u306f\u6b21\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002 x + y ; // \u52a0\u7b97 x - y ; // \u6e1b\u7b97 x * y ; // \u4e57\u7b97 x / y ; // \u9664\u7b97 x % y ; // \u5270\u4f59 0 \u3067\u9664\u7b97(\u5270\u4f59)\u3092\u884c\u3046\u3068\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306b\u306a\u308b\u305f\u3081\u3001\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30bc\u30ed\u9664\u7b97 int div = 100 / 0 ; // \u5b9f\u884c\u6642\u30a8\u30e9\u30fc int mod = 100 % 0 ; // \u5b9f\u884c\u6642\u30a8\u30e9\u30fc \u6f14\u7b97\u306e\u5bfe\u8c61\u3068\u306a\u308b\u3044\u305a\u308c\u304b\u306e\u5024\u304c double ( float )\u306e\u5834\u5408\u3001 \u4ed6\u65b9\u306e\u5024\u3082 double ( float ) \u3068\u3057\u3066\u5909\u63db\u3055\u308c\u305f\u4e0a\u3067\u6f14\u7b97\u304c\u884c\u308f\u308c\u307e\u3059\u3002 int ix = 100 ; int iy = 50 ; double dx = 100.0 ; double dy = 50.0 ; auto a = ix / iy ; // int = int / int auto b = ix / dy ; // double = double(int\u304b\u3089\u5909\u63db) / double auto c = dx / iy ; // double = double / double(int\u304b\u3089\u5909\u63db) auto d = dx / dy ; // double = double / double","title":"\u56db\u5247\u6f14\u7b97\u3068\u5270\u4f59"},{"location":"ch02-07-operators/#_3","text":"++ x ; // \u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 x ++ ; // \u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8 -- x ; // \u524d\u7f6e\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 x -- ; // \u5f8c\u7f6e\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 \u524d\u7f6e\u306e\u5834\u5408\u306f\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u6f14\u7b97\u304c\u5148\u306b\u884c\u308f\u308c\u307e\u3059\u3002 int a = 5 ; int b = 0 ; b = ++ a ; // a\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u304b\u3089\u3001b\u306b\u4ee3\u5165\u3059\u308b std :: cout << a << std :: endl ; // 6 std :: cout << b << std :: endl ; // 6 \u5bfe\u3057\u3066\u3001\u5f8c\u7f6e\u306e\u5834\u5408\u306f\u3001\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u6f14\u7b97\u4ee5\u5916\u306e\u51e6\u7406\u304c\u5148\u306b\u884c\u308f\u308c\u307e\u3059\u3002 int a = 5 ; int b = 0 ; b = a ++ ; // a\u3092b\u306b\u4ee3\u5165\u3057\u3066\u304b\u3089\u3001a\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b std :: cout << a << std :: endl ; // 6 std :: cout << b << std :: endl ; // 5 \u4f7f\u7528\u3059\u308b\u72b6\u6cc1\u306b\u3082\u4f9d\u308a\u307e\u3059\u304c\u3001 \u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3088\u308a\u3082\u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306e\u307b\u3046\u304c\u52b9\u7387\u304c\u826f\u3044\u3068\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8"},{"location":"ch02-07-operators/#_4","text":"\u30d3\u30c3\u30c8\u306b\u5bfe\u3059\u308b\u6f14\u7b97\u306f\u6b21\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3053\u3068\u3067\u53ef\u80fd\u3067\u3059\u3002 ~ x // \u5426\u5b9a x << y // \u5de6\u30b7\u30d5\u30c8 x >> b // \u53f3\u30b7\u30d5\u30c8 x & y // \u8ad6\u7406\u7a4d x | y // \u8ad6\u7406\u548c x ^ y // \u6392\u4ed6\u7684\u8ad6\u7406\u548c std::bitset \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u30d3\u30c3\u30c8\u5217(2\u9032\u6570)\u3067\u306e\u8868\u8a18\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 #include <bitset> #include <iostream> auto bits_a = std :: bitset < 8 > ( \"00001111\" ); // 15\u30928\u30d3\u30c3\u30c8\u3067\u8868\u3059: 00001111 std :: cout << ~ bits_a << std :: endl ; // \u5426\u5b9a: 11110000 std :: cout << ( bits_a << 2 ) << std :: endl ; // \u5de6\u306b2\u30b7\u30d5\u30c8: 00111100 std :: cout << ( bits_a >> 2 ) << std :: endl ; // \u53f3\u306b2\u30b7\u30d5\u30c8: 00000011 auto bits_b = std :: bitset < 8 > ( \"00111100\" ); // 60\u30928\u30d3\u30c3\u30c8\u3067\u8868\u3059: 00111100 std :: cout << ( bits_a & bits_b ) << std :: endl ; // \u8ad6\u7406\u7a4d: 00001100 std :: cout << ( bits_a | bits_b ) << std :: endl ; // \u8ad6\u7406\u548c: 00111111 std :: cout << ( bits_a ^ bits_b ) << std :: endl ; // \u6392\u4ed6\u7684\u8ad6\u7406\u548c: 00110011 \u6570\u5024\u578b\u3067\u3082\u30d3\u30c3\u30c8\u6f14\u7b97\u306f\u884c\u306a\u3048\u307e\u3059\u3002 \u30d3\u30c3\u30c8\u3092\u53d6\u308a\u6271\u3046\u969b\u306f\u3001 unsigned \u304c\u4ed8\u3044\u305f\u7b26\u53f7\u306a\u3057\u6574\u6570\u578b\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 unsigned int a = 0x0000000f ; // 15 std :: cout << std :: showbase << std :: hex ; // \u57fa\u6570\u306e\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u51fa\u529b + 16\u9032\u6cd5\u3067\u51fa\u529b std :: cout << ~ a << std :: endl ; // 0xfffffff0 std :: cout << ( a << 2 ) << std :: endl ; // 0x3c std :: cout << ( a >> 2 ) << std :: endl ; // 0x3 unsigned int b = 0x0000003c ; // 60 std :: cout << ( a & b ) << std :: endl ; // 0xc std :: cout << ( a | b ) << std :: endl ; // 0x3f std :: cout << ( a ^ b ) << std :: endl ; // 0x33","title":"\u30d3\u30c3\u30c8\u306e\u6f14\u7b97"},{"location":"ch02-07-operators/#_5","text":"\u7b97\u8853\u6f14\u7b97\u5b50\u3068\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u7b97\u8853\u3068\u4ee3\u5165\u3092\u540c\u6642\u306b\u884c\u3046\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 a += b // a = a + b \u3068\u540c\u3058 a -= b // a = a - b a *= b // a = a * b a /= b // a = a / b a %= b // a = a % b a &= b // a = a & b a |= b // a = a | b a ^= b // a = a ^ b a <<= b // a = a << b a >>= b // a = a >> b \u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u7b97\u8853\u6f14\u7b97\u5b50\u3088\u308a\u3082\u5f8c\u306b\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 \u8907\u5408\u4ee3\u5165\u3082\u3001\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u540c\u69d8\u306b\u7b97\u8853\u6f14\u7b97\u5b50\u3088\u308a\u3082\u5f8c\u306b\u89e3\u91c8\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 int x = 2 ; x *= 4 + 3 ; std :: cout << x << std :: endl ; // 14 int y = 2 ; y = y * 4 + 3 ; std :: cout << y << std :: endl ; // 11 \u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d \u6f14\u7b97\u5b50\u3054\u3068\u306b\u89e3\u91c8\u3055\u308c\u308b\u512a\u5148\u9806\u4f4d\u306f\u6c7a\u307e\u3063\u3066\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f C++\u306e\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u8907\u5408\u4ee3\u5165"},{"location":"ch02-08-functions/","text":"\u95a2\u6570 \u00b6 C++\u3067\u306e\u95a2\u6570\u306e\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 \u95a2\u6570 HelloWorld() \u3092\u4f5c\u6210\u3057\u3001 main() \u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } int main () { HelloWorld ( 10 ); return 0 ; } \u3053\u3053\u3067\u6ce8\u76ee\u3059\u3079\u304d\u70b9\u306f\u3001\u95a2\u6570 HelloWorld() \u304c\u3001\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b10\u884c\u76ee\u3088\u308a\u4e0a\u306e\u884c\u3067\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u70b9\u3067\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e0a\u304b\u3089\u9806\u306b\u89e3\u91c8\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u5bfe\u3057\u3066 HelloWorld() \u304c\u4f55\u8005\u306a\u306e\u304b\u3092\u4e8b\u524d\u306b\u6559\u3048\u308b\u3053\u3068\u3067\u3001 HelloWorld() \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u304c\u884c\u306a\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u8a66\u3057\u306b HelloWorld() \u3092 main() \u3088\u308a\u3082\u4e0b\u306e\u884c\u306b\u8a18\u8ff0\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u5931\u6557\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> int main () { HelloWorld ( 10 ); // \u3053\u3053\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc return 0 ; } void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } 4\u884c\u76ee\u306e\u6642\u70b9\u3067\u306f\u3001 HelloWorld() \u304c\u4f55\u8005\u306a\u306e\u304b\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u306f\u7406\u89e3\u3067\u304d\u306a\u3044\u305f\u3081\u3067\u3059\u3002 \u95a2\u6570\u306e\u524d\u65b9\u5ba3\u8a00 \u00b6 \u95a2\u6570\u306e\u5ba3\u8a00\u306e\u307f\u3092\u547c\u3073\u51fa\u3057\u7b87\u6240\u3088\u308a\u3082\u4e0a\u306e\u884c\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\u95a2\u6570\u306e\u5b58\u5728\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6559\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> void HelloWorld ( int n ); // \u524d\u65b9\u5ba3\u8a00 int main () { HelloWorld ( 10 ); return 0 ; } void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } HelloWorld() \u306e\u672c\u4f53\u306f main() \u306e\u547c\u3073\u51fa\u3057\u7b87\u6240\u3088\u308a\u3082\u4e0b\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u524d\u65b9\u5ba3\u8a00\u304c\u3042\u308b\u3053\u3068\u3067\u554f\u984c\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u3059\u3002 \u5ba3\u8a00\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u306f\u3001 4.1. \u5ba3\u8a00\u3068\u5b9a\u7fa9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 main\u95a2\u6570 \u00b6 \u3053\u308c\u307e\u3067\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u5ea6\u3005\u73fe\u308c\u305f main() \u3092main\u95a2\u6570\u3068\u547c\u3073\u307e\u3059\u3002 C++\u3067\u751f\u6210\u3055\u308c\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001main\u95a2\u6570\u3092\u8d77\u70b9\u306b\u51e6\u7406\u304c\u9032\u307f\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570 \u00b6 main\u95a2\u6570\u306b\u3082\u5f15\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002main\u95a2\u6570\u306b\u6e21\u3055\u308c\u308b\u5f15\u6570\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u547c\u3073\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u7d9a\u3051\u3066\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u8907\u6570\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 # \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u540d <\u5f15\u65701> <\u5f15\u65702> <\u5f15\u65703> ... $ ./a.exe XXX YYY ZZZ \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u5834\u5408\u3001main\u95a2\u6570\u306e\u5f15\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 int main ( int argc , char * argv []); int argc : \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u500b\u6570\u3092\u8868\u3059 char* argv[] : \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u683c\u7d0d\u3055\u308c\u308b main.cc 1 2 3 4 5 6 7 8 9 #include <iostream> int main ( int argc , char * argv []) { for ( int i = 0 ; i < argc ; ++ i ) { std :: cout << \"argv[\" << i << \"]: \" << argv [ i ] << std :: endl ; } return 0 ; } # \u5b9f\u884c\u7d50\u679c $ ./a.exe Hello World! argv [ 0 ] : ./a.exe argv [ 1 ] : Hello argv [ 2 ] : World! \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 \u00b6 \u95a2\u6570\u306e\u5f15\u6570\u306e\u500b\u6570\u3084\u578b\u304c\u7570\u306a\u308b\u5834\u5408\u3001\u540c\u3058\u540d\u524d\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u3053\u308c\u3092\uff08\u95a2\u6570\u306e\uff09\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3068\u547c\u3073\u307e\u3059\u3002\u5f15\u6570\u306e\u500b\u6570\u3084\u578b\u306e\u60c5\u5831\u3092\u5143\u306b\u547c\u3073\u51fa\u3059\u95a2\u6570\u3092\u6c7a\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> void Print ( int x ) { std :: cout << \"int: \" << x << std :: endl ; } void Print ( double x ) { std :: cout << \"double: \" << x << std :: endl ; } int main () { Print ( 2 ); Print ( 2.1 ); return 0 ; } # \u5b9f\u884c\u7d50\u679c $ ./a.exe int: 2 double: 2 .1","title":"2.8. \u95a2\u6570"},{"location":"ch02-08-functions/#_1","text":"C++\u3067\u306e\u95a2\u6570\u306e\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002 \u95a2\u6570 HelloWorld() \u3092\u4f5c\u6210\u3057\u3001 main() \u304b\u3089\u547c\u3073\u51fa\u3057\u3066\u5229\u7528\u3059\u308b\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } int main () { HelloWorld ( 10 ); return 0 ; } \u3053\u3053\u3067\u6ce8\u76ee\u3059\u3079\u304d\u70b9\u306f\u3001\u95a2\u6570 HelloWorld() \u304c\u3001\u547c\u3073\u51fa\u3055\u308c\u3066\u3044\u308b10\u884c\u76ee\u3088\u308a\u4e0a\u306e\u884c\u3067\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u70b9\u3067\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e0a\u304b\u3089\u9806\u306b\u89e3\u91c8\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u5bfe\u3057\u3066 HelloWorld() \u304c\u4f55\u8005\u306a\u306e\u304b\u3092\u4e8b\u524d\u306b\u6559\u3048\u308b\u3053\u3068\u3067\u3001 HelloWorld() \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u304c\u884c\u306a\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 \u8a66\u3057\u306b HelloWorld() \u3092 main() \u3088\u308a\u3082\u4e0b\u306e\u884c\u306b\u8a18\u8ff0\u3059\u308b\u3068\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u5931\u6557\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 #include <iostream> int main () { HelloWorld ( 10 ); // \u3053\u3053\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc return 0 ; } void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } 4\u884c\u76ee\u306e\u6642\u70b9\u3067\u306f\u3001 HelloWorld() \u304c\u4f55\u8005\u306a\u306e\u304b\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u306f\u7406\u89e3\u3067\u304d\u306a\u3044\u305f\u3081\u3067\u3059\u3002","title":"\u95a2\u6570"},{"location":"ch02-08-functions/#_2","text":"\u95a2\u6570\u306e\u5ba3\u8a00\u306e\u307f\u3092\u547c\u3073\u51fa\u3057\u7b87\u6240\u3088\u308a\u3082\u4e0a\u306e\u884c\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\u95a2\u6570\u306e\u5b58\u5728\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u6559\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> void HelloWorld ( int n ); // \u524d\u65b9\u5ba3\u8a00 int main () { HelloWorld ( 10 ); return 0 ; } void HelloWorld ( int n ) { for ( int i = 0 ; i < n ; ++ i ) { std :: cout << \"[\" << i << \"] \" << \"Hello World!\" << std :: endl ; } } HelloWorld() \u306e\u672c\u4f53\u306f main() \u306e\u547c\u3073\u51fa\u3057\u7b87\u6240\u3088\u308a\u3082\u4e0b\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u524d\u65b9\u5ba3\u8a00\u304c\u3042\u308b\u3053\u3068\u3067\u554f\u984c\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u3059\u3002 \u5ba3\u8a00\u306b\u3064\u3044\u3066\u306e\u8a73\u7d30\u306f\u3001 4.1. \u5ba3\u8a00\u3068\u5b9a\u7fa9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u95a2\u6570\u306e\u524d\u65b9\u5ba3\u8a00"},{"location":"ch02-08-functions/#main","text":"\u3053\u308c\u307e\u3067\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u5ea6\u3005\u73fe\u308c\u305f main() \u3092main\u95a2\u6570\u3068\u547c\u3073\u307e\u3059\u3002 C++\u3067\u751f\u6210\u3055\u308c\u305f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001main\u95a2\u6570\u3092\u8d77\u70b9\u306b\u51e6\u7406\u304c\u9032\u307f\u307e\u3059\u3002","title":"main\u95a2\u6570"},{"location":"ch02-08-functions/#_3","text":"main\u95a2\u6570\u306b\u3082\u5f15\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002main\u95a2\u6570\u306b\u6e21\u3055\u308c\u308b\u5f15\u6570\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u547c\u3073\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u7d9a\u3051\u3066\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u3067\u8907\u6570\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 # \u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u540d <\u5f15\u65701> <\u5f15\u65702> <\u5f15\u65703> ... $ ./a.exe XXX YYY ZZZ \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\u5834\u5408\u3001main\u95a2\u6570\u306e\u5f15\u6570\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 int main ( int argc , char * argv []); int argc : \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306e\u500b\u6570\u3092\u8868\u3059 char* argv[] : \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u304c\u683c\u7d0d\u3055\u308c\u308b main.cc 1 2 3 4 5 6 7 8 9 #include <iostream> int main ( int argc , char * argv []) { for ( int i = 0 ; i < argc ; ++ i ) { std :: cout << \"argv[\" << i << \"]: \" << argv [ i ] << std :: endl ; } return 0 ; } # \u5b9f\u884c\u7d50\u679c $ ./a.exe Hello World! argv [ 0 ] : ./a.exe argv [ 1 ] : Hello argv [ 2 ] : World!","title":"\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570"},{"location":"ch02-08-functions/#_4","text":"\u95a2\u6570\u306e\u5f15\u6570\u306e\u500b\u6570\u3084\u578b\u304c\u7570\u306a\u308b\u5834\u5408\u3001\u540c\u3058\u540d\u524d\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u3053\u308c\u3092\uff08\u95a2\u6570\u306e\uff09\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3068\u547c\u3073\u307e\u3059\u3002\u5f15\u6570\u306e\u500b\u6570\u3084\u578b\u306e\u60c5\u5831\u3092\u5143\u306b\u547c\u3073\u51fa\u3059\u95a2\u6570\u3092\u6c7a\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include <iostream> void Print ( int x ) { std :: cout << \"int: \" << x << std :: endl ; } void Print ( double x ) { std :: cout << \"double: \" << x << std :: endl ; } int main () { Print ( 2 ); Print ( 2.1 ); return 0 ; } # \u5b9f\u884c\u7d50\u679c $ ./a.exe int: 2 double: 2 .1","title":"\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9"},{"location":"ch02-09-function-objects/","text":"\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u00b6 \u95a2\u6570\u30dd\u30a4\u30f3\u30bf \u00b6 \u95a2\u6570\u3092\u6307\u3057\u793a\u3059\u30dd\u30a4\u30f3\u30bf\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 // \u623b\u308a\u5024\u306e\u578b (*\u5909\u6570\u540d)(\u5f15\u6570\u306e\u578b); int ( * f1 )( double ); // double \u3092\u5f15\u6570\u3068\u3057\u3066 int \u3092\u8fd4\u3059\u95a2\u6570\u306e\u30dd\u30a4\u30f3\u30bf f1 int ( * f2 )( int , int ); // 2\u3064\u306e int \u3092\u5f15\u6570\u3068\u3057\u3066 int \u3092\u8fd4\u3059\u95a2\u6570\u306e\u30dd\u30a4\u30f3\u30bf f2 \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u306f\u3001\u623b\u308a\u5024\u306e\u578b\u3068\u5f15\u6570\u306e\u578b\u30fb\u6570\u30fb\u9806\u756a\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u95a2\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u4ee3\u5165\u53ef\u80fd\u3067\u3059\u3002 #include <iostream> int Add ( int x , int y ) { return x + y ; } int main () { int ( * fp )( int , int ) = Add ; // \u95a2\u6570 Add \u306e\u30a2\u30c9\u30ec\u30b9\u3092\u4fdd\u6301\u3059\u308b\u95a2\u6570\u30dd\u30a4\u30f3\u30bf fp int result = fp ( 3 , 5 ); // \u95a2\u6570\u30dd\u30a4\u30f3\u30bf fp \u3092\u4ecb\u3057\u3066\u95a2\u6570 Add \u304c\u5b9f\u884c\u3055\u308c\u308b std :: cout << result << std :: endl ; // 8 return 0 ; } \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092\u5909\u6570\u306b\u4ee3\u5165\u3059\u308b\u969b\u306f\u3001 auto \u3092\u4f7f\u3046\u3053\u3068\u3067\u8907\u96d1\u306a\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u578b\u3092\u66f8\u304f\u5fc5\u8981\u304c\u7121\u304f\u306a\u308a\u7c21\u6f54\u306b\u306a\u308a\u307e\u3059\u3002 auto fp = Add ; \u30e9\u30e0\u30c0\u5f0f \u00b6 \u30e9\u30e0\u30c0\u5f0f\u306f\u3001\u7c21\u6f54\u306b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306e\u5f0f\u3067\u3059\u3002 \u30e9\u30e0\u30c0\u5f0f\u3067\u751f\u6210\u3055\u308c\u308b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f auto \u3067\u4fdd\u6301\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u30e9\u30e0\u30c0\u5f0f\u306e\u69cb\u6587\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 // auto \u5909\u6570\u540d = [ \u30ad\u30e3\u30d7\u30c1\u30e3 ]( \u5f15\u6570\u30ea\u30b9\u30c8 ) -> \u623b\u308a\u5024\u306e\u578b { \u51e6\u7406\u5185\u5bb9 }; auto func = []( int a , int b ) -> int { return a + b ; }; // int \u30922\u3064\u53d7\u3051\u53d6\u308a\u3001\u8db3\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f int result = func ( 4 , 6 ); std :: cout << result << std :: endl ; // 10 \u30ad\u30e3\u30d7\u30c1\u30e3 \u00b6 \u30e9\u30e0\u30c0\u5f0f\u306e\u5916\u306b\u3042\u308b\u5909\u6570\u3092\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001 \u30e9\u30e0\u30c0\u5f0f\u5148\u982d\u306e [] \u5185\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002 \u30ad\u30e3\u30d7\u30c1\u30e3\u306b\u306f\u3001\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u3068\u53c2\u7167\u30ad\u30e3\u30d7\u30c1\u30e3\u306e2\u7a2e\u985e\u304c\u5b58\u5728\u3057\u307e\u3059\u3002 \u8a18\u8ff0\u4f8b \u5185\u5bb9 [=] \u30e9\u30e0\u30c0\u5f0f\u5b9a\u7fa9\u6642\u306b\u5b58\u5728\u3059\u308b\u5168\u3066\u306e\u5909\u6570\u3092\u30b3\u30d4\u30fc\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 [&] \u30e9\u30e0\u30c0\u5f0f\u5b9a\u7fa9\u6642\u306b\u5b58\u5728\u3059\u308b\u5168\u3066\u306e\u5909\u6570\u3092\u53c2\u7167\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 [a] \u5909\u6570 a \u3092\u30b3\u30d4\u30fc\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 [&a] \u5909\u6570 a \u3092\u53c2\u7167\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 [&a, b] \u5909\u6570 a \u306f\u53c2\u7167\u3057\u3001\u5909\u6570 b \u306f\u30b3\u30d4\u30fc\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 [=, &a] \u5909\u6570 a \u306f\u53c2\u7167\u3057\u3001\u305d\u308c\u4ee5\u5916\u306f\u30b3\u30d4\u30fc\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 int init = 5 ; // \u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067 {} \u5185\u3067\u5909\u6570 init \u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b auto f = [ init ]( int a , int b ) { return init + a * b ; }; // \u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3 auto g = [ & init ]( int a , int b ) { return init + a * b ; }; // \u53c2\u7167\u30ad\u30e3\u30d7\u30c1\u30e3 init = 0 ; // \u3010\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u5834\u5408\u3011 // \u30e9\u30e0\u30c0\u5f0f\u306e\u5b9a\u7fa9\u6642\u70b9\u3067 init \u304c\u30b3\u30d4\u30fc\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u5185\u306e init \u306f 5 int result_copy = f ( 2 , 4 ); std :: cout << result_copy << std :: endl ; // 13 // \u3010\u53c2\u7167\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u5834\u5408\u3011 // \u30e9\u30e0\u30c0\u5f0f\u5b9f\u884c\u6642\u306e init \u306e\u5024\u304c\u53c2\u7167\u3055\u308c\u308b\u306e\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u5185\u306e init \u306f 0 int result_ref = g ( 2 , 4 ); std :: cout << result_ref << std :: endl ; // 8 \u5f15\u6570\u30ea\u30b9\u30c8 \u00b6 ( \u5f15\u6570\u30ea\u30b9\u30c8 ) \u306f\u3001\u901a\u5e38\u306e\u95a2\u6570\u3068\u540c\u3058\u3088\u3046\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 auto func1 = []( int x ) -> int { return x * x ; }; // int \u3092\u5f15\u6570\u3068\u3059\u308b auto func2 = []() -> int { return 400 ; }; // \u5f15\u6570\u306a\u3057 auto func3 = [] { return 400 ; }; // \u623b\u308a\u5024\u306e\u578b\u306e\u8a18\u8ff0\u3092\u7701\u7565\u3057\u305f\u5834\u5408\u3001 () \u3054\u3068\u7701\u7565\u53ef\u80fd \u623b\u308a\u5024\u306e\u578b\u306e\u7701\u7565 \u00b6 -> \u623b\u308a\u5024\u306e\u578b \u306f\u3001 \u30e9\u30e0\u30c0\u5f0f\u5185\u306e\u578b\u63a8\u8ad6\u306b\u4efb\u305b\u308b\u5834\u5408\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002 auto func = []( int a , int b ) { return a + b ; }; // a, b \u306f\u5171\u306b int \u306a\u306e\u3067\u3001\u623b\u308a\u5024\u3082 int \u3068\u63a8\u8ad6\u3055\u308c\u308b std::function \u00b6 std::function \u3067\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3084\u30e9\u30e0\u30c0\u5f0f\u3092\u4fdd\u6301\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 std::function \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u3088\u3046\u306a\u8907\u96d1\u306a\u69cb\u6587\u304c\u7c21\u6f54\u306b\u306a\u308b\u3068\u3044\u3046\u5229\u70b9\u3082\u3042\u308a\u307e\u3059\u3002 #include <functional> int Add ( int x , int y ) { return x + y ; } int main () { std :: function < int ( int , int ) > f = Add ; // std::function<\u623b\u308a\u5024\u306e\u578b(\u5f15\u6570\u306e\u578b)> \u5909\u6570\u540d int result = f ( 3 , 5 ); // f \u3092\u4ecb\u3057\u3066\u95a2\u6570 Add \u304c\u5b9f\u884c\u3055\u308c\u308b std :: cout << result << std :: endl ; // 8 f = []( int x , int y ) { return x * y ; }; // \u30e9\u30e0\u30c0\u5f0f\u3082\u4fdd\u6301\u53ef\u80fd std :: cout << f ( 4 , 7 ) << std :: endl ; // 28 return 0 ; }","title":"2.9. \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8"},{"location":"ch02-09-function-objects/#_1","text":"","title":"\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8"},{"location":"ch02-09-function-objects/#_2","text":"\u95a2\u6570\u3092\u6307\u3057\u793a\u3059\u30dd\u30a4\u30f3\u30bf\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 // \u623b\u308a\u5024\u306e\u578b (*\u5909\u6570\u540d)(\u5f15\u6570\u306e\u578b); int ( * f1 )( double ); // double \u3092\u5f15\u6570\u3068\u3057\u3066 int \u3092\u8fd4\u3059\u95a2\u6570\u306e\u30dd\u30a4\u30f3\u30bf f1 int ( * f2 )( int , int ); // 2\u3064\u306e int \u3092\u5f15\u6570\u3068\u3057\u3066 int \u3092\u8fd4\u3059\u95a2\u6570\u306e\u30dd\u30a4\u30f3\u30bf f2 \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306b\u306f\u3001\u623b\u308a\u5024\u306e\u578b\u3068\u5f15\u6570\u306e\u578b\u30fb\u6570\u30fb\u9806\u756a\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u95a2\u6570\u306e\u30a2\u30c9\u30ec\u30b9\u304c\u4ee3\u5165\u53ef\u80fd\u3067\u3059\u3002 #include <iostream> int Add ( int x , int y ) { return x + y ; } int main () { int ( * fp )( int , int ) = Add ; // \u95a2\u6570 Add \u306e\u30a2\u30c9\u30ec\u30b9\u3092\u4fdd\u6301\u3059\u308b\u95a2\u6570\u30dd\u30a4\u30f3\u30bf fp int result = fp ( 3 , 5 ); // \u95a2\u6570\u30dd\u30a4\u30f3\u30bf fp \u3092\u4ecb\u3057\u3066\u95a2\u6570 Add \u304c\u5b9f\u884c\u3055\u308c\u308b std :: cout << result << std :: endl ; // 8 return 0 ; } \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092\u5909\u6570\u306b\u4ee3\u5165\u3059\u308b\u969b\u306f\u3001 auto \u3092\u4f7f\u3046\u3053\u3068\u3067\u8907\u96d1\u306a\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u578b\u3092\u66f8\u304f\u5fc5\u8981\u304c\u7121\u304f\u306a\u308a\u7c21\u6f54\u306b\u306a\u308a\u307e\u3059\u3002 auto fp = Add ;","title":"\u95a2\u6570\u30dd\u30a4\u30f3\u30bf"},{"location":"ch02-09-function-objects/#_3","text":"\u30e9\u30e0\u30c0\u5f0f\u306f\u3001\u7c21\u6f54\u306b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306e\u5f0f\u3067\u3059\u3002 \u30e9\u30e0\u30c0\u5f0f\u3067\u751f\u6210\u3055\u308c\u308b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f auto \u3067\u4fdd\u6301\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u30e9\u30e0\u30c0\u5f0f\u306e\u69cb\u6587\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 // auto \u5909\u6570\u540d = [ \u30ad\u30e3\u30d7\u30c1\u30e3 ]( \u5f15\u6570\u30ea\u30b9\u30c8 ) -> \u623b\u308a\u5024\u306e\u578b { \u51e6\u7406\u5185\u5bb9 }; auto func = []( int a , int b ) -> int { return a + b ; }; // int \u30922\u3064\u53d7\u3051\u53d6\u308a\u3001\u8db3\u3057\u305f\u7d50\u679c\u3092\u8fd4\u3059\u30e9\u30e0\u30c0\u5f0f int result = func ( 4 , 6 ); std :: cout << result << std :: endl ; // 10","title":"\u30e9\u30e0\u30c0\u5f0f"},{"location":"ch02-09-function-objects/#_4","text":"\u30e9\u30e0\u30c0\u5f0f\u306e\u5916\u306b\u3042\u308b\u5909\u6570\u3092\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001 \u30e9\u30e0\u30c0\u5f0f\u5148\u982d\u306e [] \u5185\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002 \u30ad\u30e3\u30d7\u30c1\u30e3\u306b\u306f\u3001\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u3068\u53c2\u7167\u30ad\u30e3\u30d7\u30c1\u30e3\u306e2\u7a2e\u985e\u304c\u5b58\u5728\u3057\u307e\u3059\u3002 \u8a18\u8ff0\u4f8b \u5185\u5bb9 [=] \u30e9\u30e0\u30c0\u5f0f\u5b9a\u7fa9\u6642\u306b\u5b58\u5728\u3059\u308b\u5168\u3066\u306e\u5909\u6570\u3092\u30b3\u30d4\u30fc\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 [&] \u30e9\u30e0\u30c0\u5f0f\u5b9a\u7fa9\u6642\u306b\u5b58\u5728\u3059\u308b\u5168\u3066\u306e\u5909\u6570\u3092\u53c2\u7167\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 [a] \u5909\u6570 a \u3092\u30b3\u30d4\u30fc\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 [&a] \u5909\u6570 a \u3092\u53c2\u7167\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 [&a, b] \u5909\u6570 a \u306f\u53c2\u7167\u3057\u3001\u5909\u6570 b \u306f\u30b3\u30d4\u30fc\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 [=, &a] \u5909\u6570 a \u306f\u53c2\u7167\u3057\u3001\u305d\u308c\u4ee5\u5916\u306f\u30b3\u30d4\u30fc\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u4f7f\u3046 int init = 5 ; // \u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067 {} \u5185\u3067\u5909\u6570 init \u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b auto f = [ init ]( int a , int b ) { return init + a * b ; }; // \u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3 auto g = [ & init ]( int a , int b ) { return init + a * b ; }; // \u53c2\u7167\u30ad\u30e3\u30d7\u30c1\u30e3 init = 0 ; // \u3010\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u5834\u5408\u3011 // \u30e9\u30e0\u30c0\u5f0f\u306e\u5b9a\u7fa9\u6642\u70b9\u3067 init \u304c\u30b3\u30d4\u30fc\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u5185\u306e init \u306f 5 int result_copy = f ( 2 , 4 ); std :: cout << result_copy << std :: endl ; // 13 // \u3010\u53c2\u7167\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u5834\u5408\u3011 // \u30e9\u30e0\u30c0\u5f0f\u5b9f\u884c\u6642\u306e init \u306e\u5024\u304c\u53c2\u7167\u3055\u308c\u308b\u306e\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u5185\u306e init \u306f 0 int result_ref = g ( 2 , 4 ); std :: cout << result_ref << std :: endl ; // 8","title":"\u30ad\u30e3\u30d7\u30c1\u30e3"},{"location":"ch02-09-function-objects/#_5","text":"( \u5f15\u6570\u30ea\u30b9\u30c8 ) \u306f\u3001\u901a\u5e38\u306e\u95a2\u6570\u3068\u540c\u3058\u3088\u3046\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 auto func1 = []( int x ) -> int { return x * x ; }; // int \u3092\u5f15\u6570\u3068\u3059\u308b auto func2 = []() -> int { return 400 ; }; // \u5f15\u6570\u306a\u3057 auto func3 = [] { return 400 ; }; // \u623b\u308a\u5024\u306e\u578b\u306e\u8a18\u8ff0\u3092\u7701\u7565\u3057\u305f\u5834\u5408\u3001 () \u3054\u3068\u7701\u7565\u53ef\u80fd","title":"\u5f15\u6570\u30ea\u30b9\u30c8"},{"location":"ch02-09-function-objects/#_6","text":"-> \u623b\u308a\u5024\u306e\u578b \u306f\u3001 \u30e9\u30e0\u30c0\u5f0f\u5185\u306e\u578b\u63a8\u8ad6\u306b\u4efb\u305b\u308b\u5834\u5408\u306f\u7701\u7565\u53ef\u80fd\u3067\u3059\u3002 auto func = []( int a , int b ) { return a + b ; }; // a, b \u306f\u5171\u306b int \u306a\u306e\u3067\u3001\u623b\u308a\u5024\u3082 int \u3068\u63a8\u8ad6\u3055\u308c\u308b","title":"\u623b\u308a\u5024\u306e\u578b\u306e\u7701\u7565"},{"location":"ch02-09-function-objects/#stdfunction","text":"std::function \u3067\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3084\u30e9\u30e0\u30c0\u5f0f\u3092\u4fdd\u6301\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 std::function \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u3088\u3046\u306a\u8907\u96d1\u306a\u69cb\u6587\u304c\u7c21\u6f54\u306b\u306a\u308b\u3068\u3044\u3046\u5229\u70b9\u3082\u3042\u308a\u307e\u3059\u3002 #include <functional> int Add ( int x , int y ) { return x + y ; } int main () { std :: function < int ( int , int ) > f = Add ; // std::function<\u623b\u308a\u5024\u306e\u578b(\u5f15\u6570\u306e\u578b)> \u5909\u6570\u540d int result = f ( 3 , 5 ); // f \u3092\u4ecb\u3057\u3066\u95a2\u6570 Add \u304c\u5b9f\u884c\u3055\u308c\u308b std :: cout << result << std :: endl ; // 8 f = []( int x , int y ) { return x * y ; }; // \u30e9\u30e0\u30c0\u5f0f\u3082\u4fdd\u6301\u53ef\u80fd std :: cout << f ( 4 , 7 ) << std :: endl ; // 28 return 0 ; }","title":"std::function"},{"location":"ch03-01-arrays/","text":"\u914d\u5217 \u00b6 \u914d\u5217\u306f\u540c\u4e00\u306e\u578b\u3092\u6301\u3064\u8907\u6570\u306e\u5024\u3092\u307e\u3068\u3081\u3066\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u578b\u3067\u3059\u3002 \u4f7f\u3044\u65b9\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; \u3053\u308c\u3067 5 \u8981\u7d20\u306e\u5024\u3092\u6301\u3064\u914d\u5217\u304c\u5ba3\u8a00\u3055\u308c\u307e\u3059\u3002 \u8981\u7d20\u53c2\u7167 \u00b6 \u914d\u5217\u306e\u8981\u7d20\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u914d\u5217\u306e\u4f55\u756a\u76ee\u306e\u8981\u7d20\u306a\u306e\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u6570\u3048\u306e\u59cb\u307e\u308a\u306f 0 \u304b\u3089\u306b\u306a\u308a\u307e\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; int y = x [ 2 ]; // 2 \u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3 \u00b6 \u914d\u5217\u306e\u5ba3\u8a00\u3068\u540c\u6642\u306b\u8981\u7d20\u3092\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u8981\u7d20\u6570\u306e\u6307\u5b9a\u304c\u7701\u7565\u3067\u304d\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 , 5 }; \u914d\u5217\u306e\u5ba3\u8a00\u5f8c\u306b\u8981\u7d20\u3092\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u8981\u7d20\u6570\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002 int x [ 5 ]; x [ 0 ] = 0 ; x [ 1 ] = 1 ; x [ 2 ] = 2 ; x [ 3 ] = 3 ; x [ 4 ] = 4 ; \u8981\u7d20\u6570\u306b\u6bd4\u3079\u3066\u8a2d\u5b9a\u3057\u305f\u8981\u7d20\u306e\u500b\u6570\u304c\u5c11\u306a\u3044\u5834\u5408\u306f\u6b8b\u308a\u306e\u8981\u7d20\u304c\u30bc\u30ed\u3067\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 }; // x[3], x[4] \u306f\u30bc\u30ed\u3067\u521d\u671f\u5316 \u8981\u7d20\u3092\u5168\u304f\u6307\u5b9a\u3057\u306a\u3044\u3068\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u30bc\u30ed\u3067\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 int x [ 5 ] = {}; \u3053\u308c\u304c\u4e00\u756a\u624b\u8efd\u306a\u521d\u671f\u5316\u65b9\u6cd5\u3067\u3059\u3002 \u914d\u5217\u3068\u30dd\u30a4\u30f3\u30bf \u00b6 \u914d\u5217\u3092\u53c2\u7167\u3059\u308b\u6642\u306b\u3001 [] \u3092\u7701\u7565\u3059\u308b\u3068\u3001\u914d\u5217\u306e\u5148\u982d\u3092\u6307\u3057\u793a\u3059\u30dd\u30a4\u30f3\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u5148\u982d\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8db3\u3059\u3053\u3068\u3067\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u5bfe\u5fdc\u3057\u305f\u30dd\u30a4\u30f3\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 #include <iostream> int x [] = { 2 , 4 , 6 , 8 , 10 }; int * p = x ; std :: cout << * p << std :: endl ; // 2 std :: cout << * ( p + 1 ) << std :: endl ; // 4 std :: cout << * ( p + 2 ) << std :: endl ; // 6 std :: cout << * ( p + 3 ) << std :: endl ; // 8 std :: cout << * ( p + 4 ) << std :: endl ; // 10 \u95a2\u6570\u306b\u914d\u5217\u3092\u6e21\u3059 \u00b6 \u914d\u5217\u3082\u901a\u5e38\u306e\u5909\u6570\u540c\u69d8\u3001\u95a2\u6570\u306b\u6e21\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 #include <iostream> void PrintArray ( int x [ 5 ]) { for ( int i = 0 ; i < 5 ; ++ i ) { std :: cout << x [ i ] << std :: endl ; } } int main () { int x [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; PrintArray ( x ); return 0 ; } \u3057\u304b\u3057\u3001\u4e0a\u8a18\u306e\u4f8b\u3060\u3068\u8981\u7d20\u6570\u304c 5 \u4ee5\u5916\u306e\u914d\u5217\u3092\u6271\u3044\u305f\u3044\u6642\u306b\u4e0d\u4fbf\u3067\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u95a2\u6570\u306b\u914d\u5217\u3092\u6e21\u3059\u5834\u5408\u306f\u3001\u914d\u5217\u306e\u5148\u982d\u30dd\u30a4\u30f3\u30bf\u3068\u8981\u7d20\u6570\u3092\u30bb\u30c3\u30c8\u3067\u6e21\u3059\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 #include <iostream> void PrintArray ( int * x , int num ) { for ( int i = 0 ; i < num ; ++ i ) { std :: cout << x [ i ] << std :: endl ; } } int main () { int num = 5 ; int x [ num ] = { 0 , 1 , 2 , 3 , 4 }; PrintArray ( x , num ); return 0 ; } std::array \u00b6 \u3088\u308a\u9ad8\u6a5f\u80fd\u306a\u914d\u5217\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306f std::array \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <array> std :: array < int , 5 > x = { 0 , 1 , 2 , 3 , 4 }; x \u306f\u8981\u7d20\u6570\u304c 5 \u3067\u3042\u308b\u3088\u3046\u306a int \u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 std::array \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f <array> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u8981\u7d20\u53c2\u7167\u306f\u901a\u5e38\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002 x [ 2 ] = 10 ; x.size() \u3068\u3059\u308b\u3068\u8981\u7d20\u6570\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 auto size = x . size (); // 5 \u901a\u5e38\u306e\u914d\u5217\u304b\u3089\u306f\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u3001 \u914d\u5217\u3068\u8981\u7d20\u6570\u3092\u4fdd\u5b58\u3057\u305f\u5909\u6570\u306e2\u3064\u3092\u6301\u3061\u56de\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 std::array \u3092\u4f7f\u3048\u3070\u305d\u308c\u3089\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3048\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002","title":"3.1. \u914d\u5217"},{"location":"ch03-01-arrays/#_1","text":"\u914d\u5217\u306f\u540c\u4e00\u306e\u578b\u3092\u6301\u3064\u8907\u6570\u306e\u5024\u3092\u307e\u3068\u3081\u3066\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u578b\u3067\u3059\u3002 \u4f7f\u3044\u65b9\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; \u3053\u308c\u3067 5 \u8981\u7d20\u306e\u5024\u3092\u6301\u3064\u914d\u5217\u304c\u5ba3\u8a00\u3055\u308c\u307e\u3059\u3002","title":"\u914d\u5217"},{"location":"ch03-01-arrays/#_2","text":"\u914d\u5217\u306e\u8981\u7d20\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u914d\u5217\u306e\u4f55\u756a\u76ee\u306e\u8981\u7d20\u306a\u306e\u304b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u6570\u3048\u306e\u59cb\u307e\u308a\u306f 0 \u304b\u3089\u306b\u306a\u308a\u307e\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; int y = x [ 2 ]; // 2","title":"\u8981\u7d20\u53c2\u7167"},{"location":"ch03-01-arrays/#_3","text":"\u914d\u5217\u306e\u5ba3\u8a00\u3068\u540c\u6642\u306b\u8981\u7d20\u3092\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u8981\u7d20\u6570\u306e\u6307\u5b9a\u304c\u7701\u7565\u3067\u304d\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 , 5 }; \u914d\u5217\u306e\u5ba3\u8a00\u5f8c\u306b\u8981\u7d20\u3092\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u8981\u7d20\u6570\u306e\u6307\u5b9a\u304c\u5fc5\u8981\u3067\u3059\u3002 int x [ 5 ]; x [ 0 ] = 0 ; x [ 1 ] = 1 ; x [ 2 ] = 2 ; x [ 3 ] = 3 ; x [ 4 ] = 4 ; \u8981\u7d20\u6570\u306b\u6bd4\u3079\u3066\u8a2d\u5b9a\u3057\u305f\u8981\u7d20\u306e\u500b\u6570\u304c\u5c11\u306a\u3044\u5834\u5408\u306f\u6b8b\u308a\u306e\u8981\u7d20\u304c\u30bc\u30ed\u3067\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 int x [ 5 ] = { 0 , 1 , 2 }; // x[3], x[4] \u306f\u30bc\u30ed\u3067\u521d\u671f\u5316 \u8981\u7d20\u3092\u5168\u304f\u6307\u5b9a\u3057\u306a\u3044\u3068\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u30bc\u30ed\u3067\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002 int x [ 5 ] = {}; \u3053\u308c\u304c\u4e00\u756a\u624b\u8efd\u306a\u521d\u671f\u5316\u65b9\u6cd5\u3067\u3059\u3002","title":"\u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3"},{"location":"ch03-01-arrays/#_4","text":"\u914d\u5217\u3092\u53c2\u7167\u3059\u308b\u6642\u306b\u3001 [] \u3092\u7701\u7565\u3059\u308b\u3068\u3001\u914d\u5217\u306e\u5148\u982d\u3092\u6307\u3057\u793a\u3059\u30dd\u30a4\u30f3\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 \u5148\u982d\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8db3\u3059\u3053\u3068\u3067\u3001\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u306b\u5bfe\u5fdc\u3057\u305f\u30dd\u30a4\u30f3\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 #include <iostream> int x [] = { 2 , 4 , 6 , 8 , 10 }; int * p = x ; std :: cout << * p << std :: endl ; // 2 std :: cout << * ( p + 1 ) << std :: endl ; // 4 std :: cout << * ( p + 2 ) << std :: endl ; // 6 std :: cout << * ( p + 3 ) << std :: endl ; // 8 std :: cout << * ( p + 4 ) << std :: endl ; // 10","title":"\u914d\u5217\u3068\u30dd\u30a4\u30f3\u30bf"},{"location":"ch03-01-arrays/#_5","text":"\u914d\u5217\u3082\u901a\u5e38\u306e\u5909\u6570\u540c\u69d8\u3001\u95a2\u6570\u306b\u6e21\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 #include <iostream> void PrintArray ( int x [ 5 ]) { for ( int i = 0 ; i < 5 ; ++ i ) { std :: cout << x [ i ] << std :: endl ; } } int main () { int x [ 5 ] = { 0 , 1 , 2 , 3 , 4 }; PrintArray ( x ); return 0 ; } \u3057\u304b\u3057\u3001\u4e0a\u8a18\u306e\u4f8b\u3060\u3068\u8981\u7d20\u6570\u304c 5 \u4ee5\u5916\u306e\u914d\u5217\u3092\u6271\u3044\u305f\u3044\u6642\u306b\u4e0d\u4fbf\u3067\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u95a2\u6570\u306b\u914d\u5217\u3092\u6e21\u3059\u5834\u5408\u306f\u3001\u914d\u5217\u306e\u5148\u982d\u30dd\u30a4\u30f3\u30bf\u3068\u8981\u7d20\u6570\u3092\u30bb\u30c3\u30c8\u3067\u6e21\u3059\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 #include <iostream> void PrintArray ( int * x , int num ) { for ( int i = 0 ; i < num ; ++ i ) { std :: cout << x [ i ] << std :: endl ; } } int main () { int num = 5 ; int x [ num ] = { 0 , 1 , 2 , 3 , 4 }; PrintArray ( x , num ); return 0 ; }","title":"\u95a2\u6570\u306b\u914d\u5217\u3092\u6e21\u3059"},{"location":"ch03-01-arrays/#stdarray","text":"\u3088\u308a\u9ad8\u6a5f\u80fd\u306a\u914d\u5217\u3092\u4f7f\u7528\u3057\u305f\u3044\u5834\u5408\u306f std::array \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <array> std :: array < int , 5 > x = { 0 , 1 , 2 , 3 , 4 }; x \u306f\u8981\u7d20\u6570\u304c 5 \u3067\u3042\u308b\u3088\u3046\u306a int \u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 std::array \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f <array> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u8981\u7d20\u53c2\u7167\u306f\u901a\u5e38\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002 x [ 2 ] = 10 ; x.size() \u3068\u3059\u308b\u3068\u8981\u7d20\u6570\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 auto size = x . size (); // 5 \u901a\u5e38\u306e\u914d\u5217\u304b\u3089\u306f\u8981\u7d20\u6570\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u305f\u3081\u3001 \u914d\u5217\u3068\u8981\u7d20\u6570\u3092\u4fdd\u5b58\u3057\u305f\u5909\u6570\u306e2\u3064\u3092\u6301\u3061\u56de\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 std::array \u3092\u4f7f\u3048\u3070\u305d\u308c\u3089\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3048\u308b\u306e\u3067\u4fbf\u5229\u3067\u3059\u3002","title":"std::array"},{"location":"ch03-02-strings/","text":"\u6587\u5b57\u5217 \u00b6 \u6587\u5b57\u5217\u3092\u6271\u3046\u306b\u306f std::string \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <string> std :: string s = \"Hello\" ; std::string \u306f\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u3092 char \u306e\u914d\u5217\u3068\u3057\u3066\u6271\u3046\u305f\u3081 \u914d\u5217\u306e\u3088\u3046\u306b\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: string s = \"Hello\" ; s [ 0 ]; // 'H' s [ 1 ]; // 'e' s [ 2 ]; // 'l' s [ 3 ]; // 'l' s [ 4 ]; // 'o' s.size() \u3068\u3059\u308b\u3068\u6587\u5b57\u5217\u6570\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 s . size (); // 5","title":"3.2. \u6587\u5b57\u5217"},{"location":"ch03-02-strings/#_1","text":"\u6587\u5b57\u5217\u3092\u6271\u3046\u306b\u306f std::string \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <string> std :: string s = \"Hello\" ; std::string \u306f\u6587\u5b57\u5217\u30c7\u30fc\u30bf\u3092 char \u306e\u914d\u5217\u3068\u3057\u3066\u6271\u3046\u305f\u3081 \u914d\u5217\u306e\u3088\u3046\u306b\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: string s = \"Hello\" ; s [ 0 ]; // 'H' s [ 1 ]; // 'e' s [ 2 ]; // 'l' s [ 3 ]; // 'l' s [ 4 ]; // 'o' s.size() \u3068\u3059\u308b\u3068\u6587\u5b57\u5217\u6570\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 s . size (); // 5","title":"\u6587\u5b57\u5217"},{"location":"ch03-03-tuples/","text":"\u30bf\u30d7\u30eb \u00b6 \u30bf\u30d7\u30eb\u306f\u8907\u6570\u306e\u5024\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u578b\u3067\u3059\u3002 \u914d\u5217\u3068\u4f3c\u305f\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u914d\u5217\u3068\u7570\u306a\u308a\u5404\u8981\u7d20\u306f\u540c\u3058\u578b\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30bf\u30d7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <tuple> std :: tuple < std :: string , int > person { \"Bob\" , 20 }; < ... > \u306e\u90e8\u5206\u306b\u5404\u8981\u7d20\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u8981\u7d20\u6570\u306f\u3044\u304f\u3064\u3067\u3082\u5897\u3084\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: tuple < std :: string , int , std :: string > person { \"Bob\" , 20 , \"USA\" }; \u8981\u7d20\u53c2\u7167 \u00b6 \u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u30bf\u30d7\u30eb\u3082\u8981\u7d20\u53c2\u7167\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: get < 0 > ( person ); // \"Bob\" std :: get < 1 > ( person ); // 20 \u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3 \u00b6 \u30bf\u30d7\u30eb\u306f\u521d\u671f\u5316\u65b9\u6cd5\u306b\u5e7e\u3064\u304b\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 std :: tuple < std :: string , int > person { \"Bob\" , 20 }; std :: tuple < std :: string , int > person ( \"Bob\" , 20 ); std :: tuple < std :: string , int > person = std :: make_tuple ( \"Bob\" , 20 ); std::tie() \u00b6 std::tie() \u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3046\u3068\u30bf\u30d7\u30eb\u306e\u8981\u7d20\u3092\u500b\u5225\u306e\u5909\u6570\u306b \u307e\u3068\u3081\u3066\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: tuple < std :: string , int , std :: string > person { \"Bob\" , 20 , \"USA\" }; std :: string name ; int age ; std :: string country ; std :: tie ( name , age , country ) = person ; // name: \"Bob\", age: 20, country: \"USA\"","title":"3.3. \u30bf\u30d7\u30eb"},{"location":"ch03-03-tuples/#_1","text":"\u30bf\u30d7\u30eb\u306f\u8907\u6570\u306e\u5024\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u578b\u3067\u3059\u3002 \u914d\u5217\u3068\u4f3c\u305f\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u914d\u5217\u3068\u7570\u306a\u308a\u5404\u8981\u7d20\u306f\u540c\u3058\u578b\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30bf\u30d7\u30eb\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <tuple> std :: tuple < std :: string , int > person { \"Bob\" , 20 }; < ... > \u306e\u90e8\u5206\u306b\u5404\u8981\u7d20\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u8981\u7d20\u6570\u306f\u3044\u304f\u3064\u3067\u3082\u5897\u3084\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: tuple < std :: string , int , std :: string > person { \"Bob\" , 20 , \"USA\" };","title":"\u30bf\u30d7\u30eb"},{"location":"ch03-03-tuples/#_2","text":"\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u30bf\u30d7\u30eb\u3082\u8981\u7d20\u53c2\u7167\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: get < 0 > ( person ); // \"Bob\" std :: get < 1 > ( person ); // 20","title":"\u8981\u7d20\u53c2\u7167"},{"location":"ch03-03-tuples/#_3","text":"\u30bf\u30d7\u30eb\u306f\u521d\u671f\u5316\u65b9\u6cd5\u306b\u5e7e\u3064\u304b\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 std :: tuple < std :: string , int > person { \"Bob\" , 20 }; std :: tuple < std :: string , int > person ( \"Bob\" , 20 ); std :: tuple < std :: string , int > person = std :: make_tuple ( \"Bob\" , 20 );","title":"\u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3"},{"location":"ch03-03-tuples/#stdtie","text":"std::tie() \u3068\u3044\u3046\u95a2\u6570\u3092\u4f7f\u3046\u3068\u30bf\u30d7\u30eb\u306e\u8981\u7d20\u3092\u500b\u5225\u306e\u5909\u6570\u306b \u307e\u3068\u3081\u3066\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: tuple < std :: string , int , std :: string > person { \"Bob\" , 20 , \"USA\" }; std :: string name ; int age ; std :: string country ; std :: tie ( name , age , country ) = person ; // name: \"Bob\", age: 20, country: \"USA\"","title":"std::tie()"},{"location":"ch03-04-pairs/","text":"\u30da\u30a2 \u00b6 \u30da\u30a2\u306f2\u3064\u306e\u5024\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u578b\u3067\u3059\u3002 \u8981\u7d20\u6570\u304c2\u3064\u306e\u30bf\u30d7\u30eb\u3068\u540c\u3058\u3088\u3046\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30da\u30a2\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <utility> std :: pair < std :: string , int > person { \"Bob\" , 20 }; \u8981\u7d20\u53c2\u7167 \u00b6 \u30bf\u30d7\u30eb\u3068\u540c\u69d8\u306b\u8981\u7d20\u53c2\u7167\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: get < 0 > ( person ); // \"Bob\" std :: get < 1 > ( person ); // 20 \u30da\u30a2\u3067\u306f0\u756a\u76ee\u306e\u8981\u7d20\u3092 first \u3001 1\u756a\u76ee\u306e\u8981\u7d20\u3092 second \u3067\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 person . first ; // \"Bob\" person . second ; // 20 \u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3 \u00b6 \u30bf\u30d7\u30eb\u3068\u540c\u69d8\u306b\u521d\u671f\u5316\u65b9\u6cd5\u306b\u5e7e\u3064\u304b\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 std :: pair < std :: string , int > person { \"Bob\" , 20 }; std :: pair < std :: string , int > person ( \"Bob\" , 20 ); std :: pair < std :: string , int > person = std :: make_pair ( \"Bob\" , 20 ); std::tie() \u00b6 std::tie() \u3092\u4f7f\u3046\u3068\u30da\u30a2\u306e\u8981\u7d20\u3092\u500b\u5225\u306e\u5909\u6570\u306b\u307e\u3068\u3081\u3066\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std::tie() \u3092\u4f7f\u3046\u306b\u306f <tuple> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 #include <tuple> std :: pair < std :: string , int > person { \"Bob\" , 20 }; std :: string name ; int age ; std :: tie ( name , age ) = person ; // name: \"Bob\", age: 20","title":"3.4. \u30da\u30a2"},{"location":"ch03-04-pairs/#_1","text":"\u30da\u30a2\u306f2\u3064\u306e\u5024\u3092\u3072\u3068\u307e\u3068\u3081\u306b\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u578b\u3067\u3059\u3002 \u8981\u7d20\u6570\u304c2\u3064\u306e\u30bf\u30d7\u30eb\u3068\u540c\u3058\u3088\u3046\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30da\u30a2\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <utility> std :: pair < std :: string , int > person { \"Bob\" , 20 };","title":"\u30da\u30a2"},{"location":"ch03-04-pairs/#_2","text":"\u30bf\u30d7\u30eb\u3068\u540c\u69d8\u306b\u8981\u7d20\u53c2\u7167\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: get < 0 > ( person ); // \"Bob\" std :: get < 1 > ( person ); // 20 \u30da\u30a2\u3067\u306f0\u756a\u76ee\u306e\u8981\u7d20\u3092 first \u3001 1\u756a\u76ee\u306e\u8981\u7d20\u3092 second \u3067\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 person . first ; // \"Bob\" person . second ; // 20","title":"\u8981\u7d20\u53c2\u7167"},{"location":"ch03-04-pairs/#_3","text":"\u30bf\u30d7\u30eb\u3068\u540c\u69d8\u306b\u521d\u671f\u5316\u65b9\u6cd5\u306b\u5e7e\u3064\u304b\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 std :: pair < std :: string , int > person { \"Bob\" , 20 }; std :: pair < std :: string , int > person ( \"Bob\" , 20 ); std :: pair < std :: string , int > person = std :: make_pair ( \"Bob\" , 20 );","title":"\u521d\u671f\u5316\u306e\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3"},{"location":"ch03-04-pairs/#stdtie","text":"std::tie() \u3092\u4f7f\u3046\u3068\u30da\u30a2\u306e\u8981\u7d20\u3092\u500b\u5225\u306e\u5909\u6570\u306b\u307e\u3068\u3081\u3066\u4ee3\u5165\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std::tie() \u3092\u4f7f\u3046\u306b\u306f <tuple> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 #include <tuple> std :: pair < std :: string , int > person { \"Bob\" , 20 }; std :: string name ; int age ; std :: tie ( name , age ) = person ; // name: \"Bob\", age: 20","title":"std::tie()"},{"location":"ch03-05-vectors/","text":"\u30d9\u30af\u30bf \u00b6 \u8981\u7d20\u6570\u3092\u5b9f\u884c\u6642\u306b\u5909\u66f4\u3067\u304d\u308b\u914d\u5217\u3092\u6271\u3046\u306b\u306f std::vector \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; x \u306f\u8981\u7d20\u6570\u304c 5 \u3067\u3042\u308b\u3088\u3046\u306a int \u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 std::vector \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f <vector> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u8981\u7d20\u53c2\u7167\u306f\u901a\u5e38\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002 x [ 2 ] = 10 ; x.size() \u3068\u3059\u308b\u3068\u8981\u7d20\u6570\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 auto size = x . size (); // 5 \u672b\u5c3e\u3078\u8981\u7d20\u8ffd\u52a0 \u00b6 x.push_back() \u3068\u3059\u308b\u3068\u672b\u5c3e\u3078\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; auto size1 = x . size (); // 5 x . push_back ( 5 ); auto size2 = x . size (); // 6 \u672b\u5c3e\u304b\u3089\u8981\u7d20\u524a\u9664 \u00b6 x.pop_back() \u3068\u3059\u308b\u3068\u672b\u5c3e\u304b\u3089\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; auto size1 = x . size (); // 5 x . pop_back (); auto size2 = x . size (); // 4 \u914d\u5217\u306e\u5148\u982d\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97 \u00b6 x.data() \u3068\u3059\u308b\u3068\u914d\u5217\u306e\u5148\u982d\u30dd\u30a4\u30f3\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 4 , 3 , 2 , 1 , 0 }; auto px = x . data (); // \u5148\u982d\u30dd\u30a4\u30f3\u30bf auto num = * px ; // 4 bool \u306b\u5bfe\u3059\u308b\u7279\u6b8a\u5316 \u00b6 std::vector \u306f bool \u306b\u5bfe\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7279\u6b8a\u5316\u3055\u308c\u3066\u304a\u308a\u3001 std::vector<bool> \u306f bool \u4ee5\u5916\u306e std::vector \u3068\u306f\u52d5\u4f5c\u304c\u7570\u306a\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f vector - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"3.5. \u30d9\u30af\u30bf"},{"location":"ch03-05-vectors/#_1","text":"\u8981\u7d20\u6570\u3092\u5b9f\u884c\u6642\u306b\u5909\u66f4\u3067\u304d\u308b\u914d\u5217\u3092\u6271\u3046\u306b\u306f std::vector \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; x \u306f\u8981\u7d20\u6570\u304c 5 \u3067\u3042\u308b\u3088\u3046\u306a int \u306e\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002 std::vector \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f <vector> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u8981\u7d20\u53c2\u7167\u306f\u901a\u5e38\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u3067\u304d\u307e\u3059\u3002 x [ 2 ] = 10 ; x.size() \u3068\u3059\u308b\u3068\u8981\u7d20\u6570\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 auto size = x . size (); // 5","title":"\u30d9\u30af\u30bf"},{"location":"ch03-05-vectors/#_2","text":"x.push_back() \u3068\u3059\u308b\u3068\u672b\u5c3e\u3078\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; auto size1 = x . size (); // 5 x . push_back ( 5 ); auto size2 = x . size (); // 6","title":"\u672b\u5c3e\u3078\u8981\u7d20\u8ffd\u52a0"},{"location":"ch03-05-vectors/#_3","text":"x.pop_back() \u3068\u3059\u308b\u3068\u672b\u5c3e\u304b\u3089\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; auto size1 = x . size (); // 5 x . pop_back (); auto size2 = x . size (); // 4","title":"\u672b\u5c3e\u304b\u3089\u8981\u7d20\u524a\u9664"},{"location":"ch03-05-vectors/#_4","text":"x.data() \u3068\u3059\u308b\u3068\u914d\u5217\u306e\u5148\u982d\u30dd\u30a4\u30f3\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 #include <vector> std :: vector < int > x = { 4 , 3 , 2 , 1 , 0 }; auto px = x . data (); // \u5148\u982d\u30dd\u30a4\u30f3\u30bf auto num = * px ; // 4","title":"\u914d\u5217\u306e\u5148\u982d\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97"},{"location":"ch03-05-vectors/#bool","text":"std::vector \u306f bool \u306b\u5bfe\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u7279\u6b8a\u5316\u3055\u308c\u3066\u304a\u308a\u3001 std::vector<bool> \u306f bool \u4ee5\u5916\u306e std::vector \u3068\u306f\u52d5\u4f5c\u304c\u7570\u306a\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f vector - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"bool \u306b\u5bfe\u3059\u308b\u7279\u6b8a\u5316"},{"location":"ch03-06-maps/","text":"\u30de\u30c3\u30d7 \u00b6 \u914d\u5217\u3067\u306f\u8981\u7d20\u53c2\u7167\u306e\u305f\u3081\u306b\u4f55\u756a\u76ee\u306e\u8981\u7d20\u3068\u6307\u5b9a\u3057\u307e\u3059\u304c\u3001 std::map \u307e\u305f\u306f std::unorderd_map \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3059\u308b\u3068 \u4f55\u756a\u76ee\u3068\u3044\u3046\u6307\u5b9a\u306e\u4ee3\u308f\u308a\u306b\u4efb\u610f\u306e\u578b\u3092\u30ad\u30fc\u3068\u3057\u3066\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u6a5f\u80fd\u306f\u9023\u60f3\u914d\u5217\u3084\u8f9e\u66f8\u3068\u3082\u547c\u3070\u308c\u307e\u3059\u3002 #include <map> std :: map < std :: string , int > persons = { { \"Alice\" , 18 }, { \"Bob\" , 20 } }; #include <unordered_map> std :: unordered_map < std :: string , int > persons = { { \"Alice\" , 18 }, { \"Bob\" , 20 } }; \u8981\u7d20\u53c2\u7167\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 persons [ \"Alice\" ]; // 18 persons [ \"Bob\" ]; // 20 \u8981\u7d20\u8ffd\u52a0 \u00b6 insert() \u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . insert ({ \"Eve\" , 19 }); \u8981\u7d20\u524a\u9664 \u00b6 erase() \u3067\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . erase ( \"Bob\" ); std::map \u3068 std::unordered_map \u306e\u9055\u3044 \u00b6 std::map \u306f\u30ad\u30fc\u3067\u30bd\u30fc\u30c8\u3057\u3066\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001 std::unordered_map \u306f\u30ad\u30fc\u304b\u3089\u8a08\u7b97\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u3068\u547c\u3070\u308c\u308b\u5024\u3067\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002 \u52b9\u7387\u306e\u3088\u3044\u30cf\u30c3\u30b7\u30e5\u8a08\u7b97\u3092\u884c\u3048\u308b\u5834\u5408\u306b\u306f std::unordered_map \u306e\u65b9\u304c\u9069\u3057\u3066\u3044\u307e\u3059\u3002","title":"3.6. \u30de\u30c3\u30d7"},{"location":"ch03-06-maps/#_1","text":"\u914d\u5217\u3067\u306f\u8981\u7d20\u53c2\u7167\u306e\u305f\u3081\u306b\u4f55\u756a\u76ee\u306e\u8981\u7d20\u3068\u6307\u5b9a\u3057\u307e\u3059\u304c\u3001 std::map \u307e\u305f\u306f std::unorderd_map \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3059\u308b\u3068 \u4f55\u756a\u76ee\u3068\u3044\u3046\u6307\u5b9a\u306e\u4ee3\u308f\u308a\u306b\u4efb\u610f\u306e\u578b\u3092\u30ad\u30fc\u3068\u3057\u3066\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u6a5f\u80fd\u306f\u9023\u60f3\u914d\u5217\u3084\u8f9e\u66f8\u3068\u3082\u547c\u3070\u308c\u307e\u3059\u3002 #include <map> std :: map < std :: string , int > persons = { { \"Alice\" , 18 }, { \"Bob\" , 20 } }; #include <unordered_map> std :: unordered_map < std :: string , int > persons = { { \"Alice\" , 18 }, { \"Bob\" , 20 } }; \u8981\u7d20\u53c2\u7167\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 persons [ \"Alice\" ]; // 18 persons [ \"Bob\" ]; // 20","title":"\u30de\u30c3\u30d7"},{"location":"ch03-06-maps/#_2","text":"insert() \u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . insert ({ \"Eve\" , 19 });","title":"\u8981\u7d20\u8ffd\u52a0"},{"location":"ch03-06-maps/#_3","text":"erase() \u3067\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . erase ( \"Bob\" );","title":"\u8981\u7d20\u524a\u9664"},{"location":"ch03-06-maps/#stdmap-stdunordered_map","text":"std::map \u306f\u30ad\u30fc\u3067\u30bd\u30fc\u30c8\u3057\u3066\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001 std::unordered_map \u306f\u30ad\u30fc\u304b\u3089\u8a08\u7b97\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u3068\u547c\u3070\u308c\u308b\u5024\u3067\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002 \u52b9\u7387\u306e\u3088\u3044\u30cf\u30c3\u30b7\u30e5\u8a08\u7b97\u3092\u884c\u3048\u308b\u5834\u5408\u306b\u306f std::unordered_map \u306e\u65b9\u304c\u9069\u3057\u3066\u3044\u307e\u3059\u3002","title":"std::map \u3068 std::unordered_map \u306e\u9055\u3044"},{"location":"ch03-07-sets/","text":"\u30bb\u30c3\u30c8 \u00b6 std::set \u307e\u305f\u306f std::unordered_set \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3059\u308b\u3068 \u4efb\u610f\u306e\u578b\u306e\u96c6\u5408\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <set> std :: set < std :: string > persons = { \"Alice\" , \"Bob\" }; #include <unordered_set> std :: unordered_set < std :: string > persons = { \"Alice\" , \"Bob\" }; \u8981\u7d20\u8ffd\u52a0 \u00b6 insert() \u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . insert ( \"Eve\" ); \u8981\u7d20\u524a\u9664 \u00b6 erase() \u3067\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . erase ( \"Bob\" ); std::set \u3068 std::unordered_set \u306e\u9055\u3044 \u00b6 std::set \u306f\u30ad\u30fc\u3067\u30bd\u30fc\u30c8\u3057\u3066\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001 std::unordered_set \u306f\u30ad\u30fc\u304b\u3089\u8a08\u7b97\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u3068\u547c\u3070\u308c\u308b\u5024\u3067\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002 \u52b9\u7387\u306e\u3088\u3044\u30cf\u30c3\u30b7\u30e5\u8a08\u7b97\u3092\u884c\u3048\u308b\u5834\u5408\u306b\u306f std::unordered_set \u306e\u65b9\u304c\u9069\u3057\u3066\u3044\u307e\u3059\u3002","title":"3.7. \u30bb\u30c3\u30c8"},{"location":"ch03-07-sets/#_1","text":"std::set \u307e\u305f\u306f std::unordered_set \u3068\u3044\u3046\u578b\u3092\u4f7f\u7528\u3059\u308b\u3068 \u4efb\u610f\u306e\u578b\u306e\u96c6\u5408\u3092\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 #include <set> std :: set < std :: string > persons = { \"Alice\" , \"Bob\" }; #include <unordered_set> std :: unordered_set < std :: string > persons = { \"Alice\" , \"Bob\" };","title":"\u30bb\u30c3\u30c8"},{"location":"ch03-07-sets/#_2","text":"insert() \u3067\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . insert ( \"Eve\" );","title":"\u8981\u7d20\u8ffd\u52a0"},{"location":"ch03-07-sets/#_3","text":"erase() \u3067\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 persons . erase ( \"Bob\" );","title":"\u8981\u7d20\u524a\u9664"},{"location":"ch03-07-sets/#stdset-stdunordered_set","text":"std::set \u306f\u30ad\u30fc\u3067\u30bd\u30fc\u30c8\u3057\u3066\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3059\u308b\u306e\u306b\u5bfe\u3057\u3001 std::unordered_set \u306f\u30ad\u30fc\u304b\u3089\u8a08\u7b97\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u3068\u547c\u3070\u308c\u308b\u5024\u3067\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002 \u52b9\u7387\u306e\u3088\u3044\u30cf\u30c3\u30b7\u30e5\u8a08\u7b97\u3092\u884c\u3048\u308b\u5834\u5408\u306b\u306f std::unordered_set \u306e\u65b9\u304c\u9069\u3057\u3066\u3044\u307e\u3059\u3002","title":"std::set \u3068 std::unordered_set \u306e\u9055\u3044"},{"location":"ch03-08-iterators/","text":"\u30a4\u30c6\u30ec\u30fc\u30bf \u00b6 \u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\u30b3\u30f3\u30c6\u30ca\u5185\u3067\u306e\u8981\u7d20\u306e\u4f4d\u7f6e\u3092\u6307\u3059\u3082\u306e\u3067\u3001 \u30dd\u30a4\u30f3\u30bf\u306e\u3088\u3046\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067 \u30b3\u30f3\u30c6\u30ca\u306e\u7a2e\u985e\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3067\u51e6\u7406\u3092\u5171\u901a\u5316\u3067\u304d\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; // begin() \u3067\u30b3\u30f3\u30c6\u30ca\u5185\u306e\u5148\u982d\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97 auto it = x . begin (); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u8981\u7d20\u3092\u51fa\u529b std :: cout << * it << std :: endl ; // 0 // \u30a4\u30c6\u30ec\u30fc\u30bf\u30921\u3064\u9032\u3081\u308b ++ it ; // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u8981\u7d20\u3092\u51fa\u529b std :: cout << * it << std :: endl ; // 1 \u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u53c2\u7167\u3059\u308b\u306b\u306f \u30dd\u30a4\u30f3\u30bf\u306e\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u540c\u69d8\u306b * \u3092\u3064\u3051\u307e\u3059\u3002 \u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u30671\u3064\u9032\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; // end() \u3067\u30b3\u30f3\u30c6\u30ca\u5185\u306e\u6700\u7d42\u8981\u7d20\u306e1\u3064\u5148\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97 for ( auto it = x . begin (); it != x . end (); ++ it ) { std :: cout << * it << std :: endl ; } end() \u3067\u53d6\u5f97\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u6700\u7d42\u8981\u7d20\u3067\u306f\u306a\u304f\u3001 \u6700\u7d42\u8981\u7d20\u306e1\u3064\u5148\u3067\u3042\u308b\u305f\u3081\u30eb\u30fc\u30d7\u306e\u7d42\u4e86\u6761\u4ef6\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u30b3\u30f3\u30c6\u30ca\u306e\u7a2e\u985e\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3067\u51e6\u7406\u3092\u884c\u3048\u308b\u305f\u3081\u3001 \u6b21\u306e\u3088\u3046\u306b std::set \u306b\u5909\u66f4\u3057\u3066\u3082\u305d\u306e\u307e\u307e\u52d5\u4f5c\u3057\u307e\u3059\u3002 std :: set < int > x = { 0 , 1 , 2 , 3 , 4 }; for ( auto it = x . begin (); it != x . end (); ++ it ) { std :: cout << * it << std :: endl ; } \u3053\u306e\u6027\u8cea\u306b\u3088\u3063\u3066\u30b3\u30f3\u30c6\u30ca\u306e\u7a2e\u985e\u306b\u4f9d\u5b58\u305b\u305a <algorithm> \u3067\u63d0\u4f9b\u3055\u308c\u308b\u6a5f\u80fd\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 #include <algorithm> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; // std::count_if \u306f\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30b3\u30f3\u30c6\u30ca\u8981\u7d20\u306e\u500b\u6570\u3092\u6570\u3048\u308b\u51e6\u7406 // - \u7b2c1\u5f15\u6570\u3068\u7b2c2\u5f15\u6570\u3067\u7bc4\u56f2\u3092\u6307\u5b9a // - \u7b2c3\u5f15\u6570\u3067\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u6761\u4ef6\u3092\u6307\u5b9a auto n = std :: count_if ( x . begin (), x . end (), []( const int v ) { // 0 \u3088\u308a\u5927\u304d\u3044 2 \u306e\u500d\u6570 if ( v <= 0 ) { return false ; } if ( v % 2 != 0 ) { return false ; } return true ; }); std :: cout << n << std :: endl ; // 2 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30f3\u30c6\u30ca \u00b6 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30f3\u30c6\u30ca\u3068\u3057\u3066\u3001\u4ee3\u8868\u7684\u306a\u3082\u306e\u306f\u30b3\u30f3\u30c6\u30ca\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u63d0\u4f9b\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca\u3067\u3059\u3002 \u30b3\u30f3\u30c6\u30ca\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u63d0\u4f9b\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca\u306f STL \u30b3\u30f3\u30c6\u30ca\u3068\u547c\u3070\u308c\u3001\u672c\u66f8\u3067\u7d39\u4ecb\u3057\u305f\u4ee5\u4e0b\u3082\u306e\u304c\u8a72\u5f53\u3057\u307e\u3059\u3002 std::array std::vector std::map std::set std::unordered_map std::unordered_set STL \u30b3\u30f3\u30c6\u30ca\u306e\u4e00\u89a7\u306f \u30b3\u30f3\u30c6\u30ca\u30e9\u30a4\u30d6\u30e9\u30ea - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 STL \u30b3\u30f3\u30c6\u30ca\u4ee5\u5916\u306b\u3082 std::string \u306a\u3069\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u30de\u30c3\u30d7\u306e\u30a4\u30c6\u30ec\u30fc\u30bf \u00b6 std::map \u3084 std::unordered_map \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u306f\u30da\u30a2\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u30da\u30a2\u306f first \u304c\u30ad\u30fc\u3067 second \u304c\u5024\u3067\u3059\u3002 std :: map < std :: string , int > persons = { { \"Alice\" , 18 }, { \"Bob\" , 20 } }; for ( auto it = persons . begin (); it != persons . end (); ++ it ) { const auto & person = * it ; // std::pair<std::string, int> const std :: string & name = person . first ; const int age = person . second ; std :: cout << name << \": \" << age << std :: endl ; } \u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7a2e\u985e \u00b6 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306f5\u7a2e\u985e\u3042\u308a\u307e\u3059\u304c\u3001 \u672c\u66f8\u3067\u306f\u305d\u306e\u3046\u3061\u4ee5\u4e0b3\u7a2e\u985e\u3060\u3051\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u524d\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf (Forward Iterator) \u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf (Bidirectional Iterator) \u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf (Random Access Iterator) \u3053\u306e3\u7a2e\u985e\u306f\u6b21\u306e\u3088\u3046\u306a is-a \u95a2\u4fc2\u304c\u3042\u308a\u307e\u3059\u3002 \u524d\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf \u00b6 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u52d5\u304b\u3059\u5834\u5408\u306b\u524d\u306b\u9032\u3081\u308b\u3053\u3068\u3060\u3051\u304c\u3067\u304d\u307e\u3059\u3002 std::unordered_map \u3084 std::unordered_set \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8a72\u5f53\u3057\u307e\u3059\u3002 std :: unordered_set < int > x = { 0 , 1 , 2 , 3 , 4 }; auto it = x . begin (); std :: cout << * it << std :: endl ; ++ it ; // \u524d\u306b\u9032\u3081\u308b std :: cout << * it << std :: endl ; \u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf \u00b6 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u52d5\u304b\u3059\u5834\u5408\u306b\u524d\u306b\u9032\u3081\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u5f8c\u308d\u3078\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std::map \u3084 std::set \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8a72\u5f53\u3057\u307e\u3059\u3002 std :: set < int > x = { 0 , 1 , 2 , 3 , 4 }; auto it = x . begin (); std :: cout << * it << std :: endl ; // 0 ++ it ; // \u524d\u306b\u9032\u3081\u308b std :: cout << * it << std :: endl ; // 1 -- it ; // \u5f8c\u308d\u3078\u623b\u3059 std :: cout << * it << std :: endl ; // 0 \u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf \u00b6 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u52d5\u304b\u3059\u5834\u5408\u306b\u4efb\u610f\u306e\u4f4d\u7f6e\u3078\u52d5\u304b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std::array \u3084 std::vector \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8a72\u5f53\u3057\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; auto it = x . begin (); std :: cout << * it << std :: endl ; // 0 ++ it ; // \u524d\u306b\u9032\u3081\u308b std :: cout << * it << std :: endl ; // 1 -- it ; // \u5f8c\u308d\u3078\u623b\u3059 std :: cout << * it << std :: endl ; // 0 it = it + 3 ; // 3\u3064\u524d\u306b\u9032\u3081\u308b std :: cout << * it << std :: endl ; // 3 // it \u306f\u5909\u66f4\u305b\u305a\u306b it \u304b\u30892\u3064\u5f8c\u308d\u3078\u623b\u3057\u305f\u8981\u7d20\u3092\u53c2\u7167 std :: cout << it [ - 2 ] << std :: endl ; // 1 (it \u304b\u30892\u3064\u5f8c\u308d\u3078\u623b\u3057\u305f\u8981\u7d20) std :: cout << * it << std :: endl ; // 3 (it \u306f\u5909\u66f4\u3055\u308c\u3066\u3044\u306a\u3044) \u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u53c2\u7167\u306e\u7121\u52b9\u5316 \u00b6 \u8981\u7d20\u306e\u8ffd\u52a0\u3084\u524a\u9664\u3092\u884c\u3046\u3068 \u65e2\u5b58\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3084\u8981\u7d20\u3078\u306e\u53c2\u7167\u304c\u7121\u52b9\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u7121\u52b9\u5316\u3055\u308c\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3084\u53c2\u7167\u3092\u4f7f\u7528\u3057\u305f\u5834\u5408\u306e\u6319\u52d5\u306f\u672a\u5b9a\u7fa9\u52d5\u4f5c (\u4fdd\u8a3c\u3055\u308c\u306a\u3044) \u3067\u3059\u3002 \u305f\u3068\u3048\u3070 std::vector \u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3068\u3001 \u524a\u9664\u3057\u305f\u8981\u7d20\u306e\u4f4d\u7f6e\u3068\u305d\u308c\u4ee5\u964d\u306e\u4f4d\u7f6e\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u53c2\u7167\u304c\u7121\u52b9\u5316\u3055\u308c\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 , 5 , 6 }; auto it1 = x . begin () + 2 ; auto it2 = x . begin () + 3 ; auto it3 = x . begin () + 4 ; std :: cout << * it1 << std :: endl ; // 2 std :: cout << * it2 << std :: endl ; // 3 std :: cout << * it3 << std :: endl ; // 4 x . erase ( x . begin () + 3 ); // index=3 \u306e\u8981\u7d20\u3092\u524a\u9664 std :: cout << * it1 << std :: endl ; // 2 (\u6709\u52b9\u306a\u307e\u307e) std :: cout << * it2 << std :: endl ; // \u672a\u5b9a\u7fa9\u52d5\u4f5c (\u7121\u52b9\u5316\u3055\u308c\u308b) std :: cout << * it3 << std :: endl ; // \u672a\u5b9a\u7fa9\u52d5\u4f5c (\u7121\u52b9\u5316\u3055\u308c\u308b)","title":"3.8. \u30a4\u30c6\u30ec\u30fc\u30bf"},{"location":"ch03-08-iterators/#_1","text":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\u30b3\u30f3\u30c6\u30ca\u5185\u3067\u306e\u8981\u7d20\u306e\u4f4d\u7f6e\u3092\u6307\u3059\u3082\u306e\u3067\u3001 \u30dd\u30a4\u30f3\u30bf\u306e\u3088\u3046\u306b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067 \u30b3\u30f3\u30c6\u30ca\u306e\u7a2e\u985e\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3067\u51e6\u7406\u3092\u5171\u901a\u5316\u3067\u304d\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; // begin() \u3067\u30b3\u30f3\u30c6\u30ca\u5185\u306e\u5148\u982d\u8981\u7d20\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97 auto it = x . begin (); // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u8981\u7d20\u3092\u51fa\u529b std :: cout << * it << std :: endl ; // 0 // \u30a4\u30c6\u30ec\u30fc\u30bf\u30921\u3064\u9032\u3081\u308b ++ it ; // \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u8981\u7d20\u3092\u51fa\u529b std :: cout << * it << std :: endl ; // 1 \u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u3092\u53c2\u7167\u3059\u308b\u306b\u306f \u30dd\u30a4\u30f3\u30bf\u306e\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u540c\u69d8\u306b * \u3092\u3064\u3051\u307e\u3059\u3002 \u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u30671\u3064\u9032\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; // end() \u3067\u30b3\u30f3\u30c6\u30ca\u5185\u306e\u6700\u7d42\u8981\u7d20\u306e1\u3064\u5148\u3092\u6307\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d6\u5f97 for ( auto it = x . begin (); it != x . end (); ++ it ) { std :: cout << * it << std :: endl ; } end() \u3067\u53d6\u5f97\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u6700\u7d42\u8981\u7d20\u3067\u306f\u306a\u304f\u3001 \u6700\u7d42\u8981\u7d20\u306e1\u3064\u5148\u3067\u3042\u308b\u305f\u3081\u30eb\u30fc\u30d7\u306e\u7d42\u4e86\u6761\u4ef6\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u30b3\u30f3\u30c6\u30ca\u306e\u7a2e\u985e\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3067\u51e6\u7406\u3092\u884c\u3048\u308b\u305f\u3081\u3001 \u6b21\u306e\u3088\u3046\u306b std::set \u306b\u5909\u66f4\u3057\u3066\u3082\u305d\u306e\u307e\u307e\u52d5\u4f5c\u3057\u307e\u3059\u3002 std :: set < int > x = { 0 , 1 , 2 , 3 , 4 }; for ( auto it = x . begin (); it != x . end (); ++ it ) { std :: cout << * it << std :: endl ; } \u3053\u306e\u6027\u8cea\u306b\u3088\u3063\u3066\u30b3\u30f3\u30c6\u30ca\u306e\u7a2e\u985e\u306b\u4f9d\u5b58\u305b\u305a <algorithm> \u3067\u63d0\u4f9b\u3055\u308c\u308b\u6a5f\u80fd\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 #include <algorithm> std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; // std::count_if \u306f\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30b3\u30f3\u30c6\u30ca\u8981\u7d20\u306e\u500b\u6570\u3092\u6570\u3048\u308b\u51e6\u7406 // - \u7b2c1\u5f15\u6570\u3068\u7b2c2\u5f15\u6570\u3067\u7bc4\u56f2\u3092\u6307\u5b9a // - \u7b2c3\u5f15\u6570\u3067\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u6761\u4ef6\u3092\u6307\u5b9a auto n = std :: count_if ( x . begin (), x . end (), []( const int v ) { // 0 \u3088\u308a\u5927\u304d\u3044 2 \u306e\u500d\u6570 if ( v <= 0 ) { return false ; } if ( v % 2 != 0 ) { return false ; } return true ; }); std :: cout << n << std :: endl ; // 2","title":"\u30a4\u30c6\u30ec\u30fc\u30bf"},{"location":"ch03-08-iterators/#_2","text":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30f3\u30c6\u30ca\u3068\u3057\u3066\u3001\u4ee3\u8868\u7684\u306a\u3082\u306e\u306f\u30b3\u30f3\u30c6\u30ca\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u63d0\u4f9b\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca\u3067\u3059\u3002 \u30b3\u30f3\u30c6\u30ca\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u63d0\u4f9b\u3055\u308c\u308b\u30b3\u30f3\u30c6\u30ca\u306f STL \u30b3\u30f3\u30c6\u30ca\u3068\u547c\u3070\u308c\u3001\u672c\u66f8\u3067\u7d39\u4ecb\u3057\u305f\u4ee5\u4e0b\u3082\u306e\u304c\u8a72\u5f53\u3057\u307e\u3059\u3002 std::array std::vector std::map std::set std::unordered_map std::unordered_set STL \u30b3\u30f3\u30c6\u30ca\u306e\u4e00\u89a7\u306f \u30b3\u30f3\u30c6\u30ca\u30e9\u30a4\u30d6\u30e9\u30ea - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 STL \u30b3\u30f3\u30c6\u30ca\u4ee5\u5916\u306b\u3082 std::string \u306a\u3069\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002","title":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30f3\u30c6\u30ca"},{"location":"ch03-08-iterators/#_3","text":"std::map \u3084 std::unordered_map \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6307\u3059\u8981\u7d20\u306f\u30da\u30a2\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u30da\u30a2\u306f first \u304c\u30ad\u30fc\u3067 second \u304c\u5024\u3067\u3059\u3002 std :: map < std :: string , int > persons = { { \"Alice\" , 18 }, { \"Bob\" , 20 } }; for ( auto it = persons . begin (); it != persons . end (); ++ it ) { const auto & person = * it ; // std::pair<std::string, int> const std :: string & name = person . first ; const int age = person . second ; std :: cout << name << \": \" << age << std :: endl ; }","title":"\u30de\u30c3\u30d7\u306e\u30a4\u30c6\u30ec\u30fc\u30bf"},{"location":"ch03-08-iterators/#_4","text":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306f5\u7a2e\u985e\u3042\u308a\u307e\u3059\u304c\u3001 \u672c\u66f8\u3067\u306f\u305d\u306e\u3046\u3061\u4ee5\u4e0b3\u7a2e\u985e\u3060\u3051\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u524d\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf (Forward Iterator) \u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf (Bidirectional Iterator) \u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf (Random Access Iterator) \u3053\u306e3\u7a2e\u985e\u306f\u6b21\u306e\u3088\u3046\u306a is-a \u95a2\u4fc2\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7a2e\u985e"},{"location":"ch03-08-iterators/#_5","text":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u52d5\u304b\u3059\u5834\u5408\u306b\u524d\u306b\u9032\u3081\u308b\u3053\u3068\u3060\u3051\u304c\u3067\u304d\u307e\u3059\u3002 std::unordered_map \u3084 std::unordered_set \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8a72\u5f53\u3057\u307e\u3059\u3002 std :: unordered_set < int > x = { 0 , 1 , 2 , 3 , 4 }; auto it = x . begin (); std :: cout << * it << std :: endl ; ++ it ; // \u524d\u306b\u9032\u3081\u308b std :: cout << * it << std :: endl ;","title":"\u524d\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf"},{"location":"ch03-08-iterators/#_6","text":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u52d5\u304b\u3059\u5834\u5408\u306b\u524d\u306b\u9032\u3081\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u5f8c\u308d\u3078\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std::map \u3084 std::set \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8a72\u5f53\u3057\u307e\u3059\u3002 std :: set < int > x = { 0 , 1 , 2 , 3 , 4 }; auto it = x . begin (); std :: cout << * it << std :: endl ; // 0 ++ it ; // \u524d\u306b\u9032\u3081\u308b std :: cout << * it << std :: endl ; // 1 -- it ; // \u5f8c\u308d\u3078\u623b\u3059 std :: cout << * it << std :: endl ; // 0","title":"\u53cc\u65b9\u5411\u30a4\u30c6\u30ec\u30fc\u30bf"},{"location":"ch03-08-iterators/#_7","text":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u52d5\u304b\u3059\u5834\u5408\u306b\u4efb\u610f\u306e\u4f4d\u7f6e\u3078\u52d5\u304b\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std::array \u3084 std::vector \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8a72\u5f53\u3057\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; auto it = x . begin (); std :: cout << * it << std :: endl ; // 0 ++ it ; // \u524d\u306b\u9032\u3081\u308b std :: cout << * it << std :: endl ; // 1 -- it ; // \u5f8c\u308d\u3078\u623b\u3059 std :: cout << * it << std :: endl ; // 0 it = it + 3 ; // 3\u3064\u524d\u306b\u9032\u3081\u308b std :: cout << * it << std :: endl ; // 3 // it \u306f\u5909\u66f4\u305b\u305a\u306b it \u304b\u30892\u3064\u5f8c\u308d\u3078\u623b\u3057\u305f\u8981\u7d20\u3092\u53c2\u7167 std :: cout << it [ - 2 ] << std :: endl ; // 1 (it \u304b\u30892\u3064\u5f8c\u308d\u3078\u623b\u3057\u305f\u8981\u7d20) std :: cout << * it << std :: endl ; // 3 (it \u306f\u5909\u66f4\u3055\u308c\u3066\u3044\u306a\u3044)","title":"\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u30a4\u30c6\u30ec\u30fc\u30bf"},{"location":"ch03-08-iterators/#_8","text":"\u8981\u7d20\u306e\u8ffd\u52a0\u3084\u524a\u9664\u3092\u884c\u3046\u3068 \u65e2\u5b58\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3084\u8981\u7d20\u3078\u306e\u53c2\u7167\u304c\u7121\u52b9\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u7121\u52b9\u5316\u3055\u308c\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3084\u53c2\u7167\u3092\u4f7f\u7528\u3057\u305f\u5834\u5408\u306e\u6319\u52d5\u306f\u672a\u5b9a\u7fa9\u52d5\u4f5c (\u4fdd\u8a3c\u3055\u308c\u306a\u3044) \u3067\u3059\u3002 \u305f\u3068\u3048\u3070 std::vector \u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u3068\u3001 \u524a\u9664\u3057\u305f\u8981\u7d20\u306e\u4f4d\u7f6e\u3068\u305d\u308c\u4ee5\u964d\u306e\u4f4d\u7f6e\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u53c2\u7167\u304c\u7121\u52b9\u5316\u3055\u308c\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 , 5 , 6 }; auto it1 = x . begin () + 2 ; auto it2 = x . begin () + 3 ; auto it3 = x . begin () + 4 ; std :: cout << * it1 << std :: endl ; // 2 std :: cout << * it2 << std :: endl ; // 3 std :: cout << * it3 << std :: endl ; // 4 x . erase ( x . begin () + 3 ); // index=3 \u306e\u8981\u7d20\u3092\u524a\u9664 std :: cout << * it1 << std :: endl ; // 2 (\u6709\u52b9\u306a\u307e\u307e) std :: cout << * it2 << std :: endl ; // \u672a\u5b9a\u7fa9\u52d5\u4f5c (\u7121\u52b9\u5316\u3055\u308c\u308b) std :: cout << * it3 << std :: endl ; // \u672a\u5b9a\u7fa9\u52d5\u4f5c (\u7121\u52b9\u5316\u3055\u308c\u308b)","title":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u53c2\u7167\u306e\u7121\u52b9\u5316"},{"location":"ch03-09-range-based-for/","text":"\u7bc4\u56f2 for \u00b6 \u30b3\u30f3\u30c6\u30ca \u00b6 \u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30f3\u30c6\u30ca\u3067\u306f\u3001 \u30b3\u30f3\u30c6\u30ca\u306e\u30eb\u30fc\u30d7\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; for ( const auto e : x ) { std :: cout << e << std :: endl ; } \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u305f\u5834\u5408\u3068\u540c\u3058\u6319\u52d5\u306b\u306a\u308a\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; for ( auto it = x . begin (); it != x . end (); ++ it ) { std :: cout << * it << std :: endl ; } \u914d\u5217 \u00b6 \u914d\u5217\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u5b9a\u3067\u304d\u308b\u7b87\u6240\u3067\u306f\u3001 \u914d\u5217\u306e\u30eb\u30fc\u30d7\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 }; for ( auto e : x ) { std :: cout << e << std :: endl ; } \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u305f\u5834\u5408\u3068\u540c\u3058\u6319\u52d5\u306b\u306a\u308a\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 }; for ( int i = 0 ; i < 5 ; ++ i ) { std :: cout << x [ i ] << std :: endl ; }","title":"3.9. \u7bc4\u56f2 for"},{"location":"ch03-09-range-based-for/#for","text":"","title":"\u7bc4\u56f2 for"},{"location":"ch03-09-range-based-for/#_1","text":"\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3067\u304d\u308b\u30b3\u30f3\u30c6\u30ca\u3067\u306f\u3001 \u30b3\u30f3\u30c6\u30ca\u306e\u30eb\u30fc\u30d7\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; for ( const auto e : x ) { std :: cout << e << std :: endl ; } \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u305f\u5834\u5408\u3068\u540c\u3058\u6319\u52d5\u306b\u306a\u308a\u307e\u3059\u3002 std :: vector < int > x = { 0 , 1 , 2 , 3 , 4 }; for ( auto it = x . begin (); it != x . end (); ++ it ) { std :: cout << * it << std :: endl ; }","title":"\u30b3\u30f3\u30c6\u30ca"},{"location":"ch03-09-range-based-for/#_2","text":"\u914d\u5217\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u5b9a\u3067\u304d\u308b\u7b87\u6240\u3067\u306f\u3001 \u914d\u5217\u306e\u30eb\u30fc\u30d7\u3092\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 }; for ( auto e : x ) { std :: cout << e << std :: endl ; } \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3044\u305f\u5834\u5408\u3068\u540c\u3058\u6319\u52d5\u306b\u306a\u308a\u307e\u3059\u3002 int x [] = { 0 , 1 , 2 , 3 , 4 }; for ( int i = 0 ; i < 5 ; ++ i ) { std :: cout << x [ i ] << std :: endl ; }","title":"\u914d\u5217"},{"location":"ch04-01-declarations-and-definitions/","text":"\u5ba3\u8a00\u3068\u5b9a\u7fa9 \u00b6 \u95a2\u6570\u3084\u5909\u6570\u306f\u3001\u5ba3\u8a00\u3068\u5b9a\u7fa9\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u5ba3\u8a00\u3068\u5b9a\u7fa9\u306f\u3001\u533a\u5225\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002 \u5ba3\u8a00 \u00b6 \u5ba3\u8a00\u306f\u3001\u578b\u306e\u60c5\u5831\u3084\u540d\u524d\u306a\u3069\u306e\u30b7\u30f3\u30dc\u30eb\u306e\u6982\u8981\u3092\u793a\u3059\u3053\u3068\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002 void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } \u3053\u306e\u95a2\u6570\u306e\u5ba3\u8a00\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002 void HelloWorld (); \u95a2\u6570\u306e {} \u306e\u524d\u306b\u66f8\u3044\u3066\u3042\u308b\u8fd4\u308a\u5024\u306e\u578b\u30fb\u95a2\u6570\u540d\u30fb\u5f15\u6570\u30ea\u30b9\u30c8\u3092\u66f8\u304f\u3060\u3051\u3067\u5ba3\u8a00\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u306e\u5ba3\u8a00\u306f\u3001\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u5ba3\u8a00\u306f\u91cd\u8907\u3057\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002 void HelloWorld (); // \u5ba3\u8a00 void HelloWorld (); // \u91cd\u8907\u3057\u3066\u3082OK \u5909\u6570\u306e\u5ba3\u8a00 \u95a2\u6570\u3068\u9055\u3044\u3001\u5909\u6570\u306e\u5ba3\u8a00\u3092\u3059\u308b\u5834\u5408\u306f extern \u6307\u5b9a\u5b50\u3092\u4ed8\u4e0e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 extern int x ; // \u5ba3\u8a00 extern int x ; // \u91cd\u8907\u3057\u3066\u3082OK extern \u6307\u5b9a\u5b50\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u8a18\u61b6\u57df\u30af\u30e9\u30b9\u6307\u5b9a\u5b50 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5b9a\u7fa9 \u00b6 \u5b9a\u7fa9\u306f\u3001\u30b7\u30f3\u30dc\u30eb\u306e\u8a73\u7d30\u3092\u793a\u3059\u3053\u3068\u3067\u3059\u3002 \u5b9a\u7fa9\u304c\u3042\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u30b7\u30f3\u30dc\u30eb\u304c\u5177\u4f53\u7684\u306b\u3069\u3046\u3044\u3046\u3082\u306e\u306a\u306e\u304b\u5206\u304b\u308a\u307e\u3059\u3002 \u5b9a\u7fa9\u3092\u3057\u305f\u5834\u5408\u306f\u3001\u5408\u308f\u305b\u3066\u5ba3\u8a00\u304c\u884c\u308f\u308c\u305f\u3053\u3068\u306b\u3082\u306a\u308a\u307e\u3059\u3002 \u95a2\u6570\u306e\u5834\u5408\u306f\u3001\u5b9f\u88c5\u305d\u306e\u3082\u306e\u304c\u5b9a\u7fa9\u3068\u3057\u3066\u307f\u306a\u3055\u308c\u307e\u3059\u3002 // \u95a2\u6570\u306e\u5b9a\u7fa9\u3002\u5ba3\u8a00\u3082\u517c\u306d\u3066\u3044\u308b\u3002 void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } \u5909\u6570\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3060\u3051\u3067\u5b9a\u7fa9\u304c\u3055\u308c\u307e\u3059\u3002 int x ; // \u5909\u6570\u306e\u5b9a\u7fa9\u3002\u5ba3\u8a00\u3082\u517c\u306d\u3066\u3044\u308b\u3002 int x = 100 ; // \u5b9a\u7fa9\u3092\u3057\u3064\u3064\u521d\u671f\u5316\u3002\u5ba3\u8a00\u3082\u517c\u306d\u3066\u3044\u308b\u3002 \u5b9a\u7fa9\u306f\u91cd\u8907\u304c\u8a31\u3055\u308c\u307e\u305b\u3093\u3002 \u5b9a\u7fa9\u3055\u308c\u305f\u30b7\u30f3\u30dc\u30eb\u3092\u5229\u7528\u3059\u308b\u5074\u304c\u3001\u3069\u308c\u3092\u4f7f\u3048\u3070\u826f\u3044\u306e\u304b\u5224\u5225\u3067\u304d\u306a\u304f\u306a\u308b\u305f\u3081\u3001\u30ea\u30f3\u30af\u6642\u306b\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 int x ; int x ; // \u91cd\u8907\u306e\u305f\u3081\u30a8\u30e9\u30fc void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } void HelloWorld () { // \u91cd\u8907\u306e\u305f\u3081\u30a8\u30e9\u30fc std :: cout << \"Hello World!!!!!!\" << std :: endl ; } \u5ba3\u8a00\u3055\u308c\u305f\u30b7\u30f3\u30dc\u30eb\u3092\u5229\u7528\u3059\u308b\u30b3\u30fc\u30c9\u304c\u3042\u308b\u5834\u5408\u3001\u5b9a\u7fa9\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u5ba3\u8a00\u306e\u307f\u3060\u3068\u3001\u305d\u306e\u95a2\u6570\u3084\u5909\u6570\u304c\u5177\u4f53\u7684\u306b\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u306a\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u305f\u3081\u3067\u3059\u3002 void HelloWorld (); // \u5ba3\u8a00 int main () { HelloWorld (); // \u5b9a\u7fa9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u305f\u3081\u30a8\u30e9\u30fc return 0 ; }","title":"4.1. \u5ba3\u8a00\u3068\u5b9a\u7fa9"},{"location":"ch04-01-declarations-and-definitions/#_1","text":"\u95a2\u6570\u3084\u5909\u6570\u306f\u3001\u5ba3\u8a00\u3068\u5b9a\u7fa9\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u5ba3\u8a00\u3068\u5b9a\u7fa9\u306f\u3001\u533a\u5225\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002","title":"\u5ba3\u8a00\u3068\u5b9a\u7fa9"},{"location":"ch04-01-declarations-and-definitions/#_2","text":"\u5ba3\u8a00\u306f\u3001\u578b\u306e\u60c5\u5831\u3084\u540d\u524d\u306a\u3069\u306e\u30b7\u30f3\u30dc\u30eb\u306e\u6982\u8981\u3092\u793a\u3059\u3053\u3068\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002 void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } \u3053\u306e\u95a2\u6570\u306e\u5ba3\u8a00\u306f\u6b21\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002 void HelloWorld (); \u95a2\u6570\u306e {} \u306e\u524d\u306b\u66f8\u3044\u3066\u3042\u308b\u8fd4\u308a\u5024\u306e\u578b\u30fb\u95a2\u6570\u540d\u30fb\u5f15\u6570\u30ea\u30b9\u30c8\u3092\u66f8\u304f\u3060\u3051\u3067\u5ba3\u8a00\u3067\u304d\u307e\u3059\u3002 \u95a2\u6570\u306e\u5ba3\u8a00\u306f\u3001\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3068\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u5ba3\u8a00\u306f\u91cd\u8907\u3057\u3066\u3082\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002 void HelloWorld (); // \u5ba3\u8a00 void HelloWorld (); // \u91cd\u8907\u3057\u3066\u3082OK \u5909\u6570\u306e\u5ba3\u8a00 \u95a2\u6570\u3068\u9055\u3044\u3001\u5909\u6570\u306e\u5ba3\u8a00\u3092\u3059\u308b\u5834\u5408\u306f extern \u6307\u5b9a\u5b50\u3092\u4ed8\u4e0e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 extern int x ; // \u5ba3\u8a00 extern int x ; // \u91cd\u8907\u3057\u3066\u3082OK extern \u6307\u5b9a\u5b50\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u8a18\u61b6\u57df\u30af\u30e9\u30b9\u6307\u5b9a\u5b50 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u5ba3\u8a00"},{"location":"ch04-01-declarations-and-definitions/#_3","text":"\u5b9a\u7fa9\u306f\u3001\u30b7\u30f3\u30dc\u30eb\u306e\u8a73\u7d30\u3092\u793a\u3059\u3053\u3068\u3067\u3059\u3002 \u5b9a\u7fa9\u304c\u3042\u308b\u3053\u3068\u3067\u3001\u305d\u306e\u30b7\u30f3\u30dc\u30eb\u304c\u5177\u4f53\u7684\u306b\u3069\u3046\u3044\u3046\u3082\u306e\u306a\u306e\u304b\u5206\u304b\u308a\u307e\u3059\u3002 \u5b9a\u7fa9\u3092\u3057\u305f\u5834\u5408\u306f\u3001\u5408\u308f\u305b\u3066\u5ba3\u8a00\u304c\u884c\u308f\u308c\u305f\u3053\u3068\u306b\u3082\u306a\u308a\u307e\u3059\u3002 \u95a2\u6570\u306e\u5834\u5408\u306f\u3001\u5b9f\u88c5\u305d\u306e\u3082\u306e\u304c\u5b9a\u7fa9\u3068\u3057\u3066\u307f\u306a\u3055\u308c\u307e\u3059\u3002 // \u95a2\u6570\u306e\u5b9a\u7fa9\u3002\u5ba3\u8a00\u3082\u517c\u306d\u3066\u3044\u308b\u3002 void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } \u5909\u6570\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3060\u3051\u3067\u5b9a\u7fa9\u304c\u3055\u308c\u307e\u3059\u3002 int x ; // \u5909\u6570\u306e\u5b9a\u7fa9\u3002\u5ba3\u8a00\u3082\u517c\u306d\u3066\u3044\u308b\u3002 int x = 100 ; // \u5b9a\u7fa9\u3092\u3057\u3064\u3064\u521d\u671f\u5316\u3002\u5ba3\u8a00\u3082\u517c\u306d\u3066\u3044\u308b\u3002 \u5b9a\u7fa9\u306f\u91cd\u8907\u304c\u8a31\u3055\u308c\u307e\u305b\u3093\u3002 \u5b9a\u7fa9\u3055\u308c\u305f\u30b7\u30f3\u30dc\u30eb\u3092\u5229\u7528\u3059\u308b\u5074\u304c\u3001\u3069\u308c\u3092\u4f7f\u3048\u3070\u826f\u3044\u306e\u304b\u5224\u5225\u3067\u304d\u306a\u304f\u306a\u308b\u305f\u3081\u3001\u30ea\u30f3\u30af\u6642\u306b\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 int x ; int x ; // \u91cd\u8907\u306e\u305f\u3081\u30a8\u30e9\u30fc void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } void HelloWorld () { // \u91cd\u8907\u306e\u305f\u3081\u30a8\u30e9\u30fc std :: cout << \"Hello World!!!!!!\" << std :: endl ; } \u5ba3\u8a00\u3055\u308c\u305f\u30b7\u30f3\u30dc\u30eb\u3092\u5229\u7528\u3059\u308b\u30b3\u30fc\u30c9\u304c\u3042\u308b\u5834\u5408\u3001\u5b9a\u7fa9\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u5ba3\u8a00\u306e\u307f\u3060\u3068\u3001\u305d\u306e\u95a2\u6570\u3084\u5909\u6570\u304c\u5177\u4f53\u7684\u306b\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u306a\u306e\u304b\u5206\u304b\u3089\u306a\u3044\u305f\u3081\u3067\u3059\u3002 void HelloWorld (); // \u5ba3\u8a00 int main () { HelloWorld (); // \u5b9a\u7fa9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u305f\u3081\u30a8\u30e9\u30fc return 0 ; }","title":"\u5b9a\u7fa9"},{"location":"ch04-02-multiple-files/","text":"\u8907\u6570\u30d5\u30a1\u30a4\u30eb \u00b6 \u30d5\u30a1\u30a4\u30eb\u306e\u7a2e\u985e \u00b6 C++ \u3067\u306f2\u7a2e\u985e\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3044\u307e\u3059\u3002 \u30d8\u30c3\u30c0 (\u62e1\u5f35\u5b50: .h , .hpp ) \u95a2\u6570\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9 (\u62e1\u5f35\u5b50: .cpp , .cc , .cxx ) \u95a2\u6570\u306e\u5b9f\u88c5\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u5206\u3051\u308b \u00b6 1 \u3064\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u7d9a\u3051\u3066\u3044\u308b\u3068\u3001 \u30b3\u30fc\u30c9\u306e\u91cf\u304c\u591a\u304f\u306a\u3063\u305f\u6642\u306b\u3001\u8aad\u307f\u306b\u304f\u304f\u306a\u3063\u305f\u308a\u3001\u66f8\u304d\u306b\u304f\u304f\u306a\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3001 \u9069\u5ea6\u306b\u30b3\u30fc\u30c9\u3092\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8de8\u3044\u3060\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 main.cc \u5185\u3067 a.cc \u306e\u95a2\u6570\u3092\u4f7f\u3046\u305f\u3081\u306b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u3057\u3066\u3044\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void DoSomething (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething2 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething3 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething4 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething5 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 int main () { DoSomething (); DoSomething2 (); DoSomething3 (); DoSomething4 (); DoSomething5 (); return 0 ; } a.cc 1 2 3 4 5 void DoSomething () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething2 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething3 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething4 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething5 () { /* \u5b9f\u88c5\u7701\u7565 */ } \u8907\u6570\u30d5\u30a1\u30a4\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb \u8907\u6570\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3044\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u4e26\u3079\u3066\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.cc a.cc \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u3082\u52d5\u4f5c\u306f\u3057\u307e\u3059\u304c\u3001 a.cc \u306b\u8a18\u8ff0\u3057\u3066\u3044\u308b\u95a2\u6570\u3092\u4ed6\u306e\u69d8\u3005\u306a\u30bd\u30fc\u30b9\u304b\u3089\u5229\u7528\u3057\u305f\u3044\u3068\u306a\u3063\u305f\u5834\u5408\u306b\u3001 \u305d\u306e\u90fd\u5ea6\u3001\u305d\u308c\u305e\u308c\u306e\u30bd\u30fc\u30b9\u306b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u3001\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092\u5229\u7528\u3059\u308b \u00b6 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u5206\u3051\u308b\u3060\u3051\u3067\u306f\u3001\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u304c\u3001\u5408\u308f\u305b\u3066\u30d8\u30c3\u30c0\u3092\u4f7f\u3046\u3053\u3068\u3067\u7c21\u6f54\u306b\u306a\u308a\u307e\u3059\u3002 \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3060\u3051\u30d8\u30c3\u30c0\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\u5ba3\u8a00\u3092 1 \u56de\u66f8\u304f\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 #include \"a.h\" int main () { DoSomething (); DoSomething2 (); DoSomething3 (); DoSomething4 (); DoSomething5 (); return 0 ; } a.h 1 2 3 4 5 void DoSomething (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething2 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething3 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething4 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething5 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 a.cc 1 2 3 4 5 void DoSomething () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething2 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething3 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething4 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething5 () { /* \u5b9f\u88c5\u7701\u7565 */ } main.cc \u5185\u3067 a.cc \u306e\u95a2\u6570\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b a.h \u3067 a.cc \u306e\u95a2\u6570\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u3057\u307e\u3059\u3002 main.cc \u3067 a.h \u3092\u53d6\u308a\u8fbc\u3080\u305f\u3081\u306b #include \"a.h\" \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u3053\u308c\u3067 main.cc \u304b\u3089 a.cc \u306e\u95a2\u6570\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u4f8b\u3048\u3001\u4ed6\u306e\u30bd\u30fc\u30b9\u304b\u3089 a.cc \u306e\u95a2\u6570\u3092\u5229\u7528\u3057\u305f\u3044\u3068\u306a\u3063\u3066\u3082\u3001\u305d\u306e\u30bd\u30fc\u30b9\u6bce\u306b #include \"a.h\" \u3092\u8a18\u8ff0\u3059\u308b\u3060\u3051\u3067\u6e08\u307f\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u306f\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # a.h \u306f\u6307\u5b9a\u3057\u306a\u304f\u3066\u826f\u3044 g++ -std = c++11 main.cc a.cc \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9 \u00b6 \u30d8\u30c3\u30c0\u306b\u306f\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 a.h 1 2 3 4 5 6 7 #ifndef A_H_ #define A_H_ void DoSomething (); void DoSomething2 (); #endif // A_H_ \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u304c\u3042\u308b\u3053\u3068\u3067\u3001\u30bd\u30fc\u30b9\u304c\u540c\u3058\u30d8\u30c3\u30c0\u3092\u8907\u6570\u56de\u53d6\u308a\u8fbc\u3080\u4e8b\u304c\u306a\u304f\u306a\u308a\u3001 \u5909\u6570\u3084\u95a2\u6570\u306e\u5b9a\u7fa9\u304c\u91cd\u8907\u3059\u308b\u3053\u3068\u3092\u9632\u3052\u307e\u3059\u3002 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u306f\u4e00\u822c\u7684\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3054\u3068\u306b\u547d\u540d\u898f\u5247\u3092\u8a2d\u3051\u307e\u3059\u3002 \u4f7f\u7528\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u540d\u524d _ \u3067\u59cb\u307e\u308b\u540d\u524d\u3084 __ \u3092\u542b\u3080\u3088\u3046\u306a\u540d\u524d\u306f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u3084\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3066\u4e88\u7d04\u3055\u308c\u3066\u3044\u308b\u8b58\u5225\u5b50\u3068\u540d\u524d\u304c\u88ab\u308b\u6050\u308c\u304c\u3042\u308b\u305f\u3081\u4f7f\u3063\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 #define _A_H_ // _ \u3067\u59cb\u307e\u308b\u306e\u3067NG #define A__H_ // __ \u3092\u542b\u3080\u306e\u3067NG \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u306f\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u53f8\u4ee4\u306e\u4ed5\u7d44\u307f\u3092\u7528\u3044\u3066\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002 \u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u53f8\u4ee4\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001 \u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u53f8\u4ee4 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"4.2. \u8907\u6570\u30d5\u30a1\u30a4\u30eb"},{"location":"ch04-02-multiple-files/#_1","text":"","title":"\u8907\u6570\u30d5\u30a1\u30a4\u30eb"},{"location":"ch04-02-multiple-files/#_2","text":"C++ \u3067\u306f2\u7a2e\u985e\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3044\u307e\u3059\u3002 \u30d8\u30c3\u30c0 (\u62e1\u5f35\u5b50: .h , .hpp ) \u95a2\u6570\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9 (\u62e1\u5f35\u5b50: .cpp , .cc , .cxx ) \u95a2\u6570\u306e\u5b9f\u88c5\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002","title":"\u30d5\u30a1\u30a4\u30eb\u306e\u7a2e\u985e"},{"location":"ch04-02-multiple-files/#_3","text":"1 \u3064\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u7d9a\u3051\u3066\u3044\u308b\u3068\u3001 \u30b3\u30fc\u30c9\u306e\u91cf\u304c\u591a\u304f\u306a\u3063\u305f\u6642\u306b\u3001\u8aad\u307f\u306b\u304f\u304f\u306a\u3063\u305f\u308a\u3001\u66f8\u304d\u306b\u304f\u304f\u306a\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u3001 \u9069\u5ea6\u306b\u30b3\u30fc\u30c9\u3092\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8de8\u3044\u3060\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 main.cc \u5185\u3067 a.cc \u306e\u95a2\u6570\u3092\u4f7f\u3046\u305f\u3081\u306b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u3057\u3066\u3044\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 void DoSomething (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething2 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething3 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething4 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething5 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 int main () { DoSomething (); DoSomething2 (); DoSomething3 (); DoSomething4 (); DoSomething5 (); return 0 ; } a.cc 1 2 3 4 5 void DoSomething () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething2 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething3 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething4 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething5 () { /* \u5b9f\u88c5\u7701\u7565 */ } \u8907\u6570\u30d5\u30a1\u30a4\u30eb\u306e\u30b3\u30f3\u30d1\u30a4\u30eb \u8907\u6570\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u3044\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u4e26\u3079\u3066\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.cc a.cc \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u3082\u52d5\u4f5c\u306f\u3057\u307e\u3059\u304c\u3001 a.cc \u306b\u8a18\u8ff0\u3057\u3066\u3044\u308b\u95a2\u6570\u3092\u4ed6\u306e\u69d8\u3005\u306a\u30bd\u30fc\u30b9\u304b\u3089\u5229\u7528\u3057\u305f\u3044\u3068\u306a\u3063\u305f\u5834\u5408\u306b\u3001 \u305d\u306e\u90fd\u5ea6\u3001\u305d\u308c\u305e\u308c\u306e\u30bd\u30fc\u30b9\u306b\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u3001\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002","title":"\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u5206\u3051\u308b"},{"location":"ch04-02-multiple-files/#_4","text":"\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u5206\u3051\u308b\u3060\u3051\u3067\u306f\u3001\u624b\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u304c\u3001\u5408\u308f\u305b\u3066\u30d8\u30c3\u30c0\u3092\u4f7f\u3046\u3053\u3068\u3067\u7c21\u6f54\u306b\u306a\u308a\u307e\u3059\u3002 \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3060\u3051\u30d8\u30c3\u30c0\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u3067\u3001\u5ba3\u8a00\u3092 1 \u56de\u66f8\u304f\u3060\u3051\u3067\u6e08\u3080\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 #include \"a.h\" int main () { DoSomething (); DoSomething2 (); DoSomething3 (); DoSomething4 (); DoSomething5 (); return 0 ; } a.h 1 2 3 4 5 void DoSomething (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething2 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething3 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething4 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 void DoSomething5 (); // \u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00 a.cc 1 2 3 4 5 void DoSomething () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething2 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething3 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething4 () { /* \u5b9f\u88c5\u7701\u7565 */ } void DoSomething5 () { /* \u5b9f\u88c5\u7701\u7565 */ } main.cc \u5185\u3067 a.cc \u306e\u95a2\u6570\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b a.h \u3067 a.cc \u306e\u95a2\u6570\u306e\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3092\u3057\u307e\u3059\u3002 main.cc \u3067 a.h \u3092\u53d6\u308a\u8fbc\u3080\u305f\u3081\u306b #include \"a.h\" \u3068\u8a18\u8ff0\u3057\u307e\u3059\u3002 \u3053\u308c\u3067 main.cc \u304b\u3089 a.cc \u306e\u95a2\u6570\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u4f8b\u3048\u3001\u4ed6\u306e\u30bd\u30fc\u30b9\u304b\u3089 a.cc \u306e\u95a2\u6570\u3092\u5229\u7528\u3057\u305f\u3044\u3068\u306a\u3063\u3066\u3082\u3001\u305d\u306e\u30bd\u30fc\u30b9\u6bce\u306b #include \"a.h\" \u3092\u8a18\u8ff0\u3059\u308b\u3060\u3051\u3067\u6e08\u307f\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u306f\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 # a.h \u306f\u6307\u5b9a\u3057\u306a\u304f\u3066\u826f\u3044 g++ -std = c++11 main.cc a.cc","title":"\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092\u5229\u7528\u3059\u308b"},{"location":"ch04-02-multiple-files/#_5","text":"\u30d8\u30c3\u30c0\u306b\u306f\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 a.h 1 2 3 4 5 6 7 #ifndef A_H_ #define A_H_ void DoSomething (); void DoSomething2 (); #endif // A_H_ \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u304c\u3042\u308b\u3053\u3068\u3067\u3001\u30bd\u30fc\u30b9\u304c\u540c\u3058\u30d8\u30c3\u30c0\u3092\u8907\u6570\u56de\u53d6\u308a\u8fbc\u3080\u4e8b\u304c\u306a\u304f\u306a\u308a\u3001 \u5909\u6570\u3084\u95a2\u6570\u306e\u5b9a\u7fa9\u304c\u91cd\u8907\u3059\u308b\u3053\u3068\u3092\u9632\u3052\u307e\u3059\u3002 \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u306f\u4e00\u822c\u7684\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3054\u3068\u306b\u547d\u540d\u898f\u5247\u3092\u8a2d\u3051\u307e\u3059\u3002 \u4f7f\u7528\u3057\u3066\u306f\u3044\u3051\u306a\u3044\u540d\u524d _ \u3067\u59cb\u307e\u308b\u540d\u524d\u3084 __ \u3092\u542b\u3080\u3088\u3046\u306a\u540d\u524d\u306f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u3084\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3066\u4e88\u7d04\u3055\u308c\u3066\u3044\u308b\u8b58\u5225\u5b50\u3068\u540d\u524d\u304c\u88ab\u308b\u6050\u308c\u304c\u3042\u308b\u305f\u3081\u4f7f\u3063\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002 #define _A_H_ // _ \u3067\u59cb\u307e\u308b\u306e\u3067NG #define A__H_ // __ \u3092\u542b\u3080\u306e\u3067NG \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9\u306f\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u53f8\u4ee4\u306e\u4ed5\u7d44\u307f\u3092\u7528\u3044\u3066\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002 \u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u53f8\u4ee4\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001 \u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u53f8\u4ee4 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30ac\u30fc\u30c9"},{"location":"ch04-03-scopes/","text":"\u30b9\u30b3\u30fc\u30d7 \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u7279\u5b9a\u306e\u7bc4\u56f2\u6bce\u306b\u30b7\u30f3\u30dc\u30eb\u3092\u8b58\u5225\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u7bc4\u56f2\u306e\u3053\u3068\u3092 \u30b9\u30b3\u30fc\u30d7 \u3068\u8a00\u3044\u307e\u3059\u3002 \u540c\u4e00\u306e\u30b9\u30b3\u30fc\u30d7\u5185\u306b\u540c\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u304c\u5b58\u5728\u3057\u305f\u5834\u5408\u3001\u30b7\u30f3\u30dc\u30eb\u3092\u4e00\u610f\u306b\u8b58\u5225\u3059\u308b\u4e8b\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u30ea\u30f3\u30af\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 \u307e\u305f\u3001\u30b9\u30b3\u30fc\u30d7\u3092\u6c7a\u3081\u308b\u7bc4\u56f2\u306e\u3053\u3068\u3092\u30d6\u30ed\u30c3\u30af\u3068\u8a00\u3044\u307e\u3059\u3002 {} \u3067\u62ec\u3089\u308c\u305f\u7bc4\u56f2\u304c\u4e00\u3064\u306e\u30d6\u30ed\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\u3002 \u540d\u524d\u4fee\u98fe\uff08\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\uff09 C++ \u3067\u306f\u540c\u4e00\u306e\u30b9\u30b3\u30fc\u30d7\u5185\u306b\u540c\u540d\u306e\u95a2\u6570\u304c\u3042\u3063\u3066\u3082\u3001\u5f15\u6570\u306e\u578b\u304c\u7570\u306a\u308c\u3070\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\uff08\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09 \u3053\u308c\u306f\u3001\u30b7\u30f3\u30dc\u30eb\u306b\u5f15\u6570\u306e\u578b\u306e\u60c5\u5831\u306a\u3069\u3082\u542b\u3081\u308b\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3092\u884c\u306a\u3063\u305f\u4e0a\u3067\u95a2\u6570\u3092\u4e00\u610f\u306b\u8b58\u5225\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f 11.4 \u52d5\u7684\u30ed\u30fc\u30c9\u3068\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u540d\u524d\u7a7a\u9593\u30b9\u30b3\u30fc\u30d7 \u00b6 namespace \u540d\u524d {} \u3067\u540d\u524d\u7a7a\u9593\u306e\u5b9a\u7fa9\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 namespace \u30d6\u30ed\u30c3\u30af\u3067\u62ec\u3089\u308c\u305f\u30b7\u30f3\u30dc\u30eb\u306f\u3001\u305d\u306e\u540d\u524d\u7a7a\u9593\u306b\u5c5e\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 namespace A { int count = 2 ; // \u540d\u524d\u7a7a\u9593 A \u306b\u5c5e\u3059\u308b\u5909\u6570 } // namespace A namespace B { int count = 4 ; // \u540d\u524d\u7a7a\u9593 B \u306b\u5c5e\u3059\u308b\u5909\u6570\u3002\u540d\u524d\u7a7a\u9593 A \u3068\u306f\u5225\u30b9\u30b3\u30fc\u30d7\u306a\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306f\u306a\u3089\u306a\u3044\u3002 } // namespace B \u30b9\u30b3\u30fc\u30d7\u89e3\u6c7a\u6f14\u7b97\u5b50 :: \u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u540d\u524d\u7a7a\u9593\u5185\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u5229\u7528\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002 #include <iostream> namespace A { int count = 2 ; } // namespace A namespace B { int count = 4 ; } // namespace B int main () { std :: cout << A :: count << std :: endl ; // 2 std :: cout << B :: count << std :: endl ; // 4 return 0 ; } \u540c\u4e00\u306e\u540d\u524d\u7a7a\u9593\u306b\u5c5e\u3059\u308b\u5834\u5408\u306f\u3001\u30b9\u30b3\u30fc\u30d7\u89e3\u6c7a\u6f14\u7b97\u5b50 :: \u306b\u3088\u308b\u540d\u524d\u7a7a\u9593\u306e\u6307\u5b9a\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 namespace A { int count = 2 ; int GetCount () { return count ; // A::count \u3068\u540c\u3058 } } // namespace A \u540d\u524d\u7a7a\u9593\u306f\u5165\u308c\u5b50\u306b\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 #include <iostream> namespace A { int count = 2 ; // A::count namespace P { int count = 4 ; // A::P::count int GetCount () { return count ; } } // namespace P } // namespace A int main () { std :: cout << A :: P :: GetCount () << std :: endl ; // 4; return 0 ; } \u540c\u4e00\u306e\u540d\u524d\u7a7a\u9593\u5185\u306b\u6307\u5b9a\u3057\u305f\u30b7\u30f3\u30dc\u30eb\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30b7\u30f3\u30dc\u30eb\u3092\u63a2\u3059\u7bc4\u56f2\u3092 namespace \u30d6\u30ed\u30c3\u30af\u6bce\u306b\u5916\u306b\u5e83\u3052\u3066\u3044\u304d\u3001\u6700\u521d\u306b\u898b\u3064\u304b\u3063\u305f\u3082\u306e\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 #include <iostream> namespace A { int count = 2 ; // A::count namespace P { namespace X { int GetCount () { /* * A::P::X::count \u306f\u5b58\u5728\u3057\u306a\u3044 * -> A::P::count \u306f\u5b58\u5728\u3057\u306a\u3044 * -> A::count \u304c\u5229\u7528\u3055\u308c\u308b */ return count ; } } // namespace X } // namespace P } // namespace A int main () { std :: cout << A :: P :: X :: GetCount () << std :: endl ; // 2; return 0 ; } std \u540d\u524d\u7a7a\u9593 \u3053\u308c\u307e\u3067\u306b\u51fa\u3066\u304d\u305f\u3001 std::cout \u3084 std::vector \u7b49\u306e std:: \u306f std \u540d\u524d\u7a7a\u9593\u306e\u4e8b\u3092\u6307\u3057\u3066\u3044\u307e\u3059\u3002 C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306f\u3001\u307b\u3068\u3093\u3069\u304c std \u540d\u524d\u7a7a\u9593\u306b\u5c5e\u3057\u3066\u3044\u307e\u3059\u3002 \u95a2\u6570\u30b9\u30b3\u30fc\u30d7 \u00b6 \u95a2\u6570\u5185\u3067\u5ba3\u8a00\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u305d\u306e\u95a2\u6570\u5185\u3067\u306e\u307f\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> int GetCount () { int x = 5 ; // GetCount() \u5185\u306e x \u306e\u6709\u52b9\u7bc4\u56f2\u306f\u3053\u3053\u304b\u3089 return x ; } // \u3053\u3053\u307e\u3067 int main () { int x = GetCount (); // main() \u306e x \u3068 GetCount() \u306e x \u306f\u5225\u30b9\u30b3\u30fc\u30d7 std :: cout << x << std :: endl ; return 0 ; } \u30d6\u30ed\u30c3\u30af\u30b9\u30b3\u30fc\u30d7 \u00b6 \u30d6\u30ed\u30c3\u30af\u5185\u3082\u30b9\u30b3\u30fc\u30d7\u306e\u4e00\u3064\u3067\u3059\u3002 if \u6587\u3092\u59cb\u3081\u3068\u3057\u305f\u5236\u5fa1\u6587\u3067\u4f7f\u308f\u308c\u308b {} \u3082\u30d6\u30ed\u30c3\u30af\u30b9\u30b3\u30fc\u30d7\u306b\u8a72\u5f53\u3057\u307e\u3059\u3002 \u540d\u524d\u7a7a\u9593\u540c\u69d8\u3001\u540c\u4e00\u306e\u30d6\u30ed\u30c3\u30af\u5185\u306b\u6307\u5b9a\u3057\u305f\u30b7\u30f3\u30dc\u30eb\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30b7\u30f3\u30dc\u30eb\u3092\u63a2\u3059\u7bc4\u56f2\u3092\u30d6\u30ed\u30c3\u30af\u6bce\u306b\u5916\u306b\u5e83\u3052\u3066\u3044\u304d\u3001\u6700\u521d\u306b\u898b\u3064\u304b\u3063\u305f\u3082\u306e\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 #include <iostream> int main () { int x = 3 ; { int x = 5 ; std :: cout << x << std :: endl ; // 5 } { std :: cout << x << std :: endl ; // 3 } return 0 ; } \u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7 \u00b6 \u540d\u524d\u7a7a\u9593\u3084\u95a2\u6570\u306b\u5c5e\u3055\u306a\u3044\u5834\u6240\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u3068\u8a00\u3044\u307e\u3059\u3002 \u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5ba3\u8a00\u3055\u308c\u305f\u5909\u6570\u3084\u95a2\u6570\u306f\u3001\u5ba3\u8a00\u4ee5\u964d\u3067\u3042\u308c\u3070\u3069\u3053\u304b\u3089\u3067\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u307e\u305f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5ba3\u8a00\u3057\u305f\u5909\u6570\u30fb\u95a2\u6570\u306e\u3053\u3068\u3092\u4e00\u822c\u7684\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u30fb\u95a2\u6570\u3068\u8a00\u3044\u307e\u3059\u3002 #include <iostream> int x = 100 ; // \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570 int main () { std :: cout << x << std :: endl ; // 100 return 0 ; } \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306f\u300c\u3069\u3053\u304b\u3089\u3067\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u300d\u3068\u3044\u3046\u6027\u8cea\u4e0a\u3001\u3069\u3053\u304b\u3089\u3067\u3082\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u3069\u3053\u3067\u5909\u6570\u306e\u5024\u304c\u66f8\u304d\u63db\u3048\u3089\u308c\u305f\u306e\u304b\u7279\u5b9a\u3057\u3065\u3089\u304f\u306a\u308b\u305f\u3081\u3001\u53ef\u80fd\u306a\u9650\u308a\u4f7f\u308f\u306a\u3044\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 \u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306f\u3001\u4e00\u756a\u5916\u5074\u306e\u540d\u524d\u7a7a\u9593\u3068\u3057\u3066\u6349\u3048\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u30b9\u30b3\u30fc\u30d7\u89e3\u6c7a\u6f14\u7b97\u5b50 :: \u3092\u5229\u7528\u3057\u3066\u3001\u660e\u793a\u7684\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 #include <iostream> int x = 20 ; int main () { int x = 40 ; std :: cout << x << std :: endl ; // 40 std :: cout << :: x << std :: endl ; // 20 return 0 ; }","title":"4.3. \u30b9\u30b3\u30fc\u30d7"},{"location":"ch04-03-scopes/#_1","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u7279\u5b9a\u306e\u7bc4\u56f2\u6bce\u306b\u30b7\u30f3\u30dc\u30eb\u3092\u8b58\u5225\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u7bc4\u56f2\u306e\u3053\u3068\u3092 \u30b9\u30b3\u30fc\u30d7 \u3068\u8a00\u3044\u307e\u3059\u3002 \u540c\u4e00\u306e\u30b9\u30b3\u30fc\u30d7\u5185\u306b\u540c\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u304c\u5b58\u5728\u3057\u305f\u5834\u5408\u3001\u30b7\u30f3\u30dc\u30eb\u3092\u4e00\u610f\u306b\u8b58\u5225\u3059\u308b\u4e8b\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u30ea\u30f3\u30af\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 \u307e\u305f\u3001\u30b9\u30b3\u30fc\u30d7\u3092\u6c7a\u3081\u308b\u7bc4\u56f2\u306e\u3053\u3068\u3092\u30d6\u30ed\u30c3\u30af\u3068\u8a00\u3044\u307e\u3059\u3002 {} \u3067\u62ec\u3089\u308c\u305f\u7bc4\u56f2\u304c\u4e00\u3064\u306e\u30d6\u30ed\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\u3002 \u540d\u524d\u4fee\u98fe\uff08\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\uff09 C++ \u3067\u306f\u540c\u4e00\u306e\u30b9\u30b3\u30fc\u30d7\u5185\u306b\u540c\u540d\u306e\u95a2\u6570\u304c\u3042\u3063\u3066\u3082\u3001\u5f15\u6570\u306e\u578b\u304c\u7570\u306a\u308c\u3070\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\uff08\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\uff09 \u3053\u308c\u306f\u3001\u30b7\u30f3\u30dc\u30eb\u306b\u5f15\u6570\u306e\u578b\u306e\u60c5\u5831\u306a\u3069\u3082\u542b\u3081\u308b\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3092\u884c\u306a\u3063\u305f\u4e0a\u3067\u95a2\u6570\u3092\u4e00\u610f\u306b\u8b58\u5225\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f 11.4 \u52d5\u7684\u30ed\u30fc\u30c9\u3068\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30b9\u30b3\u30fc\u30d7"},{"location":"ch04-03-scopes/#_2","text":"namespace \u540d\u524d {} \u3067\u540d\u524d\u7a7a\u9593\u306e\u5b9a\u7fa9\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 namespace \u30d6\u30ed\u30c3\u30af\u3067\u62ec\u3089\u308c\u305f\u30b7\u30f3\u30dc\u30eb\u306f\u3001\u305d\u306e\u540d\u524d\u7a7a\u9593\u306b\u5c5e\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 namespace A { int count = 2 ; // \u540d\u524d\u7a7a\u9593 A \u306b\u5c5e\u3059\u308b\u5909\u6570 } // namespace A namespace B { int count = 4 ; // \u540d\u524d\u7a7a\u9593 B \u306b\u5c5e\u3059\u308b\u5909\u6570\u3002\u540d\u524d\u7a7a\u9593 A \u3068\u306f\u5225\u30b9\u30b3\u30fc\u30d7\u306a\u306e\u3067\u30a8\u30e9\u30fc\u306b\u306f\u306a\u3089\u306a\u3044\u3002 } // namespace B \u30b9\u30b3\u30fc\u30d7\u89e3\u6c7a\u6f14\u7b97\u5b50 :: \u3092\u4ed8\u3051\u308b\u3053\u3068\u3067\u3001\u540d\u524d\u7a7a\u9593\u5185\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u5229\u7528\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002 #include <iostream> namespace A { int count = 2 ; } // namespace A namespace B { int count = 4 ; } // namespace B int main () { std :: cout << A :: count << std :: endl ; // 2 std :: cout << B :: count << std :: endl ; // 4 return 0 ; } \u540c\u4e00\u306e\u540d\u524d\u7a7a\u9593\u306b\u5c5e\u3059\u308b\u5834\u5408\u306f\u3001\u30b9\u30b3\u30fc\u30d7\u89e3\u6c7a\u6f14\u7b97\u5b50 :: \u306b\u3088\u308b\u540d\u524d\u7a7a\u9593\u306e\u6307\u5b9a\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 namespace A { int count = 2 ; int GetCount () { return count ; // A::count \u3068\u540c\u3058 } } // namespace A \u540d\u524d\u7a7a\u9593\u306f\u5165\u308c\u5b50\u306b\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 #include <iostream> namespace A { int count = 2 ; // A::count namespace P { int count = 4 ; // A::P::count int GetCount () { return count ; } } // namespace P } // namespace A int main () { std :: cout << A :: P :: GetCount () << std :: endl ; // 4; return 0 ; } \u540c\u4e00\u306e\u540d\u524d\u7a7a\u9593\u5185\u306b\u6307\u5b9a\u3057\u305f\u30b7\u30f3\u30dc\u30eb\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30b7\u30f3\u30dc\u30eb\u3092\u63a2\u3059\u7bc4\u56f2\u3092 namespace \u30d6\u30ed\u30c3\u30af\u6bce\u306b\u5916\u306b\u5e83\u3052\u3066\u3044\u304d\u3001\u6700\u521d\u306b\u898b\u3064\u304b\u3063\u305f\u3082\u306e\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 #include <iostream> namespace A { int count = 2 ; // A::count namespace P { namespace X { int GetCount () { /* * A::P::X::count \u306f\u5b58\u5728\u3057\u306a\u3044 * -> A::P::count \u306f\u5b58\u5728\u3057\u306a\u3044 * -> A::count \u304c\u5229\u7528\u3055\u308c\u308b */ return count ; } } // namespace X } // namespace P } // namespace A int main () { std :: cout << A :: P :: X :: GetCount () << std :: endl ; // 2; return 0 ; } std \u540d\u524d\u7a7a\u9593 \u3053\u308c\u307e\u3067\u306b\u51fa\u3066\u304d\u305f\u3001 std::cout \u3084 std::vector \u7b49\u306e std:: \u306f std \u540d\u524d\u7a7a\u9593\u306e\u4e8b\u3092\u6307\u3057\u3066\u3044\u307e\u3059\u3002 C++ \u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u306f\u3001\u307b\u3068\u3093\u3069\u304c std \u540d\u524d\u7a7a\u9593\u306b\u5c5e\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u540d\u524d\u7a7a\u9593\u30b9\u30b3\u30fc\u30d7"},{"location":"ch04-03-scopes/#_3","text":"\u95a2\u6570\u5185\u3067\u5ba3\u8a00\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u305d\u306e\u95a2\u6570\u5185\u3067\u306e\u307f\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> int GetCount () { int x = 5 ; // GetCount() \u5185\u306e x \u306e\u6709\u52b9\u7bc4\u56f2\u306f\u3053\u3053\u304b\u3089 return x ; } // \u3053\u3053\u307e\u3067 int main () { int x = GetCount (); // main() \u306e x \u3068 GetCount() \u306e x \u306f\u5225\u30b9\u30b3\u30fc\u30d7 std :: cout << x << std :: endl ; return 0 ; }","title":"\u95a2\u6570\u30b9\u30b3\u30fc\u30d7"},{"location":"ch04-03-scopes/#_4","text":"\u30d6\u30ed\u30c3\u30af\u5185\u3082\u30b9\u30b3\u30fc\u30d7\u306e\u4e00\u3064\u3067\u3059\u3002 if \u6587\u3092\u59cb\u3081\u3068\u3057\u305f\u5236\u5fa1\u6587\u3067\u4f7f\u308f\u308c\u308b {} \u3082\u30d6\u30ed\u30c3\u30af\u30b9\u30b3\u30fc\u30d7\u306b\u8a72\u5f53\u3057\u307e\u3059\u3002 \u540d\u524d\u7a7a\u9593\u540c\u69d8\u3001\u540c\u4e00\u306e\u30d6\u30ed\u30c3\u30af\u5185\u306b\u6307\u5b9a\u3057\u305f\u30b7\u30f3\u30dc\u30eb\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30b7\u30f3\u30dc\u30eb\u3092\u63a2\u3059\u7bc4\u56f2\u3092\u30d6\u30ed\u30c3\u30af\u6bce\u306b\u5916\u306b\u5e83\u3052\u3066\u3044\u304d\u3001\u6700\u521d\u306b\u898b\u3064\u304b\u3063\u305f\u3082\u306e\u304c\u5229\u7528\u3055\u308c\u307e\u3059\u3002 #include <iostream> int main () { int x = 3 ; { int x = 5 ; std :: cout << x << std :: endl ; // 5 } { std :: cout << x << std :: endl ; // 3 } return 0 ; }","title":"\u30d6\u30ed\u30c3\u30af\u30b9\u30b3\u30fc\u30d7"},{"location":"ch04-03-scopes/#_5","text":"\u540d\u524d\u7a7a\u9593\u3084\u95a2\u6570\u306b\u5c5e\u3055\u306a\u3044\u5834\u6240\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u3068\u8a00\u3044\u307e\u3059\u3002 \u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5ba3\u8a00\u3055\u308c\u305f\u5909\u6570\u3084\u95a2\u6570\u306f\u3001\u5ba3\u8a00\u4ee5\u964d\u3067\u3042\u308c\u3070\u3069\u3053\u304b\u3089\u3067\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u307e\u305f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5ba3\u8a00\u3057\u305f\u5909\u6570\u30fb\u95a2\u6570\u306e\u3053\u3068\u3092\u4e00\u822c\u7684\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u30fb\u95a2\u6570\u3068\u8a00\u3044\u307e\u3059\u3002 #include <iostream> int x = 100 ; // \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570 int main () { std :: cout << x << std :: endl ; // 100 return 0 ; } \u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306f\u300c\u3069\u3053\u304b\u3089\u3067\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u300d\u3068\u3044\u3046\u6027\u8cea\u4e0a\u3001\u3069\u3053\u304b\u3089\u3067\u3082\u5024\u3092\u66f8\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u3069\u3053\u3067\u5909\u6570\u306e\u5024\u304c\u66f8\u304d\u63db\u3048\u3089\u308c\u305f\u306e\u304b\u7279\u5b9a\u3057\u3065\u3089\u304f\u306a\u308b\u305f\u3081\u3001\u53ef\u80fd\u306a\u9650\u308a\u4f7f\u308f\u306a\u3044\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 \u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306f\u3001\u4e00\u756a\u5916\u5074\u306e\u540d\u524d\u7a7a\u9593\u3068\u3057\u3066\u6349\u3048\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u30b9\u30b3\u30fc\u30d7\u89e3\u6c7a\u6f14\u7b97\u5b50 :: \u3092\u5229\u7528\u3057\u3066\u3001\u660e\u793a\u7684\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 #include <iostream> int x = 20 ; int main () { int x = 40 ; std :: cout << x << std :: endl ; // 40 std :: cout << :: x << std :: endl ; // 20 return 0 ; }","title":"\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7"},{"location":"ch04-04-internal-linkages/","text":"\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8 \u00b6 \u5ba3\u8a00\u3055\u308c\u305f\u540c\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u540c\u4e00\u306e\u3082\u306e\u3068\u3057\u3066\u6271\u3046\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u6982\u5ff5\u306e\u3053\u3068\u3092\u30ea\u30f3\u30b1\u30fc\u30b8\u3068\u8a00\u3044\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u3064\u30b7\u30f3\u30dc\u30eb\u306f\u5ba3\u8a00\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u306e\u307f\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 static \u00b6 \u30b7\u30f3\u30dc\u30eb\u306e\u5ba3\u8a00\u306b static \u6307\u5b9a\u5b50\u3092\u4ed8\u4e0e\u3059\u308b\u3053\u3068\u3067\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u305f\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 main.cc #include <iostream> int main () { std :: cout << x << std :: endl ; // \u30ea\u30f3\u30af\u30a8\u30e9\u30fc\u3002main.cc \u304b\u3089\u306f other.cc \u306e x \u304c\u53c2\u7167\u3067\u304d\u306a\u3044\u3002 return 0 ; } other.cc static int x = 246 ; // \u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3002 other.cc \u5185\u3067\u306e\u307f\u53c2\u7167\u53ef\u80fd \u7121\u540d\u540d\u524d\u7a7a\u9593 \u00b6 namespace \u540d\u524d {} \u3067\u540d\u524d\u7a7a\u9593\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u304c\u3001 \u540d\u524d\u3092\u4ed8\u3051\u305a\u306b namespace {} \u3068\u3059\u308b\u3053\u3068\u3067\u7121\u540d\u540d\u524d\u7a7a\u9593\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u7121\u540d\u540d\u524d\u7a7a\u9593\u5185\u306b\u5ba3\u8a00\u3055\u308c\u305f\u5909\u6570\u3084\u95a2\u6570\u306f\u3001 static \u6307\u5b9a\u5b50\u3068\u540c\u69d8\u306b\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u3061\u307e\u3059\u3002 main.cc #include <iostream> #include \"other.h\" int main () { Print (); std :: cout << x << std :: endl ; // \u3053\u3053\u304b\u3089 x \u306f\u53c2\u7167\u3067\u304d\u306a\u3044 } other.h #ifndef OTHER_H_ #define OTHER_H_ void Print (); #endif // OTHER_H_ other.cc #include \"other.h\" #include <iostream> namespace { int x = 50 ; // x \u306b\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u305f\u305b\u308b } // unnamed namespace void Print () { std :: cout << x << std :: endl ; // \u3053\u3053\u304b\u3089 x \u306f\u53c2\u7167\u53ef\u80fd } C++ \u306b\u304a\u3044\u3066 static \u306f \u69d8\u3005\u306a\u610f\u5473\u3092\u6301\u3064 \u305f\u3081\u3001\u5206\u304b\u308a\u3065\u3089\u3044\u30ad\u30fc\u30ef\u30fc\u30c9\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u5ba3\u8a00\u306b\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u305f\u305b\u308b\u5834\u5408\u306f\u3001 static \u3067\u306f\u306a\u304f\u7121\u540d\u540d\u524d\u7a7a\u9593\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002 \u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3068\u5b9a\u7fa9\u91cd\u8907 \u00b6 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u9593\u3067\u5b9a\u7fa9\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u6642\u3001\u901a\u5e38\u306f\u5b9a\u7fa9\u306e\u91cd\u8907\u306b\u3088\u308b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u304c\u3001 \u5404\u3005\u306b\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u305f\u305b\u3066\u5225\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u898b\u3048\u306a\u304f\u3057\u3066\u3044\u308c\u3070\u3001\u5225\u306e\u5b9a\u7fa9\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 main.cc #include <iostream> #include \"other.h\" namespace { int hoge = 0 ; // main.cc \u5185\u306e hoge } int main () { hoge += 2 ; IncrementHoge (); std :: cout << \"main.cc: \" << hoge << std :: endl ; // main.cc: 2 PrintHoge (); return 0 ; } other.h #ifndef OTHER_H_ #define OTHER_H_ void IncrementHoge (); void PrintHoge (); #endif // OTHER_H_ other.cc #include \"other.h\" #include <iostream> namespace { int hoge = 0 ; // other.cc \u5185\u306e hoge } void IncrementHoge () { ++ hoge ; } void PrintHoge () { std :: cout << \"other.cc: \" << hoge << std :: endl ; // other.cc: 1 }","title":"4.4. \u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8"},{"location":"ch04-04-internal-linkages/#_1","text":"\u5ba3\u8a00\u3055\u308c\u305f\u540c\u540d\u306e\u30b7\u30f3\u30dc\u30eb\u3092\u540c\u4e00\u306e\u3082\u306e\u3068\u3057\u3066\u6271\u3046\u304b\u3069\u3046\u304b\u3092\u793a\u3059\u6982\u5ff5\u306e\u3053\u3068\u3092\u30ea\u30f3\u30b1\u30fc\u30b8\u3068\u8a00\u3044\u307e\u3059\u3002 \u3053\u3053\u3067\u306f\u3001\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u3064\u30b7\u30f3\u30dc\u30eb\u306f\u5ba3\u8a00\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u306e\u307f\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002","title":"\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8"},{"location":"ch04-04-internal-linkages/#static","text":"\u30b7\u30f3\u30dc\u30eb\u306e\u5ba3\u8a00\u306b static \u6307\u5b9a\u5b50\u3092\u4ed8\u4e0e\u3059\u308b\u3053\u3068\u3067\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u305f\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 main.cc #include <iostream> int main () { std :: cout << x << std :: endl ; // \u30ea\u30f3\u30af\u30a8\u30e9\u30fc\u3002main.cc \u304b\u3089\u306f other.cc \u306e x \u304c\u53c2\u7167\u3067\u304d\u306a\u3044\u3002 return 0 ; } other.cc static int x = 246 ; // \u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3002 other.cc \u5185\u3067\u306e\u307f\u53c2\u7167\u53ef\u80fd","title":"static"},{"location":"ch04-04-internal-linkages/#_2","text":"namespace \u540d\u524d {} \u3067\u540d\u524d\u7a7a\u9593\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u304c\u3001 \u540d\u524d\u3092\u4ed8\u3051\u305a\u306b namespace {} \u3068\u3059\u308b\u3053\u3068\u3067\u7121\u540d\u540d\u524d\u7a7a\u9593\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 \u7121\u540d\u540d\u524d\u7a7a\u9593\u5185\u306b\u5ba3\u8a00\u3055\u308c\u305f\u5909\u6570\u3084\u95a2\u6570\u306f\u3001 static \u6307\u5b9a\u5b50\u3068\u540c\u69d8\u306b\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u3061\u307e\u3059\u3002 main.cc #include <iostream> #include \"other.h\" int main () { Print (); std :: cout << x << std :: endl ; // \u3053\u3053\u304b\u3089 x \u306f\u53c2\u7167\u3067\u304d\u306a\u3044 } other.h #ifndef OTHER_H_ #define OTHER_H_ void Print (); #endif // OTHER_H_ other.cc #include \"other.h\" #include <iostream> namespace { int x = 50 ; // x \u306b\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u305f\u305b\u308b } // unnamed namespace void Print () { std :: cout << x << std :: endl ; // \u3053\u3053\u304b\u3089 x \u306f\u53c2\u7167\u53ef\u80fd } C++ \u306b\u304a\u3044\u3066 static \u306f \u69d8\u3005\u306a\u610f\u5473\u3092\u6301\u3064 \u305f\u3081\u3001\u5206\u304b\u308a\u3065\u3089\u3044\u30ad\u30fc\u30ef\u30fc\u30c9\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002 \u5ba3\u8a00\u306b\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u305f\u305b\u308b\u5834\u5408\u306f\u3001 static \u3067\u306f\u306a\u304f\u7121\u540d\u540d\u524d\u7a7a\u9593\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002","title":"\u7121\u540d\u540d\u524d\u7a7a\u9593"},{"location":"ch04-04-internal-linkages/#_3","text":"\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u9593\u3067\u5b9a\u7fa9\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u6642\u3001\u901a\u5e38\u306f\u5b9a\u7fa9\u306e\u91cd\u8907\u306b\u3088\u308b\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u304c\u3001 \u5404\u3005\u306b\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3092\u6301\u305f\u305b\u3066\u5225\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u898b\u3048\u306a\u304f\u3057\u3066\u3044\u308c\u3070\u3001\u5225\u306e\u5b9a\u7fa9\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 main.cc #include <iostream> #include \"other.h\" namespace { int hoge = 0 ; // main.cc \u5185\u306e hoge } int main () { hoge += 2 ; IncrementHoge (); std :: cout << \"main.cc: \" << hoge << std :: endl ; // main.cc: 2 PrintHoge (); return 0 ; } other.h #ifndef OTHER_H_ #define OTHER_H_ void IncrementHoge (); void PrintHoge (); #endif // OTHER_H_ other.cc #include \"other.h\" #include <iostream> namespace { int hoge = 0 ; // other.cc \u5185\u306e hoge } void IncrementHoge () { ++ hoge ; } void PrintHoge () { std :: cout << \"other.cc: \" << hoge << std :: endl ; // other.cc: 1 }","title":"\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3068\u5b9a\u7fa9\u91cd\u8907"},{"location":"ch04-05-inline-functions/","text":"inline \u95a2\u6570 \u00b6 \u95a2\u6570\u306b inline \u3092\u3064\u3051\u308b\u3068 \u30b3\u30f3\u30d1\u30a4\u30e9\u306b \u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b \u3059\u308b\u3088\u3046\u306b\u6307\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u6307\u793a\u3092\u3057\u305f\u95a2\u6570\u306e\u3053\u3068\u3092 inline \u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u5b9f\u969b\u306b\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u3092\u3059\u308b\u304b\u3069\u3046\u304b\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u5224\u65ad\u6b21\u7b2c\u3067\u3059\u3002 inline \u3092\u3064\u3051\u3066\u3082\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u3055\u308c\u306a\u3044\u3053\u3068\u3084\u3001 inline \u3092\u3064\u3051\u306a\u304f\u3066\u3082\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 inline \u95a2\u6570\u306f\u5b9a\u7fa9\u304c\u540c\u4e00\u3067\u3042\u308b\u5834\u5408\u306b\u9650\u3063\u3066\u3001 \u7570\u306a\u308b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u540c\u4e00\u306e\u5b9a\u7fa9\u3092\u3057\u3066\u3082\u3044\u3044\u3068\u6c7a\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002 main.cc #include <iostream> #include \"something.h\" inline void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } int main () { HelloWorld (); Something (); return 0 ; } something.h #ifndef SOMETHING_H_ #define SOMETHING_H_ void Something (); #endif // SOMETHING_H_ something.cc #include \"something.h\" #include <iostream> inline void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } void Something () { HelloWorld (); } \u3053\u306e\u4f8b\u3067\u306f main.cc \u3068 something.cc \u3067 \u5b9a\u7fa9\u304c\u540c\u4e00\u3067\u3042\u308b inline \u95a2\u6570 HelloWorld() \u304c\u305d\u308c\u305e\u308c\u5b58\u5728\u3057\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u3063\u3066 inline \u95a2\u6570\u3067\u3042\u308c\u3070\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u95a2\u6570\u5b9a\u7fa9\u3092\u3057\u3066\u3082\u30ea\u30f3\u30af\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 hello_world.h #ifndef HELLO_WORLD_H_ #define HELLO_WORLD_H_ #include <iostream> inline void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } #endif // HELLO_WORLD_H_ main.cc #include \"hello_world.h\" #include \"something.h\" int main () { HelloWorld (); Something (); return 0 ; } something.h #ifndef SOMETHING_H_ #define SOMETHING_H_ void Something (); #endif // SOMETHING_H_ something.cc #include \"something.h\" #include \"hello_world.h\" void Something () { HelloWorld (); }","title":"4.5. inline \u95a2\u6570"},{"location":"ch04-05-inline-functions/#inline","text":"\u95a2\u6570\u306b inline \u3092\u3064\u3051\u308b\u3068 \u30b3\u30f3\u30d1\u30a4\u30e9\u306b \u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b \u3059\u308b\u3088\u3046\u306b\u6307\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u6307\u793a\u3092\u3057\u305f\u95a2\u6570\u306e\u3053\u3068\u3092 inline \u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u5b9f\u969b\u306b\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u3092\u3059\u308b\u304b\u3069\u3046\u304b\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u5224\u65ad\u6b21\u7b2c\u3067\u3059\u3002 inline \u3092\u3064\u3051\u3066\u3082\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u3055\u308c\u306a\u3044\u3053\u3068\u3084\u3001 inline \u3092\u3064\u3051\u306a\u304f\u3066\u3082\u30a4\u30f3\u30e9\u30a4\u30f3\u5c55\u958b\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 inline \u95a2\u6570\u306f\u5b9a\u7fa9\u304c\u540c\u4e00\u3067\u3042\u308b\u5834\u5408\u306b\u9650\u3063\u3066\u3001 \u7570\u306a\u308b\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u540c\u4e00\u306e\u5b9a\u7fa9\u3092\u3057\u3066\u3082\u3044\u3044\u3068\u6c7a\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002 main.cc #include <iostream> #include \"something.h\" inline void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } int main () { HelloWorld (); Something (); return 0 ; } something.h #ifndef SOMETHING_H_ #define SOMETHING_H_ void Something (); #endif // SOMETHING_H_ something.cc #include \"something.h\" #include <iostream> inline void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } void Something () { HelloWorld (); } \u3053\u306e\u4f8b\u3067\u306f main.cc \u3068 something.cc \u3067 \u5b9a\u7fa9\u304c\u540c\u4e00\u3067\u3042\u308b inline \u95a2\u6570 HelloWorld() \u304c\u305d\u308c\u305e\u308c\u5b58\u5728\u3057\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u3063\u3066 inline \u95a2\u6570\u3067\u3042\u308c\u3070\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u95a2\u6570\u5b9a\u7fa9\u3092\u3057\u3066\u3082\u30ea\u30f3\u30af\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 hello_world.h #ifndef HELLO_WORLD_H_ #define HELLO_WORLD_H_ #include <iostream> inline void HelloWorld () { std :: cout << \"Hello World!\" << std :: endl ; } #endif // HELLO_WORLD_H_ main.cc #include \"hello_world.h\" #include \"something.h\" int main () { HelloWorld (); Something (); return 0 ; } something.h #ifndef SOMETHING_H_ #define SOMETHING_H_ void Something (); #endif // SOMETHING_H_ something.cc #include \"something.h\" #include \"hello_world.h\" void Something () { HelloWorld (); }","title":"inline \u95a2\u6570"},{"location":"ch05-01-standard-inout/","text":"\u6a19\u6e96\u5165\u51fa\u529b \u00b6 C++ \u3067\u5165\u51fa\u529b\u3092\u6271\u3046\u5834\u5408\u306f <iostream> \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u6a19\u6e96\u51fa\u529b \u00b6 std::cout \u3067\u6a19\u6e96\u51fa\u529b\u306b\u5bfe\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002 #include <iostream> std :: cout << \"\u6a19\u6e96\u51fa\u529b\" ; Info std::endl \u3067\u6539\u884c\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 std :: cout << 1 + 2 << std :: endl ; std :: cout << 3 + 4 << std :: endl ; # \u51fa\u529b\u7d50\u679c 3 7 \u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b \u00b6 std::cerr \u3067\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u306b\u5bfe\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002 #include <iostream> std :: cerr << \"\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\" ; \u6a19\u6e96\u5165\u529b \u00b6 std::cin \u3067\u6a19\u6e96\u5165\u529b\u306b\u5bfe\u3057\u3066\u5165\u529b\u3057\u307e\u3059\u3002 #include <iostream> #include <string> std :: cout << \"\u597d\u304d\u306a\u98df\u3079\u7269\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \" std :: string food ; std :: cin >> food ; std :: cout << \"\u597d\u304d\u306a\u98df\u3079\u7269\u306f \" << food << \" \u3067\u3059\u3002\" << std :: endl ; int \u306a\u3069\u306e\u6570\u5024\u578b\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u3067\u6570\u5024\u306e\u5165\u529b\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 \u307e\u305f\u3001\u8aad\u307f\u8fbc\u307f\u6210\u5426\u3092if\u6587\u3067\u5224\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 #include <iostream> int main () { int x = 0 ; std :: cout << \"\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \" ; if ( std :: cin >> x ) { std :: cout << \"\u5165\u529b\u3057\u305f\u6574\u6570\u306f \" << x << \" \u3067\u3059\u3002\" << std :: endl ; } else { std :: cout << \"\u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002\" << std :: endl ; } return 0 ; } # \u5b9f\u884c\u4f8b1 \u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: 3 \u5165\u529b\u3057\u305f\u6574\u6570\u306f 3 \u3067\u3059\u3002 # \u5b9f\u884c\u4f8b2 \u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \u30ab\u30ec\u30fc \u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002","title":"5.1. \u6a19\u6e96\u5165\u51fa\u529b"},{"location":"ch05-01-standard-inout/#_1","text":"C++ \u3067\u5165\u51fa\u529b\u3092\u6271\u3046\u5834\u5408\u306f <iostream> \u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u6a19\u6e96\u5165\u51fa\u529b"},{"location":"ch05-01-standard-inout/#_2","text":"std::cout \u3067\u6a19\u6e96\u51fa\u529b\u306b\u5bfe\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002 #include <iostream> std :: cout << \"\u6a19\u6e96\u51fa\u529b\" ; Info std::endl \u3067\u6539\u884c\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 std :: cout << 1 + 2 << std :: endl ; std :: cout << 3 + 4 << std :: endl ; # \u51fa\u529b\u7d50\u679c 3 7","title":"\u6a19\u6e96\u51fa\u529b"},{"location":"ch05-01-standard-inout/#_3","text":"std::cerr \u3067\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u306b\u5bfe\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002 #include <iostream> std :: cerr << \"\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\" ;","title":"\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b"},{"location":"ch05-01-standard-inout/#_4","text":"std::cin \u3067\u6a19\u6e96\u5165\u529b\u306b\u5bfe\u3057\u3066\u5165\u529b\u3057\u307e\u3059\u3002 #include <iostream> #include <string> std :: cout << \"\u597d\u304d\u306a\u98df\u3079\u7269\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \" std :: string food ; std :: cin >> food ; std :: cout << \"\u597d\u304d\u306a\u98df\u3079\u7269\u306f \" << food << \" \u3067\u3059\u3002\" << std :: endl ; int \u306a\u3069\u306e\u6570\u5024\u578b\u3092\u7528\u610f\u3059\u308b\u3053\u3068\u3067\u6570\u5024\u306e\u5165\u529b\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002 \u307e\u305f\u3001\u8aad\u307f\u8fbc\u307f\u6210\u5426\u3092if\u6587\u3067\u5224\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 #include <iostream> int main () { int x = 0 ; std :: cout << \"\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \" ; if ( std :: cin >> x ) { std :: cout << \"\u5165\u529b\u3057\u305f\u6574\u6570\u306f \" << x << \" \u3067\u3059\u3002\" << std :: endl ; } else { std :: cout << \"\u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002\" << std :: endl ; } return 0 ; } # \u5b9f\u884c\u4f8b1 \u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: 3 \u5165\u529b\u3057\u305f\u6574\u6570\u306f 3 \u3067\u3059\u3002 # \u5b9f\u884c\u4f8b2 \u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044: \u30ab\u30ec\u30fc \u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002","title":"\u6a19\u6e96\u5165\u529b"},{"location":"ch05-02-file-operations/","text":"\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c \u00b6 <fstream> \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u304c\u51fa\u6765\u307e\u3059\u3002 \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f \u00b6 \u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u5834\u5408\u306f std::ifstream \u3092\u4f7f\u3044\u307e\u3059\u3002 <string> \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b std::getline \u30671\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 main.cc #include <fstream> #include <iostream> #include <string> int main () { std :: ifstream file ( \"file.txt\" ); // \u8aad\u307f\u8fbc\u3080\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6307\u5b9a std :: string line ; while ( std :: getline ( file , line )) { // 1\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 std :: cout << line << std :: endl ; } return 0 ; } file.txt Good friend, for Jesus' sake forbear, To dig the dust enclosed here. Blest be the man that spares these stones, And cursed be he that moves my bones. \u5b9f\u884c\u7d50\u679c Good friend, for Jesus' sake forbear, To dig the dust enclosed here. Blest be the man that spares these stones, And cursed be he that moves my bones. \u30d5\u30a1\u30a4\u30eb\u66f8\u304d\u51fa\u3057 \u00b6 \u30d5\u30a1\u30a4\u30eb\u3078\u66f8\u304d\u51fa\u3059\u5834\u5408\u306f std::ofstream \u3092\u4f7f\u3044\u307e\u3059\u3002 main.cc #include <fstream> #include <iostream> #include <string> #include <vector> int main () { std :: ofstream file ( \"fruits.txt\" ); // \u66f8\u304d\u51fa\u3059\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6307\u5b9a std :: vector < std :: string > fruits = { \"apple\" , \"strawberry\" , \"pear\" , \"grape\" }; for ( const auto fruit : fruits ) { file << fruit << std :: endl ; // \u66f8\u304d\u51fa\u3057 } return 0 ; } \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u5f8c\u306efruits.txt apple strawberry pear grape \u66f8\u304d\u51fa\u3059\u524d\u306b\u3001\u65e2\u306b\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u4e2d\u8eab\u306f\u4e0a\u66f8\u304d\u3055\u308c\u307e\u3059\u3002 \u4e0a\u66f8\u304d\u305b\u305a\u306b\u8ffd\u8a18\u3059\u308b\u5834\u5408\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b std::ios::app \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 main.cc #include <fstream> #include <iostream> #include <string> int main () { std :: ofstream file ( \"file.txt\" , std :: ios :: app ); std :: string quotation ( \"--- William Shakespeare's Epitaph\" ); file << std :: endl << quotation ; return 0 ; } \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u524d\u306efile.txt Good friend, for Jesus' sake forbear, To dig the dust enclosed here. Blest be the man that spares these stones, And cursed be he that moves my bones. \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u5f8c\u306efile.txt Good friend, for Jesus' sake forbear, To dig the dust enclosed here. Blest be the man that spares these stones, And cursed be he that moves my bones. --- William Shakespeare's Epitaph","title":"5.2. \u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c"},{"location":"ch05-02-file-operations/#_1","text":"<fstream> \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u64cd\u4f5c\u304c\u51fa\u6765\u307e\u3059\u3002","title":"\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c"},{"location":"ch05-02-file-operations/#_2","text":"\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u5834\u5408\u306f std::ifstream \u3092\u4f7f\u3044\u307e\u3059\u3002 <string> \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b std::getline \u30671\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 main.cc #include <fstream> #include <iostream> #include <string> int main () { std :: ifstream file ( \"file.txt\" ); // \u8aad\u307f\u8fbc\u3080\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6307\u5b9a std :: string line ; while ( std :: getline ( file , line )) { // 1\u884c\u305a\u3064\u8aad\u307f\u8fbc\u3080 std :: cout << line << std :: endl ; } return 0 ; } file.txt Good friend, for Jesus' sake forbear, To dig the dust enclosed here. Blest be the man that spares these stones, And cursed be he that moves my bones. \u5b9f\u884c\u7d50\u679c Good friend, for Jesus' sake forbear, To dig the dust enclosed here. Blest be the man that spares these stones, And cursed be he that moves my bones.","title":"\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f"},{"location":"ch05-02-file-operations/#_3","text":"\u30d5\u30a1\u30a4\u30eb\u3078\u66f8\u304d\u51fa\u3059\u5834\u5408\u306f std::ofstream \u3092\u4f7f\u3044\u307e\u3059\u3002 main.cc #include <fstream> #include <iostream> #include <string> #include <vector> int main () { std :: ofstream file ( \"fruits.txt\" ); // \u66f8\u304d\u51fa\u3059\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u6307\u5b9a std :: vector < std :: string > fruits = { \"apple\" , \"strawberry\" , \"pear\" , \"grape\" }; for ( const auto fruit : fruits ) { file << fruit << std :: endl ; // \u66f8\u304d\u51fa\u3057 } return 0 ; } \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u5f8c\u306efruits.txt apple strawberry pear grape \u66f8\u304d\u51fa\u3059\u524d\u306b\u3001\u65e2\u306b\u540c\u540d\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5b58\u5728\u3057\u3066\u3044\u305f\u5834\u5408\u3001\u4e2d\u8eab\u306f\u4e0a\u66f8\u304d\u3055\u308c\u307e\u3059\u3002 \u4e0a\u66f8\u304d\u305b\u305a\u306b\u8ffd\u8a18\u3059\u308b\u5834\u5408\u306f\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b std::ios::app \u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 main.cc #include <fstream> #include <iostream> #include <string> int main () { std :: ofstream file ( \"file.txt\" , std :: ios :: app ); std :: string quotation ( \"--- William Shakespeare's Epitaph\" ); file << std :: endl << quotation ; return 0 ; } \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u524d\u306efile.txt Good friend, for Jesus' sake forbear, To dig the dust enclosed here. Blest be the man that spares these stones, And cursed be he that moves my bones. \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u5f8c\u306efile.txt Good friend, for Jesus' sake forbear, To dig the dust enclosed here. Blest be the man that spares these stones, And cursed be he that moves my bones. --- William Shakespeare's Epitaph","title":"\u30d5\u30a1\u30a4\u30eb\u66f8\u304d\u51fa\u3057"},{"location":"ch06-01-memory-areas/","text":"\u30e1\u30e2\u30ea\u9818\u57df \u00b6 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5229\u7528\u3059\u308b\u30e1\u30e2\u30ea\u306b\u306f\u69d8\u3005\u306a\u9818\u57df\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30b9\u30bf\u30c3\u30af\u3068\u30d2\u30fc\u30d7\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u30b9\u30bf\u30c3\u30af \u00b6 \u30b9\u30bf\u30c3\u30af\u306f\u30c7\u30fc\u30bf\u69cb\u9020\u4e0a\u3001\u30d2\u30fc\u30d7\u306b\u6bd4\u3079\u3066\u9ad8\u901f\u306b\u6271\u3048\u307e\u3059\u3002\u30b9\u30bf\u30c3\u30af\u3078\u306e\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u30fbOS\u304c\u81ea\u52d5\u7684\u306b\u884c\u3044\u307e\u3059\u3002 \u4ee3\u308f\u308a\u306b\u3001\u4f7f\u7528\u3067\u304d\u308b\u30b9\u30bf\u30c3\u30af\u306b\u306f\u9650\u308a\u304c\u3042\u308b\u306e\u3067\u3001\u5927\u304d\u306a\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u6271\u3046\u306e\u306b\u306f\u5411\u3044\u3066\u3044\u307e\u305b\u3093\u3002 \u307e\u305f\u3001\u30b9\u30bf\u30c3\u30af\u306e\u30b5\u30a4\u30ba\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30fb\u30ea\u30f3\u30af\u6642\u306b\u6c7a\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5b9f\u884c\u524d\u306b\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u671f\u9593\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u3082\u306e\u306b\u5229\u7528\u306f\u9650\u3089\u308c\u307e\u3059\u3002 void Function () { int x = 100 ; // \u30ed\u30fc\u30ab\u30eb\u5909\u6570x\u306f\u30b9\u30bf\u30c3\u30af\u306b\u78ba\u4fdd\u3055\u308c\u308b\u3002 int y = 200 ; // \u30ed\u30fc\u30ab\u30eb\u5909\u6570y\u306f\u30b9\u30bf\u30c3\u30af\u306b\u78ba\u4fdd\u3055\u308c\u308b\u3002 } // \u95a2\u6570\u306e\u7d42\u4e86\u3068\u3068\u3082\u306b\u5909\u6570 x, y \u306f\u30b9\u30bf\u30c3\u30af\u304b\u3089\u53d6\u308a\u9664\u304b\u308c\u308b\u3002 // \u30b9\u30bf\u30c3\u30af\u306fLIFO\uff08\u5f8c\u5165\u308c\u5148\u51fa\u3057\uff09\u5f62\u5f0f\u306e\u305f\u3081 y, x \u306e\u9806\u3067\u53d6\u308a\u9664\u304b\u308c\u308b\u3002 int main () { Function (); return 0 ; } \u30d2\u30fc\u30d7 \u00b6 \u30d2\u30fc\u30d7\u306e\u30b5\u30a4\u30ba\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u52d5\u7684\u306b\u5909\u5316\u3057\u307e\u3059\u3002\u30d2\u30fc\u30d7\u306f\u30b9\u30bf\u30c3\u30af\u306e\u3088\u3046\u306a\u5236\u9650\u304c\u306a\u304f\u81ea\u7531\u5ea6\u304c\u9ad8\u3044\u3067\u3059\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u671f\u9593\u304c\u660e\u78ba\u3067\u306a\u3044\u5834\u5408\u3084\u3001\u5b9f\u884c\u6642\u306b\u30b5\u30a4\u30ba\u304c\u78ba\u5b9a\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u306b\u3064\u3044\u3066\u306f\u30d2\u30fc\u30d7\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001 std::vector \u306f\u3001\u4fdd\u6301\u3059\u308b\u8981\u7d20\u3092\u30d2\u30fc\u30d7\u4e0a\u306b\u78ba\u4fdd\u3059\u308b\u3053\u3068\u3067\u3001\u8981\u7d20\u6570\u3092\u5b9f\u884c\u6642\u306b\u5909\u66f4\u3067\u304d\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002","title":"6.1. \u30e1\u30e2\u30ea\u9818\u57df"},{"location":"ch06-01-memory-areas/#_1","text":"\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u5229\u7528\u3059\u308b\u30e1\u30e2\u30ea\u306b\u306f\u69d8\u3005\u306a\u9818\u57df\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u30b9\u30bf\u30c3\u30af\u3068\u30d2\u30fc\u30d7\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002","title":"\u30e1\u30e2\u30ea\u9818\u57df"},{"location":"ch06-01-memory-areas/#_2","text":"\u30b9\u30bf\u30c3\u30af\u306f\u30c7\u30fc\u30bf\u69cb\u9020\u4e0a\u3001\u30d2\u30fc\u30d7\u306b\u6bd4\u3079\u3066\u9ad8\u901f\u306b\u6271\u3048\u307e\u3059\u3002\u30b9\u30bf\u30c3\u30af\u3078\u306e\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u30fbOS\u304c\u81ea\u52d5\u7684\u306b\u884c\u3044\u307e\u3059\u3002 \u4ee3\u308f\u308a\u306b\u3001\u4f7f\u7528\u3067\u304d\u308b\u30b9\u30bf\u30c3\u30af\u306b\u306f\u9650\u308a\u304c\u3042\u308b\u306e\u3067\u3001\u5927\u304d\u306a\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u6271\u3046\u306e\u306b\u306f\u5411\u3044\u3066\u3044\u307e\u305b\u3093\u3002 \u307e\u305f\u3001\u30b9\u30bf\u30c3\u30af\u306e\u30b5\u30a4\u30ba\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30fb\u30ea\u30f3\u30af\u6642\u306b\u6c7a\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5b9f\u884c\u524d\u306b\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u671f\u9593\u304c\u5206\u304b\u3063\u3066\u3044\u308b\u3082\u306e\u306b\u5229\u7528\u306f\u9650\u3089\u308c\u307e\u3059\u3002 void Function () { int x = 100 ; // \u30ed\u30fc\u30ab\u30eb\u5909\u6570x\u306f\u30b9\u30bf\u30c3\u30af\u306b\u78ba\u4fdd\u3055\u308c\u308b\u3002 int y = 200 ; // \u30ed\u30fc\u30ab\u30eb\u5909\u6570y\u306f\u30b9\u30bf\u30c3\u30af\u306b\u78ba\u4fdd\u3055\u308c\u308b\u3002 } // \u95a2\u6570\u306e\u7d42\u4e86\u3068\u3068\u3082\u306b\u5909\u6570 x, y \u306f\u30b9\u30bf\u30c3\u30af\u304b\u3089\u53d6\u308a\u9664\u304b\u308c\u308b\u3002 // \u30b9\u30bf\u30c3\u30af\u306fLIFO\uff08\u5f8c\u5165\u308c\u5148\u51fa\u3057\uff09\u5f62\u5f0f\u306e\u305f\u3081 y, x \u306e\u9806\u3067\u53d6\u308a\u9664\u304b\u308c\u308b\u3002 int main () { Function (); return 0 ; }","title":"\u30b9\u30bf\u30c3\u30af"},{"location":"ch06-01-memory-areas/#_3","text":"\u30d2\u30fc\u30d7\u306e\u30b5\u30a4\u30ba\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u52d5\u7684\u306b\u5909\u5316\u3057\u307e\u3059\u3002\u30d2\u30fc\u30d7\u306f\u30b9\u30bf\u30c3\u30af\u306e\u3088\u3046\u306a\u5236\u9650\u304c\u306a\u304f\u81ea\u7531\u5ea6\u304c\u9ad8\u3044\u3067\u3059\u304c\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5074\u3067\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u3068\u89e3\u653e\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u671f\u9593\u304c\u660e\u78ba\u3067\u306a\u3044\u5834\u5408\u3084\u3001\u5b9f\u884c\u6642\u306b\u30b5\u30a4\u30ba\u304c\u78ba\u5b9a\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u306b\u3064\u3044\u3066\u306f\u30d2\u30fc\u30d7\u3092\u5229\u7528\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001 std::vector \u306f\u3001\u4fdd\u6301\u3059\u308b\u8981\u7d20\u3092\u30d2\u30fc\u30d7\u4e0a\u306b\u78ba\u4fdd\u3059\u308b\u3053\u3068\u3067\u3001\u8981\u7d20\u6570\u3092\u5b9f\u884c\u6642\u306b\u5909\u66f4\u3067\u304d\u308b\u3068\u3044\u3046\u4ed5\u7d44\u307f\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u30d2\u30fc\u30d7"},{"location":"ch06-02-new-and-delete/","text":"new/delete \u00b6 new \u00b6 \u30d2\u30fc\u30d7\u306b\u30e1\u30e2\u30ea\u3092\u52d5\u7684\u306b\u78ba\u4fdd\u3059\u308b\u5834\u5408\u306f new \u6f14\u7b97\u5b50\u3092\u5229\u7528\u3057\u307e\u3059\u3002 int * p1 = new int ( 100 ); // p1 \u306f new \u3067\u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\u9818\u57df\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf int * p2 = new int [ 5 ]; // \u914d\u5217\u306e\u5834\u5408\u306f [] \u3092\u4ed8\u3051\u308b delete \u00b6 \u30d2\u30fc\u30d7\u306b\u52d5\u7684\u306b\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u3092\u89e3\u653e\u3059\u308b\u5834\u5408\u306f delete \u6f14\u7b97\u5b50\u3092\u5229\u7528\u3057\u307e\u3059\u3002 int * p1 = new int ( 100 ); int * p2 = new int [ 5 ]; delete p1 ; // new \u306b\u3088\u3063\u3066\u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\u3092 delete \u3067\u89e3\u653e delete [] p2 ; // \u914d\u5217\u306e\u5834\u5408\u306f [] \u3092\u4ed8\u3051\u308b new \u3092\u5229\u7528\u3057\u3066\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u306e\u89e3\u653e\u3092\u5fd8\u308c\u308b\u3068\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306b\u306a\u308a\u307e\u3059\u3002 new \u3068 delete \u306f\u5fc5\u305a\u30bb\u30c3\u30c8\u3067\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002 \u30e1\u30e2\u30ea\u30ea\u30fc\u30af void Function () { int * p = new int [ 100000 ]; // delete \u305b\u305a\u306b Function() \u304c\u7d42\u4e86\u3059\u308b\u3068\u2026 } // int[100000] \u5206\u306e\u30e1\u30e2\u30ea\u304c\u89e3\u653e\u3055\u308c\u306a\u3044\u307e\u307e\u306b\u306a\u308b\u3002 malloc/free malloc/free \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3082\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u30fb\u89e3\u653e\u306f\u53ef\u80fd\u3067\u3059\u304c\u3001C++ \u3067\u306e\u5229\u7528\u306f\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002","title":"6.2. new/delete"},{"location":"ch06-02-new-and-delete/#newdelete","text":"","title":"new/delete"},{"location":"ch06-02-new-and-delete/#new","text":"\u30d2\u30fc\u30d7\u306b\u30e1\u30e2\u30ea\u3092\u52d5\u7684\u306b\u78ba\u4fdd\u3059\u308b\u5834\u5408\u306f new \u6f14\u7b97\u5b50\u3092\u5229\u7528\u3057\u307e\u3059\u3002 int * p1 = new int ( 100 ); // p1 \u306f new \u3067\u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\u9818\u57df\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf int * p2 = new int [ 5 ]; // \u914d\u5217\u306e\u5834\u5408\u306f [] \u3092\u4ed8\u3051\u308b","title":"new"},{"location":"ch06-02-new-and-delete/#delete","text":"\u30d2\u30fc\u30d7\u306b\u52d5\u7684\u306b\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u3092\u89e3\u653e\u3059\u308b\u5834\u5408\u306f delete \u6f14\u7b97\u5b50\u3092\u5229\u7528\u3057\u307e\u3059\u3002 int * p1 = new int ( 100 ); int * p2 = new int [ 5 ]; delete p1 ; // new \u306b\u3088\u3063\u3066\u78ba\u4fdd\u3055\u308c\u305f\u30e1\u30e2\u30ea\u3092 delete \u3067\u89e3\u653e delete [] p2 ; // \u914d\u5217\u306e\u5834\u5408\u306f [] \u3092\u4ed8\u3051\u308b new \u3092\u5229\u7528\u3057\u3066\u78ba\u4fdd\u3057\u305f\u30e1\u30e2\u30ea\u306e\u89e3\u653e\u3092\u5fd8\u308c\u308b\u3068\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u306b\u306a\u308a\u307e\u3059\u3002 new \u3068 delete \u306f\u5fc5\u305a\u30bb\u30c3\u30c8\u3067\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002 \u30e1\u30e2\u30ea\u30ea\u30fc\u30af void Function () { int * p = new int [ 100000 ]; // delete \u305b\u305a\u306b Function() \u304c\u7d42\u4e86\u3059\u308b\u3068\u2026 } // int[100000] \u5206\u306e\u30e1\u30e2\u30ea\u304c\u89e3\u653e\u3055\u308c\u306a\u3044\u307e\u307e\u306b\u306a\u308b\u3002 malloc/free malloc/free \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3082\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u30fb\u89e3\u653e\u306f\u53ef\u80fd\u3067\u3059\u304c\u3001C++ \u3067\u306e\u5229\u7528\u306f\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002","title":"delete"},{"location":"ch06-03-deep-and-shallow-copy/","text":"\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc \u00b6 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc \u00b6 C++ \u306e\u30b3\u30d4\u30fc\u306f\u57fa\u672c\u7684\u306b\u306f\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3067\u3059\u3002 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306f\u5b9f\u4f53\u3054\u3068\u30b3\u30d4\u30fc\u3055\u308c\u308b\u305f\u3081\u3001\u30b3\u30d4\u30fc\u3057\u305f\u5206\u306e\u30e1\u30e2\u30ea\u9818\u57df\u306e\u78ba\u4fdd\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u5834\u5408\u3001\u30b3\u30d4\u30fc\u5148\uff08or \u30b3\u30d4\u30fc\u5143\uff09\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7de8\u96c6\u3057\u3066\u3082\u3001\u4ed6\u65b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u5f71\u97ff\u3092\u53ca\u307c\u3057\u307e\u305b\u3093\u3002 int x = 100 ; int y = x ; // x \u3092 y \u3078\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\uff08\u56f31\uff09 y = 50 ; // y \u3092 50 \u306b\u66f8\u304d\u63db\u3048\u308b\uff08\u56f32\uff09 std :: cout << x << std :: endl ; // x \u306f100\u306e\u307e\u307e \u56f31 \u56f32 \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc \u00b6 \u30dd\u30a4\u30f3\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\u5834\u5408\u306f\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u3067\u306f\u30dd\u30a4\u30f3\u30bf\u306e\u5411\u304d\u5148\u3060\u3051\u304c\u30b3\u30d4\u30fc\u3055\u308c\u3001\u5b9f\u4f53\u306f\u30b3\u30d4\u30fc\u5143\u306e\u9818\u57df\u306e\u307e\u307e\u306a\u306e\u3067\u3001 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u3088\u3046\u306a\u30b3\u30d4\u30fc\u3057\u305f\u5206\u306e\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u306f\u8d77\u304d\u307e\u305b\u3093\u3002 \u53c2\u7167\u306e\u5834\u5408\u3082\u3001\u30dd\u30a4\u30f3\u30bf\u3068\u540c\u69d8\u306b\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 int * x = new int ( 100 ); int * y = x ; // x \u3092 y \u3078\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\uff08\u56f33\uff09 * y = 50 ; // y \u304c\u6307\u3059\u5148\u306e\u5024\u3092 50 \u306b\u66f8\u304d\u63db\u3048\u308b\uff08\u56f34\uff09 std :: cout << * x << std :: endl ; // x \u304c\u6307\u3059\u5148\u306e\u5024\u3082 50 \u306b\u306a\u308b \u56f33 \u56f34 \u95a2\u6570\u306e\u5f15\u6570 \u00b6 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u306f\u95a2\u6570\u306e\u5f15\u6570\u3067\u3082\u533a\u5225\u3055\u308c\u307e\u3059\u3002 #include <iostream> void ChangeToFifty1 ( int v ) { // \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc v = 50 ; } void ChangeToFifty2 ( int * v ) { // \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc * v = 50 ; } int main () { int a = 100 ; ChangeToFifty1 ( a ); std :: cout << a << std :: endl ; // 100 int b = 100 ; ChangeToFifty2 ( & b ); std :: cout << b << std :: endl ; // 50 return 0 ; }","title":"6.3. \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc"},{"location":"ch06-03-deep-and-shallow-copy/#_1","text":"","title":"\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc"},{"location":"ch06-03-deep-and-shallow-copy/#_2","text":"C++ \u306e\u30b3\u30d4\u30fc\u306f\u57fa\u672c\u7684\u306b\u306f\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3067\u3059\u3002 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306f\u5b9f\u4f53\u3054\u3068\u30b3\u30d4\u30fc\u3055\u308c\u308b\u305f\u3081\u3001\u30b3\u30d4\u30fc\u3057\u305f\u5206\u306e\u30e1\u30e2\u30ea\u9818\u57df\u306e\u78ba\u4fdd\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u5834\u5408\u3001\u30b3\u30d4\u30fc\u5148\uff08or \u30b3\u30d4\u30fc\u5143\uff09\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7de8\u96c6\u3057\u3066\u3082\u3001\u4ed6\u65b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u5f71\u97ff\u3092\u53ca\u307c\u3057\u307e\u305b\u3093\u3002 int x = 100 ; int y = x ; // x \u3092 y \u3078\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\uff08\u56f31\uff09 y = 50 ; // y \u3092 50 \u306b\u66f8\u304d\u63db\u3048\u308b\uff08\u56f32\uff09 std :: cout << x << std :: endl ; // x \u306f100\u306e\u307e\u307e \u56f31 \u56f32","title":"\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc"},{"location":"ch06-03-deep-and-shallow-copy/#_3","text":"\u30dd\u30a4\u30f3\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\u5834\u5408\u306f\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u3067\u306f\u30dd\u30a4\u30f3\u30bf\u306e\u5411\u304d\u5148\u3060\u3051\u304c\u30b3\u30d4\u30fc\u3055\u308c\u3001\u5b9f\u4f53\u306f\u30b3\u30d4\u30fc\u5143\u306e\u9818\u57df\u306e\u307e\u307e\u306a\u306e\u3067\u3001 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u3088\u3046\u306a\u30b3\u30d4\u30fc\u3057\u305f\u5206\u306e\u30e1\u30e2\u30ea\u306e\u78ba\u4fdd\u306f\u8d77\u304d\u307e\u305b\u3093\u3002 \u53c2\u7167\u306e\u5834\u5408\u3082\u3001\u30dd\u30a4\u30f3\u30bf\u3068\u540c\u69d8\u306b\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 int * x = new int ( 100 ); int * y = x ; // x \u3092 y \u3078\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\uff08\u56f33\uff09 * y = 50 ; // y \u304c\u6307\u3059\u5148\u306e\u5024\u3092 50 \u306b\u66f8\u304d\u63db\u3048\u308b\uff08\u56f34\uff09 std :: cout << * x << std :: endl ; // x \u304c\u6307\u3059\u5148\u306e\u5024\u3082 50 \u306b\u306a\u308b \u56f33 \u56f34","title":"\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc"},{"location":"ch06-03-deep-and-shallow-copy/#_4","text":"\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3068\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u306f\u95a2\u6570\u306e\u5f15\u6570\u3067\u3082\u533a\u5225\u3055\u308c\u307e\u3059\u3002 #include <iostream> void ChangeToFifty1 ( int v ) { // \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc v = 50 ; } void ChangeToFifty2 ( int * v ) { // \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc * v = 50 ; } int main () { int a = 100 ; ChangeToFifty1 ( a ); std :: cout << a << std :: endl ; // 100 int b = 100 ; ChangeToFifty2 ( & b ); std :: cout << b << std :: endl ; // 50 return 0 ; }","title":"\u95a2\u6570\u306e\u5f15\u6570"},{"location":"ch06-04-move-semantics/","text":"\u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9 \u00b6 \u30b3\u30d4\u30fc\u3068\u30e0\u30fc\u30d6 \u00b6 std :: vector < int > x ( 1000000 ); std :: vector < int > y = x ; // \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u3053\u306e\u4f8b\u306e\u5834\u5408\u3001 y \u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b x \u3068\u540c\u7a0b\u5ea6\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u78ba\u4fdd\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u30b3\u30b9\u30c8\u306e\u9762\u3067\u306f\u304b\u306a\u308a\u306e\u7121\u99c4\u304c\u3042\u308a\u307e\u3059\u3002 std :: vector < int >* x = new std :: vector < int > ( 1000000 ); std :: vector < int >* y = x ; // \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc x = nullptr ; // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u3053\u306e\u4f8b\u3067\u306f x \u3092 y \u306b\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u3057\u305f\u5f8c\u306b\u3001 x \u306b nullptr \u3092\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u304c\u30e0\u30fc\u30d6\u306e\u6839\u5e95\u306b\u3042\u308b\u8003\u3048\u65b9\u3067\u3001 \u30dd\u30a4\u30f3\u30bf\u306e\u4ed8\u3051\u66ff\u3048\u3060\u3051\u3067\u3001\u3042\u305f\u304b\u3082 x \u304c y \u306b\u79fb\u52d5\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u6319\u52d5\u3092\u5b9f\u73fe\u51fa\u6765\u3066\u3044\u308b\u305f\u3081\u3001 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u3068\u304d\u3088\u308a\u3082\u30b3\u30b9\u30c8\u306e\u9762\u3067\u6709\u5229\u3067\u3059\u3002 \u3057\u304b\u3057\u3001\u30dd\u30a4\u30f3\u30bf\u306e\u64cd\u4f5c\u3092\u4f34\u3046\u5b9f\u88c5\u306b\u306a\u308b\u305f\u3081\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3063\u3066\u5b9f\u88c5\u3057\u306a\u3044\u3068\u3001 \u30e0\u30fc\u30d6\u306e\u4ed5\u7d44\u307f\u304c\u5b9f\u73fe\u3067\u304d\u306a\u304f\u306a\u308b\u3068\u3044\u3046\u30ea\u30b9\u30af\u3082\u5b58\u5728\u3057\u307e\u3059\u3002 \u305d\u3053\u3067\u3001 C++11\u304b\u3089\u306f\u30e0\u30fc\u30d6\u306e\u8003\u3048\u65b9\u3092\u30c6\u30af\u30cb\u30c3\u30af\u3068\u3057\u3066\u3067\u306f\u7121\u304f\u3001\u8a00\u8a9e\u4ed5\u69d8\u3068\u3057\u3066\u5b9f\u73fe\u3059\u308b\u4ed5\u7d44\u307f\u304c\u53d6\u308a\u5165\u308c\u3089\u308c\u307e\u3057\u305f\u3002 \u53f3\u8fba\u5024\u3068\u5de6\u8fba\u5024 \u00b6 \u5de6\u8fba\u5024: \u57fa\u672c\u7684\u306b\u305d\u306e\u30b9\u30b3\u30fc\u30d7\u306e\u9593\u751f\u304d\u7d9a\u3051\u308b\u540d\u524d\u4ed8\u304d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u53f3\u8fba\u5024: \u30ea\u30c6\u30e9\u30eb\u3084\u95a2\u6570\u304c\u8fd4\u3059\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3088\u3046\u306a\u305d\u306e\u77ac\u9593\u306b\u7834\u68c4\u3055\u308c\u3066\u4e0d\u8981\u306b\u306a\u308b\u3082\u306e int x = 300 ; // x \u306f\u5de6\u8fba\u5024\u3002300 \u306e\u3088\u3046\u306a\u30ea\u30c6\u30e9\u30eb\u306f\u53f3\u8fba\u5024\u3002 int y = function (); // y \u306f\u5de6\u8fba\u5024\u3002\u95a2\u6570 function \u304c\u8fd4\u3059\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u53f3\u8fba\u5024\u3002 int z = x ; // z \u3068 x \u306f\u5de6\u8fba\u5024\u3002 \u53f3\u8fba\u5024\u306f\u5de6\u8fba\u5024\u3078\u683c\u7d0d\u3057\u305f\u3089\u5fc5\u8981\u7121\u304f\u306a\u308b\u306e\u3067\u3001\u53f3\u8fba\u5024\u306b\u306f\u30e0\u30fc\u30d6\u306e\u8003\u3048\u65b9\u304c\u9069\u7528\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002 C++11 \u4ee5\u964d\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3053\u306e\u8003\u3048\u65b9\u3092\u8a8d\u8b58\u3057\u3001\u30e0\u30fc\u30d6\u3092\u5b9f\u73fe\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 std::move \u00b6 \u6b21\u306e\u4f8b\u3067\u306f\u3001 x \u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u304b\u3089\u3057\u3066\u307f\u308b\u3068\u5de6\u8fba\u5024\u306a\u306e\u3067\u3001 y \u3078\u306e\u4ee3\u5165\u6642\u306b\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3055\u308c\u307e\u3059\u3002 std :: vector < int > x ( 1000000 ); std :: vector < int > y = x ; // y \u3068 x \u306f\u5de6\u8fba\u5024 // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u305d\u3053\u3067\u3001\u5de6\u8fba\u5024\u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b std::move \u3092\u4f7f\u3044\u307e\u3059\u3002 x \u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3067\u306f\u306a\u304f\u30e0\u30fc\u30d6\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 std :: vector < int > x ( 1000000 ); std :: vector < int > y = std :: move ( x ); // std::move \u3067 x \u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8 // \u4ee5\u964d\u3001x\u306f\u5229\u7528\u3057\u306a\u3044 \u53f3\u8fba\u5024\u53c2\u7167 \u00b6 \u53f3\u8fba\u5024\u3092\u53c2\u7167\u3059\u308b\u306b\u306f && \u3092\u4ed8\u3051\u307e\u3059\u3002 int && x = 100 ; \u5de6\u8fba\u5024\u306e\u53c2\u7167\u3068\u53f3\u8fba\u5024\u306e\u53c2\u7167\u306f\u5225\u306e\u578b\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u305f\u3081\u3001 \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5f15\u6570\u304c\u5de6\u8fba\u5024\u53c2\u7167\u306e\u6642\u3068\u53f3\u8fba\u5024\u53c2\u7167\u306e\u6642\u3067\u51e6\u7406\u3092\u5206\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 #include <iostream> #include <string> void Print ( std :: string & ) { std :: cout << \"\u5de6\u8fba\u5024\u53c2\u7167\" << std :: endl ; } void Print ( std :: string && ) { std :: cout << \"\u53f3\u8fba\u5024\u53c2\u7167\" << std :: endl ; } int main () { std :: string str = \"hoge\" ; Print ( str ); Print ( std :: move ( str )); return 0 ; } # \u5b9f\u884c\u7d50\u679c \u5de6\u8fba\u5024\u53c2\u7167 \u53f3\u8fba\u5024\u53c2\u7167","title":"6.4. \u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9"},{"location":"ch06-04-move-semantics/#_1","text":"","title":"\u30e0\u30fc\u30d6\u30bb\u30de\u30f3\u30c6\u30a3\u30af\u30b9"},{"location":"ch06-04-move-semantics/#_2","text":"std :: vector < int > x ( 1000000 ); std :: vector < int > y = x ; // \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u3053\u306e\u4f8b\u306e\u5834\u5408\u3001 y \u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b x \u3068\u540c\u7a0b\u5ea6\u306e\u30e1\u30e2\u30ea\u9818\u57df\u3092\u78ba\u4fdd\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u308c\u306f\u30b3\u30b9\u30c8\u306e\u9762\u3067\u306f\u304b\u306a\u308a\u306e\u7121\u99c4\u304c\u3042\u308a\u307e\u3059\u3002 std :: vector < int >* x = new std :: vector < int > ( 1000000 ); std :: vector < int >* y = x ; // \u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc x = nullptr ; // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u3053\u306e\u4f8b\u3067\u306f x \u3092 y \u306b\u30b7\u30e3\u30ed\u30fc\u30b3\u30d4\u30fc\u3057\u305f\u5f8c\u306b\u3001 x \u306b nullptr \u3092\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u304c\u30e0\u30fc\u30d6\u306e\u6839\u5e95\u306b\u3042\u308b\u8003\u3048\u65b9\u3067\u3001 \u30dd\u30a4\u30f3\u30bf\u306e\u4ed8\u3051\u66ff\u3048\u3060\u3051\u3067\u3001\u3042\u305f\u304b\u3082 x \u304c y \u306b\u79fb\u52d5\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u6319\u52d5\u3092\u5b9f\u73fe\u51fa\u6765\u3066\u3044\u308b\u305f\u3081\u3001 \u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u306e\u3068\u304d\u3088\u308a\u3082\u30b3\u30b9\u30c8\u306e\u9762\u3067\u6709\u5229\u3067\u3059\u3002 \u3057\u304b\u3057\u3001\u30dd\u30a4\u30f3\u30bf\u306e\u64cd\u4f5c\u3092\u4f34\u3046\u5b9f\u88c5\u306b\u306a\u308b\u305f\u3081\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3063\u3066\u5b9f\u88c5\u3057\u306a\u3044\u3068\u3001 \u30e0\u30fc\u30d6\u306e\u4ed5\u7d44\u307f\u304c\u5b9f\u73fe\u3067\u304d\u306a\u304f\u306a\u308b\u3068\u3044\u3046\u30ea\u30b9\u30af\u3082\u5b58\u5728\u3057\u307e\u3059\u3002 \u305d\u3053\u3067\u3001 C++11\u304b\u3089\u306f\u30e0\u30fc\u30d6\u306e\u8003\u3048\u65b9\u3092\u30c6\u30af\u30cb\u30c3\u30af\u3068\u3057\u3066\u3067\u306f\u7121\u304f\u3001\u8a00\u8a9e\u4ed5\u69d8\u3068\u3057\u3066\u5b9f\u73fe\u3059\u308b\u4ed5\u7d44\u307f\u304c\u53d6\u308a\u5165\u308c\u3089\u308c\u307e\u3057\u305f\u3002","title":"\u30b3\u30d4\u30fc\u3068\u30e0\u30fc\u30d6"},{"location":"ch06-04-move-semantics/#_3","text":"\u5de6\u8fba\u5024: \u57fa\u672c\u7684\u306b\u305d\u306e\u30b9\u30b3\u30fc\u30d7\u306e\u9593\u751f\u304d\u7d9a\u3051\u308b\u540d\u524d\u4ed8\u304d\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u53f3\u8fba\u5024: \u30ea\u30c6\u30e9\u30eb\u3084\u95a2\u6570\u304c\u8fd4\u3059\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3088\u3046\u306a\u305d\u306e\u77ac\u9593\u306b\u7834\u68c4\u3055\u308c\u3066\u4e0d\u8981\u306b\u306a\u308b\u3082\u306e int x = 300 ; // x \u306f\u5de6\u8fba\u5024\u3002300 \u306e\u3088\u3046\u306a\u30ea\u30c6\u30e9\u30eb\u306f\u53f3\u8fba\u5024\u3002 int y = function (); // y \u306f\u5de6\u8fba\u5024\u3002\u95a2\u6570 function \u304c\u8fd4\u3059\u4e00\u6642\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u53f3\u8fba\u5024\u3002 int z = x ; // z \u3068 x \u306f\u5de6\u8fba\u5024\u3002 \u53f3\u8fba\u5024\u306f\u5de6\u8fba\u5024\u3078\u683c\u7d0d\u3057\u305f\u3089\u5fc5\u8981\u7121\u304f\u306a\u308b\u306e\u3067\u3001\u53f3\u8fba\u5024\u306b\u306f\u30e0\u30fc\u30d6\u306e\u8003\u3048\u65b9\u304c\u9069\u7528\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002 C++11 \u4ee5\u964d\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u3053\u306e\u8003\u3048\u65b9\u3092\u8a8d\u8b58\u3057\u3001\u30e0\u30fc\u30d6\u3092\u5b9f\u73fe\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002","title":"\u53f3\u8fba\u5024\u3068\u5de6\u8fba\u5024"},{"location":"ch06-04-move-semantics/#stdmove","text":"\u6b21\u306e\u4f8b\u3067\u306f\u3001 x \u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u304b\u3089\u3057\u3066\u307f\u308b\u3068\u5de6\u8fba\u5024\u306a\u306e\u3067\u3001 y \u3078\u306e\u4ee3\u5165\u6642\u306b\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3055\u308c\u307e\u3059\u3002 std :: vector < int > x ( 1000000 ); std :: vector < int > y = x ; // y \u3068 x \u306f\u5de6\u8fba\u5024 // \u4ee5\u964d x \u306f\u5229\u7528\u3057\u306a\u3044 \u305d\u3053\u3067\u3001\u5de6\u8fba\u5024\u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b std::move \u3092\u4f7f\u3044\u307e\u3059\u3002 x \u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u30c7\u30a3\u30fc\u30d7\u30b3\u30d4\u30fc\u3067\u306f\u306a\u304f\u30e0\u30fc\u30d6\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 std :: vector < int > x ( 1000000 ); std :: vector < int > y = std :: move ( x ); // std::move \u3067 x \u3092\u53f3\u8fba\u5024\u306b\u30ad\u30e3\u30b9\u30c8 // \u4ee5\u964d\u3001x\u306f\u5229\u7528\u3057\u306a\u3044","title":"std::move"},{"location":"ch06-04-move-semantics/#_4","text":"\u53f3\u8fba\u5024\u3092\u53c2\u7167\u3059\u308b\u306b\u306f && \u3092\u4ed8\u3051\u307e\u3059\u3002 int && x = 100 ; \u5de6\u8fba\u5024\u306e\u53c2\u7167\u3068\u53f3\u8fba\u5024\u306e\u53c2\u7167\u306f\u5225\u306e\u578b\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u305f\u3081\u3001 \u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001\u5f15\u6570\u304c\u5de6\u8fba\u5024\u53c2\u7167\u306e\u6642\u3068\u53f3\u8fba\u5024\u53c2\u7167\u306e\u6642\u3067\u51e6\u7406\u3092\u5206\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 #include <iostream> #include <string> void Print ( std :: string & ) { std :: cout << \"\u5de6\u8fba\u5024\u53c2\u7167\" << std :: endl ; } void Print ( std :: string && ) { std :: cout << \"\u53f3\u8fba\u5024\u53c2\u7167\" << std :: endl ; } int main () { std :: string str = \"hoge\" ; Print ( str ); Print ( std :: move ( str )); return 0 ; } # \u5b9f\u884c\u7d50\u679c \u5de6\u8fba\u5024\u53c2\u7167 \u53f3\u8fba\u5024\u53c2\u7167","title":"\u53f3\u8fba\u5024\u53c2\u7167"},{"location":"ch06-05-smart-pointers/","text":"\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf \u00b6 \u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29 \u00b6 \u30dd\u30a4\u30f3\u30bf\u306f\u30b3\u30d4\u30fc\u53ef\u80fd\u306a\u305f\u3081\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5148\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 int main () { int * a = new int ( 100 ); int * b = a ; // b \u304b\u3089\u3082 a \u3068\u540c\u3058\u30ea\u30bd\u30fc\u30b9\u3092\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002 // a \u3068 b \u306e\u3069\u3061\u3089\u3092 delete \u3059\u308b\u3079\u304d\u304b\uff1f return 0 ; } \u52d5\u7684\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u3092\u6271\u3046\u5834\u5408\u3001 \u8aa4\u3063\u3066 delete \u3092\u5fd8\u308c\u305f\u308a\u3001\u540c\u3058\u30ea\u30bd\u30fc\u30b9\u3092\u8907\u6570\u56de delete \u3057\u305f\u308a\u3059\u308b\u3053\u3068\u3092\u9632\u3050\u305f\u3081\u306b\u3001 \u3069\u306e\u5909\u6570\u304c\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\uff08\u30ea\u30bd\u30fc\u30b9\u3092\u53c2\u7167\u3059\u308b\u6a29\u5229\u3068\u958b\u653e\u3059\u308b\u6a29\u5229\uff09\u3092\u6301\u3064\u306e\u304b\u3092\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3063\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u30dd\u30a4\u30f3\u30bf\u3092\u6271\u3046\u4e0a\u3067\u306e\u5371\u967a\u6027\u3084\u8ca0\u62c5\u3092\u4e0b\u3052\u308b\u305f\u3081\u306b\u3001 C++ \u3067\u306f\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3068\u3044\u3046\u4ed5\u7d44\u307f\u304c\u5b58\u5728\u3057\u307e\u3059\u3002 \u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306f <memory> \u30d8\u30c3\u30c0\u306b\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002 std::shared_ptr \u00b6 std::shared_ptr \u306f\u52d5\u7684\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\u3092\u5171\u6709\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002 \u5185\u90e8\u3067\u6240\u6709\u6a29\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e00\u89a7\u3092\u7ba1\u7406\u3057\u3001\u6240\u6709\u8005\u304c\u3044\u306a\u304f\u306a\u3063\u305f\u6642\u306b\u81ea\u52d5\u7684\u306b delete \u3059\u308b\u4ed5\u7d44\u307f\u3092\u6709\u3057\u3066\u3044\u307e\u3059\u3002 std::shared_ptr \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001 std::make_shared \u3092\u5229\u7528\u3057\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: shared_ptr < int > x = std :: make_shared < int > ( 100 ); // int* x = new int(100); \u306e\u4ee3\u308f\u308a // \u6240\u6709\u8005\u306f1\u4eba\u3002 { std :: shared_ptr < int > y = x ; // \u901a\u5e38\u306e\u30dd\u30a4\u30f3\u30bf\u540c\u69d8\u3001\u30b3\u30d4\u30fc\u3059\u308b\u3053\u3068\u3067\u6240\u6709\u6a29\u304c\u5171\u6709\u3055\u308c\u308b // \u6240\u6709\u8005\u304c2\u4eba\u306b\u5897\u3048\u308b\u3002 std :: cout << * y << std :: endl ; } // y \u304c\u7834\u68c4\u3055\u308c\u3066\u6240\u6709\u8005\u304c1\u4eba\u306b\u306a\u308b\u3002 std :: cout << * x << std :: endl ; return 0 ; } // \u6240\u6709\u8005\u304c0\u4eba\u306b\u306a\u308b\u306e\u3067\u3001 x \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b delete \u304c\u884c\u308f\u308c\u308b\u3002 std::weak_ptr \u00b6 std::shared_ptr \u306e\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\u3092\u6301\u3064\u3053\u3068\u306a\u304f\u3001 \u305d\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u76e3\u8996\u3059\u308b\uff08\u5f31\u53c2\u7167\uff09\u3053\u3068\u304c\u51fa\u6765\u308b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3068\u3057\u3066 std::weak_ptr \u304c\u3042\u308a\u307e\u3059\u3002 lock() \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u76e3\u8996\u3057\u3066\u3044\u308b std::shared_ptr \u306e\u30ea\u30bd\u30fc\u30b9\u304c\u6709\u52b9\u306a\u5834\u5408\u3001 \u76e3\u8996\u5148\u3068\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3059\u308b std::shared_ptr \u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: shared_ptr < int > sp = std :: make_shared < int > ( 246 ); std :: weak_ptr < int > wp = sp ; // sp \u3092\u76e3\u8996\u5bfe\u8c61\u3068\u3057\u3066 wp \u306b\u767b\u9332\u3059\u308b std :: shared_ptr < int > sp2 = wp . lock (); // \u6709\u52b9\u306a\u5834\u5408\u306f sp \u3068\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3059\u308b sp2 \u304c\u4f5c\u3089\u308c\u308b if ( sp2 ) { std :: cout << * sp2 << std :: endl ; } else { std :: cout << \"\u30ea\u30bd\u30fc\u30b9\u306f\u89e3\u653e\u6e08\u307f\" << std :: endl ; } return 0 ; } std::unique_ptr \u00b6 std::unique_ptr \u306f\u3001 std::shared_ptr \u3068\u9055\u3044\u3001\u30b3\u30d4\u30fc\u304c\u51fa\u6765\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081\u3001\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u8005\u304c\u5e38\u306b1\u4eba\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: unique_ptr < int > x ( new int ( 100 )); // std::unique_ptr<int> y = x; // \u30b3\u30d4\u30fc\u51fa\u6765\u306a\u3044\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3002 std :: cout << * x << std :: endl ; return 0 ; } // x \u304c\u6240\u6709\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u304c\u89e3\u653e\u3055\u308c\u308b\u3002 \u6240\u6709\u6a29\u306e\u5171\u6709\u306f\u3067\u304d\u307e\u305b\u3093\u304c\u3001 std::move \u3092\u4f7f\u3046\u3053\u3068\u3067\u6240\u6709\u6a29\u306e\u79fb\u52d5\u306f\u51fa\u6765\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: unique_ptr < int > x ( new int ( 100 )); std :: unique_ptr < int > y ( std :: move ( x )); // \u30e0\u30fc\u30d6\u306f\u51fa\u6765\u308b\u305f\u3081\u3001\u6240\u6709\u6a29\u306e\u79fb\u52d5\u306f\u53ef\u80fd\u3002 // \u6240\u6709\u6a29\u3092\u79fb\u52d5\u3057\u305f\u305f\u3081\u3001x \u306f\u4f55\u3082\u6240\u6709\u3057\u3066\u3044\u306a\u3044\u3002 std :: cout << * y << std :: endl ; return 0 ; } // y \u304c\u6240\u6709\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u304c\u89e3\u653e\u3055\u308c\u308b\u3002 std::auto_ptr \u00b6 std::auto_ptr \u306f C++11 \u3067\u306f\u975e\u63a8\u5968\u3068\u306a\u3063\u3066\u304a\u308a C++17 \u3067\u306f\u524a\u9664\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u8a73\u7d30\u306f std::auto_ptr - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"6.5. \u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf"},{"location":"ch06-05-smart-pointers/#_1","text":"","title":"\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf"},{"location":"ch06-05-smart-pointers/#_2","text":"\u30dd\u30a4\u30f3\u30bf\u306f\u30b3\u30d4\u30fc\u53ef\u80fd\u306a\u305f\u3081\u3001\u30dd\u30a4\u30f3\u30bf\u304c\u6307\u3059\u5148\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 int main () { int * a = new int ( 100 ); int * b = a ; // b \u304b\u3089\u3082 a \u3068\u540c\u3058\u30ea\u30bd\u30fc\u30b9\u3092\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002 // a \u3068 b \u306e\u3069\u3061\u3089\u3092 delete \u3059\u308b\u3079\u304d\u304b\uff1f return 0 ; } \u52d5\u7684\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u3092\u6271\u3046\u5834\u5408\u3001 \u8aa4\u3063\u3066 delete \u3092\u5fd8\u308c\u305f\u308a\u3001\u540c\u3058\u30ea\u30bd\u30fc\u30b9\u3092\u8907\u6570\u56de delete \u3057\u305f\u308a\u3059\u308b\u3053\u3068\u3092\u9632\u3050\u305f\u3081\u306b\u3001 \u3069\u306e\u5909\u6570\u304c\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\uff08\u30ea\u30bd\u30fc\u30b9\u3092\u53c2\u7167\u3059\u308b\u6a29\u5229\u3068\u958b\u653e\u3059\u308b\u6a29\u5229\uff09\u3092\u6301\u3064\u306e\u304b\u3092\u30d7\u30ed\u30b0\u30e9\u30de\u304c\u7d30\u5fc3\u306e\u6ce8\u610f\u3092\u6255\u3063\u3066\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u30dd\u30a4\u30f3\u30bf\u3092\u6271\u3046\u4e0a\u3067\u306e\u5371\u967a\u6027\u3084\u8ca0\u62c5\u3092\u4e0b\u3052\u308b\u305f\u3081\u306b\u3001 C++ \u3067\u306f\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3068\u3044\u3046\u4ed5\u7d44\u307f\u304c\u5b58\u5728\u3057\u307e\u3059\u3002 \u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306f <memory> \u30d8\u30c3\u30c0\u306b\u3066\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29"},{"location":"ch06-05-smart-pointers/#stdshared_ptr","text":"std::shared_ptr \u306f\u52d5\u7684\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\u3092\u5171\u6709\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002 \u5185\u90e8\u3067\u6240\u6709\u6a29\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e00\u89a7\u3092\u7ba1\u7406\u3057\u3001\u6240\u6709\u8005\u304c\u3044\u306a\u304f\u306a\u3063\u305f\u6642\u306b\u81ea\u52d5\u7684\u306b delete \u3059\u308b\u4ed5\u7d44\u307f\u3092\u6709\u3057\u3066\u3044\u307e\u3059\u3002 std::shared_ptr \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u3001 std::make_shared \u3092\u5229\u7528\u3057\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: shared_ptr < int > x = std :: make_shared < int > ( 100 ); // int* x = new int(100); \u306e\u4ee3\u308f\u308a // \u6240\u6709\u8005\u306f1\u4eba\u3002 { std :: shared_ptr < int > y = x ; // \u901a\u5e38\u306e\u30dd\u30a4\u30f3\u30bf\u540c\u69d8\u3001\u30b3\u30d4\u30fc\u3059\u308b\u3053\u3068\u3067\u6240\u6709\u6a29\u304c\u5171\u6709\u3055\u308c\u308b // \u6240\u6709\u8005\u304c2\u4eba\u306b\u5897\u3048\u308b\u3002 std :: cout << * y << std :: endl ; } // y \u304c\u7834\u68c4\u3055\u308c\u3066\u6240\u6709\u8005\u304c1\u4eba\u306b\u306a\u308b\u3002 std :: cout << * x << std :: endl ; return 0 ; } // \u6240\u6709\u8005\u304c0\u4eba\u306b\u306a\u308b\u306e\u3067\u3001 x \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u81ea\u52d5\u7684\u306b delete \u304c\u884c\u308f\u308c\u308b\u3002","title":"std::shared_ptr"},{"location":"ch06-05-smart-pointers/#stdweak_ptr","text":"std::shared_ptr \u306e\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u6a29\u3092\u6301\u3064\u3053\u3068\u306a\u304f\u3001 \u305d\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u76e3\u8996\u3059\u308b\uff08\u5f31\u53c2\u7167\uff09\u3053\u3068\u304c\u51fa\u6765\u308b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3068\u3057\u3066 std::weak_ptr \u304c\u3042\u308a\u307e\u3059\u3002 lock() \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u76e3\u8996\u3057\u3066\u3044\u308b std::shared_ptr \u306e\u30ea\u30bd\u30fc\u30b9\u304c\u6709\u52b9\u306a\u5834\u5408\u3001 \u76e3\u8996\u5148\u3068\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3059\u308b std::shared_ptr \u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: shared_ptr < int > sp = std :: make_shared < int > ( 246 ); std :: weak_ptr < int > wp = sp ; // sp \u3092\u76e3\u8996\u5bfe\u8c61\u3068\u3057\u3066 wp \u306b\u767b\u9332\u3059\u308b std :: shared_ptr < int > sp2 = wp . lock (); // \u6709\u52b9\u306a\u5834\u5408\u306f sp \u3068\u30ea\u30bd\u30fc\u30b9\u3092\u5171\u6709\u3059\u308b sp2 \u304c\u4f5c\u3089\u308c\u308b if ( sp2 ) { std :: cout << * sp2 << std :: endl ; } else { std :: cout << \"\u30ea\u30bd\u30fc\u30b9\u306f\u89e3\u653e\u6e08\u307f\" << std :: endl ; } return 0 ; }","title":"std::weak_ptr"},{"location":"ch06-05-smart-pointers/#stdunique_ptr","text":"std::unique_ptr \u306f\u3001 std::shared_ptr \u3068\u9055\u3044\u3001\u30b3\u30d4\u30fc\u304c\u51fa\u6765\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081\u3001\u78ba\u4fdd\u3057\u305f\u30ea\u30bd\u30fc\u30b9\u306e\u6240\u6709\u8005\u304c\u5e38\u306b1\u4eba\u306b\u306a\u308a\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: unique_ptr < int > x ( new int ( 100 )); // std::unique_ptr<int> y = x; // \u30b3\u30d4\u30fc\u51fa\u6765\u306a\u3044\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3002 std :: cout << * x << std :: endl ; return 0 ; } // x \u304c\u6240\u6709\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u304c\u89e3\u653e\u3055\u308c\u308b\u3002 \u6240\u6709\u6a29\u306e\u5171\u6709\u306f\u3067\u304d\u307e\u305b\u3093\u304c\u3001 std::move \u3092\u4f7f\u3046\u3053\u3068\u3067\u6240\u6709\u6a29\u306e\u79fb\u52d5\u306f\u51fa\u6765\u307e\u3059\u3002 #include <iostream> #include <memory> int main () { std :: unique_ptr < int > x ( new int ( 100 )); std :: unique_ptr < int > y ( std :: move ( x )); // \u30e0\u30fc\u30d6\u306f\u51fa\u6765\u308b\u305f\u3081\u3001\u6240\u6709\u6a29\u306e\u79fb\u52d5\u306f\u53ef\u80fd\u3002 // \u6240\u6709\u6a29\u3092\u79fb\u52d5\u3057\u305f\u305f\u3081\u3001x \u306f\u4f55\u3082\u6240\u6709\u3057\u3066\u3044\u306a\u3044\u3002 std :: cout << * y << std :: endl ; return 0 ; } // y \u304c\u6240\u6709\u3057\u3066\u3044\u308b\u30ea\u30bd\u30fc\u30b9\u304c\u89e3\u653e\u3055\u308c\u308b\u3002","title":"std::unique_ptr"},{"location":"ch06-05-smart-pointers/#stdauto_ptr","text":"std::auto_ptr \u306f C++11 \u3067\u306f\u975e\u63a8\u5968\u3068\u306a\u3063\u3066\u304a\u308a C++17 \u3067\u306f\u524a\u9664\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 \u8a73\u7d30\u306f std::auto_ptr - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"std::auto_ptr"},{"location":"ch07-01-member-variables/","text":"\u30e1\u30f3\u30d0\u5909\u6570 \u00b6 \u30af\u30e9\u30b9\u3068\u306f\u5909\u6570\u3068\u95a2\u6570\u3092\u96c6\u7d04\u3057\u305f\u578b\u3092\u3064\u304f\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u3002 \u30af\u30e9\u30b9\u304c\u6301\u3064\u5909\u6570\u3092\u30e1\u30f3\u30d0\u5909\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u306b int \u578b\u306e\u30e1\u30f3\u30d0\u5909\u6570 height \u3068 width \u3092\u6301\u305f\u305b\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int height_ ; int width_ ; }; \u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u306b\u306f . \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 Rectangle r ; r . height_ = 10 ; r . width_ = 20 ; \u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3046\u5834\u5408\u306b\u3001\u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle rectangle ; Rectangle * r = & rectangle ; ( * r ). height_ = 10 ; ( * r ). width_ = 20 ; \u62ec\u5f27\u3092\u3064\u3051\u305a\u306b *r.height_ \u3068\u3059\u308b\u3068\u610f\u5473\u304c\u5909\u308f\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 \u3053\u306e\u8a18\u8ff0\u65b9\u6cd5\u306f\u4e0d\u4fbf\u306a\u305f\u3081 (*r). \u306e\u4ee3\u308f\u308a\u306b r-> \u3068\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Rectangle rectangle ; Rectangle * r = & rectangle ; r -> height_ = 10 ; r -> width_ = 20 ; \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u7406\u7531 \u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u304c\u539f\u56e0\u3067\u3059\u3002 \u6f14\u7b97\u5b50\u306b\u306f\u512a\u5148\u9806\u4f4d\u304c\u3042\u308a\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u52a0\u7b97 + \u3068\u4e57\u7b97 * \u3067\u306f\u4e57\u7b97 * \u3092\u512a\u5148\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001 1 + 2 * 3 \u306f 1 + (2 * 3) \u3068\u89e3\u91c8\u3055\u308c\u3066\u7d50\u679c\u306f 7 \u306b\u306a\u308a\u307e\u3059\u3002 (1 + 2) * 3) \u306e\u7d50\u679c\u3067\u3042\u308b 9 \u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 \u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e * \u3068\u30e1\u30f3\u30d0\u5909\u6570\u53c2\u7167\u306e . \u3067\u306f \u30e1\u30f3\u30d0\u5909\u6570\u53c2\u7167\u306e . \u3092\u512a\u5148\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001 *r.height_ \u306f *(r.height_) \u3068\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 \u3057\u304b\u3057\u306a\u304c\u3089 r \u306e\u578b\u3067\u3042\u308b std::unique_ptr<Rectangle> \u306b\u306f height_ \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u306f\u306a\u3044\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f C++\u306e\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"7.1. \u30e1\u30f3\u30d0\u5909\u6570"},{"location":"ch07-01-member-variables/#_1","text":"\u30af\u30e9\u30b9\u3068\u306f\u5909\u6570\u3068\u95a2\u6570\u3092\u96c6\u7d04\u3057\u305f\u578b\u3092\u3064\u304f\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\u3002 \u30af\u30e9\u30b9\u304c\u6301\u3064\u5909\u6570\u3092\u30e1\u30f3\u30d0\u5909\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u306b int \u578b\u306e\u30e1\u30f3\u30d0\u5909\u6570 height \u3068 width \u3092\u6301\u305f\u305b\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int height_ ; int width_ ; }; \u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u306b\u306f . \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 Rectangle r ; r . height_ = 10 ; r . width_ = 20 ; \u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3046\u5834\u5408\u306b\u3001\u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle rectangle ; Rectangle * r = & rectangle ; ( * r ). height_ = 10 ; ( * r ). width_ = 20 ; \u62ec\u5f27\u3092\u3064\u3051\u305a\u306b *r.height_ \u3068\u3059\u308b\u3068\u610f\u5473\u304c\u5909\u308f\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 \u3053\u306e\u8a18\u8ff0\u65b9\u6cd5\u306f\u4e0d\u4fbf\u306a\u305f\u3081 (*r). \u306e\u4ee3\u308f\u308a\u306b r-> \u3068\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Rectangle rectangle ; Rectangle * r = & rectangle ; r -> height_ = 10 ; r -> width_ = 20 ; \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\u7406\u7531 \u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u304c\u539f\u56e0\u3067\u3059\u3002 \u6f14\u7b97\u5b50\u306b\u306f\u512a\u5148\u9806\u4f4d\u304c\u3042\u308a\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u52a0\u7b97 + \u3068\u4e57\u7b97 * \u3067\u306f\u4e57\u7b97 * \u3092\u512a\u5148\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001 1 + 2 * 3 \u306f 1 + (2 * 3) \u3068\u89e3\u91c8\u3055\u308c\u3066\u7d50\u679c\u306f 7 \u306b\u306a\u308a\u307e\u3059\u3002 (1 + 2) * 3) \u306e\u7d50\u679c\u3067\u3042\u308b 9 \u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 \u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e * \u3068\u30e1\u30f3\u30d0\u5909\u6570\u53c2\u7167\u306e . \u3067\u306f \u30e1\u30f3\u30d0\u5909\u6570\u53c2\u7167\u306e . \u3092\u512a\u5148\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001 *r.height_ \u306f *(r.height_) \u3068\u89e3\u91c8\u3055\u308c\u307e\u3059\u3002 \u3057\u304b\u3057\u306a\u304c\u3089 r \u306e\u578b\u3067\u3042\u308b std::unique_ptr<Rectangle> \u306b\u306f height_ \u3068\u3044\u3046\u30e1\u30f3\u30d0\u5909\u6570\u306f\u306a\u3044\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 \u8a73\u7d30\u306f C++\u306e\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30e1\u30f3\u30d0\u5909\u6570"},{"location":"ch07-02-member-functions/","text":"\u30e1\u30f3\u30d0\u95a2\u6570 \u00b6 \u30af\u30e9\u30b9\u304c\u6301\u3064\u95a2\u6570\u3092\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u306b \u9762\u7a4d\u3092\u6c42\u3081\u308b\u30e1\u30f3\u30d0\u95a2\u6570 Area \u3092\u6301\u305f\u305b\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int Area () { return height_ * width_ ; } int height_ ; int width_ ; }; \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f . \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 Rectangle r ; r . height_ = 10 ; r . width_ = 20 ; r . Area (); \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9 \u00b6 \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int Area (); int height_ ; int width_ ; }; int Rectangle :: Area () { return height_ * width_ ; } \u3069\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u304b\u3092\u8868\u3059\u305f\u3081\u306b Rectangle:: \u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306a inline \u6307\u5b9a \u30af\u30e9\u30b9\u5ba3\u8a00\u306e\u4e2d\u3067\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u305f\u5834\u5408\u3001\u6697\u9ed9\u7684\u306b inline \u6307\u5b9a\u3055\u308c\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u30af\u30e9\u30b9\u5ba3\u8a00\u306e\u4e2d\u3067\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3082 \u30ea\u30f3\u30af\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 rectangle.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #ifndef RECTANGLE_H_ #define RECTANGLE_H_ class Rectangle { public : int Area () { return height_ * width_ ; } int height_ ; int width_ ; }; #endif // RECTANGLE_H_ something.h 1 2 3 4 5 6 #ifndef SOMETHING_H_ #define SOMETHING_H_ void Something (); #endif // SOMETHING_H_ something.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 #include \"something.h\" #include <iostream> #include \"rectangle.h\" void Something () { Rectangle r ; r . height_ = 2 ; r . width_ = 3 ; std :: cout << r . Area () << std :: endl ; } main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> #include \"rectangle.h\" #include \"something.h\" int main () { Rectangle r ; r . height_ = 10 ; r . width_ = 20 ; std :: cout << r . Area () << std :: endl ; Something (); return 0 ; } \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u6697\u9ed9\u7684\u306a inline \u6307\u5b9a\u306f\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u884c\u3046\u3068\u30ea\u30f3\u30af\u6642\u306b\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 rectangle.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #ifndef RECTANGLE_H_ #define RECTANGLE_H_ class Rectangle { public : int Area (); int height_ ; int width_ ; }; int Rectangle :: Area () { return height_ * width_ ; } #endif // RECTANGLE_H_ \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u884c\u3046\u306b\u306f\u3001 \u660e\u793a\u7684\u306b inline \u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 rectangle.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #ifndef RECTANGLE_H_ #define RECTANGLE_H_ class Rectangle { public : int Area (); int height_ ; int width_ ; }; inline int Rectangle :: Area () { return height_ * width_ ; } #endif // RECTANGLE_H_ const \u30e1\u30f3\u30d0\u95a2\u6570 \u00b6 \u5f15\u6570\u30ea\u30b9\u30c8\u306e\u3042\u3068\u306b const \u3092\u3064\u3051\u308b\u3053\u3068\u3067 const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u306a\u308a\u307e\u3059\u3002 class Rectangle { public : int Area () const ; }; const \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306f\u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 class Rectangle { public : int Area () const ; int height_ ; int width_ ; }; int Rectangle :: Area () const { height_ = 0 ; // \u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 return height_ * width_ ; } const \u30e1\u30f3\u30d0\u95a2\u6570\u306f\u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3057\u306a\u3044\u305f\u3081\u3001 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u3092\u5909\u5316\u3055\u305b\u305a\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u3044\u3046\u5236\u7d04\u3092\u6e80\u305f\u3059\u305f\u3081\u306b\u3001 const \u30e1\u30f3\u30d0\u95a2\u6570\u304b\u3089\u547c\u3073\u51fa\u305b\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u306f const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u9650\u5b9a\u3055\u308c\u307e\u3059\u3002 this \u30dd\u30a4\u30f3\u30bf \u00b6 \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306f this \u3067\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 class Rectangle { public : int Area (); int height_ ; int width_ ; }; int Rectangle :: Area () { // this \u30dd\u30a4\u30f3\u30bf\u7d4c\u7531\u3067\u30e1\u30f3\u30d0\u5909\u6570\u3092\u4f7f\u7528 return this -> height_ * this -> width_ ; }","title":"7.2. \u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"ch07-02-member-functions/#_1","text":"\u30af\u30e9\u30b9\u304c\u6301\u3064\u95a2\u6570\u3092\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u306b \u9762\u7a4d\u3092\u6c42\u3081\u308b\u30e1\u30f3\u30d0\u95a2\u6570 Area \u3092\u6301\u305f\u305b\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int Area () { return height_ * width_ ; } int height_ ; int width_ ; }; \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f . \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 Rectangle r ; r . height_ = 10 ; r . width_ = 20 ; r . Area ();","title":"\u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"ch07-02-member-functions/#_2","text":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : int Area (); int height_ ; int width_ ; }; int Rectangle :: Area () { return height_ * width_ ; } \u3069\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3042\u308b\u304b\u3092\u8868\u3059\u305f\u3081\u306b Rectangle:: \u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306a inline \u6307\u5b9a \u30af\u30e9\u30b9\u5ba3\u8a00\u306e\u4e2d\u3067\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u305f\u5834\u5408\u3001\u6697\u9ed9\u7684\u306b inline \u6307\u5b9a\u3055\u308c\u307e\u3059\u3002 \u305d\u306e\u305f\u3081\u3001\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u306e\u30af\u30e9\u30b9\u5ba3\u8a00\u306e\u4e2d\u3067\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3082 \u30ea\u30f3\u30af\u6642\u306b\u30a8\u30e9\u30fc\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 rectangle.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 #ifndef RECTANGLE_H_ #define RECTANGLE_H_ class Rectangle { public : int Area () { return height_ * width_ ; } int height_ ; int width_ ; }; #endif // RECTANGLE_H_ something.h 1 2 3 4 5 6 #ifndef SOMETHING_H_ #define SOMETHING_H_ void Something (); #endif // SOMETHING_H_ something.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 #include \"something.h\" #include <iostream> #include \"rectangle.h\" void Something () { Rectangle r ; r . height_ = 2 ; r . width_ = 3 ; std :: cout << r . Area () << std :: endl ; } main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> #include \"rectangle.h\" #include \"something.h\" int main () { Rectangle r ; r . height_ = 10 ; r . width_ = 20 ; std :: cout << r . Area () << std :: endl ; Something (); return 0 ; } \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u6697\u9ed9\u7684\u306a inline \u6307\u5b9a\u306f\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u884c\u3046\u3068\u30ea\u30f3\u30af\u6642\u306b\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 rectangle.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #ifndef RECTANGLE_H_ #define RECTANGLE_H_ class Rectangle { public : int Area (); int height_ ; int width_ ; }; int Rectangle :: Area () { return height_ * width_ ; } #endif // RECTANGLE_H_ \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u884c\u3046\u306b\u306f\u3001 \u660e\u793a\u7684\u306b inline \u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 rectangle.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #ifndef RECTANGLE_H_ #define RECTANGLE_H_ class Rectangle { public : int Area (); int height_ ; int width_ ; }; inline int Rectangle :: Area () { return height_ * width_ ; } #endif // RECTANGLE_H_","title":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9"},{"location":"ch07-02-member-functions/#const","text":"\u5f15\u6570\u30ea\u30b9\u30c8\u306e\u3042\u3068\u306b const \u3092\u3064\u3051\u308b\u3053\u3068\u3067 const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u306a\u308a\u307e\u3059\u3002 class Rectangle { public : int Area () const ; }; const \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306f\u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 class Rectangle { public : int Area () const ; int height_ ; int width_ ; }; int Rectangle :: Area () const { height_ = 0 ; // \u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3059\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 return height_ * width_ ; } const \u30e1\u30f3\u30d0\u95a2\u6570\u306f\u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3057\u306a\u3044\u305f\u3081\u3001 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u3092\u5909\u5316\u3055\u305b\u305a\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u5909\u6570\u3092\u5909\u66f4\u3057\u306a\u3044\u3068\u3044\u3046\u5236\u7d04\u3092\u6e80\u305f\u3059\u305f\u3081\u306b\u3001 const \u30e1\u30f3\u30d0\u95a2\u6570\u304b\u3089\u547c\u3073\u51fa\u305b\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u306f const \u30e1\u30f3\u30d0\u95a2\u6570\u306b\u9650\u5b9a\u3055\u308c\u307e\u3059\u3002","title":"const \u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"ch07-02-member-functions/#this","text":"\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306f this \u3067\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 class Rectangle { public : int Area (); int height_ ; int width_ ; }; int Rectangle :: Area () { // this \u30dd\u30a4\u30f3\u30bf\u7d4c\u7531\u3067\u30e1\u30f3\u30d0\u5909\u6570\u3092\u4f7f\u7528 return this -> height_ * this -> width_ ; }","title":"this \u30dd\u30a4\u30f3\u30bf"},{"location":"ch07-03-inheritance/","text":"\u7d99\u627f \u00b6 \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0 (\u30e1\u30f3\u30d0\u5909\u6570\u3068\u30e1\u30f3\u30d0\u95a2\u6570) \u3092\u5f15\u304d\u7d99\u3044\u3067 \u65b0\u3057\u3044\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3092\u7d99\u627f\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066 \u6b63\u65b9\u5f62\u3092\u6271\u3046 Square \u30af\u30e9\u30b9\u3092\u4f5c\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <iostream> class Rectangle { public : int Area () const { return height_ * width_ ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } }; int main () { Square s ; s . SetSize ( 10 ); std :: cout << s . Area () << std :: endl ; return 0 ; } Square \u30af\u30e9\u30b9\u3067\u306f Rectangle \u30af\u30e9\u30b9\u306e\u5168\u30e1\u30f3\u30d0\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570 SetSize \u3067 Rectangle \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570 height_ \u3068 width_ \u3092\u53c2\u7167\u3057\u305f\u308a\u3001 \u30e1\u30f3\u30d0\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3067 s.Area \u3068\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u7d99\u627f\u3092\u884c\u3063\u305f\u5834\u5408\u3082\u30e1\u30f3\u30d0\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001 Square \u30af\u30e9\u30b9\u3067\u306f Rectangle \u30af\u30e9\u30b9\u306b\u306f\u306a\u3044\u30e1\u30f3\u30d0\u95a2\u6570 SetSize \u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u57fa\u5e95\u30af\u30e9\u30b9\u3068\u6d3e\u751f\u30af\u30e9\u30b9 \u00b6 \u7d99\u627f\u306e\u5143\u306b\u306a\u3063\u305f\u30af\u30e9\u30b9\u306e\u3053\u3068\u3092\u57fa\u5e95\u30af\u30e9\u30b9\u3001 \u7d99\u627f\u3057\u3066\u4f5c\u3063\u305f\u30af\u30e9\u30b9\u306e\u3053\u3068\u3092\u6d3e\u751f\u30af\u30e9\u30b9\u3068\u3044\u3044\u307e\u3059\u3002 Rectangle \u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066 Square \u30af\u30e9\u30b9\u3092\u4f5c\u308b\u5834\u5408\u3001 Rectangle \u30af\u30e9\u30b9\u304c\u57fa\u5e95\u30af\u30e9\u30b9\u3001 Square \u30af\u30e9\u30b9\u304c\u6d3e\u751f\u30af\u30e9\u30b9\u3068\u306a\u308a\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 \u00b6 \u30e1\u30f3\u30d0\u3092\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u306f\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u3088\u3063\u3066\u5236\u9650\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u306f\u6b21\u306e3\u3064\u304c\u3042\u308a\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 \u81ea\u30af\u30e9\u30b9 \u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9 \u305d\u306e\u4ed6 public protected private \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f private \u306b\u306a\u308a\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u306b\u5bfe\u3059\u308b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 \u00b6 private \u306b\u3059\u308b\u3068\u81ea\u30af\u30e9\u30b9\u5185\u3067\u306e\u307f\u30e1\u30f3\u30d0\u304c\u53c2\u7167\u3067\u304d\u307e\u3059\u3002 private_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } private : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 width_ = size ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 } }; int main () { Rectangle r ; r . height_ = 10 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 r . width_ = 20 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 Square s ; s . SetSize ( 10 ); return 0 ; } protected \u306b\u3059\u308b\u3068\u81ea\u30af\u30e9\u30b9\u5185\u306b\u52a0\u3048\u3001\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u5185\u3067\u3082\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 protected_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } protected : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u53c2\u7167\u53ef width_ = size ; // \u53c2\u7167\u53ef } }; int main () { Rectangle r ; r . height_ = 10 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 r . width_ = 20 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 Square s ; s . SetSize ( 10 ); return 0 ; } public \u306b\u3059\u308b\u3068\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u306e\u5236\u9650\u306f\u306a\u304f\u306a\u308a\u307e\u3059\u3002 public_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } public : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u53c2\u7167\u53ef width_ = size ; // \u53c2\u7167\u53ef } }; int main () { Rectangle r ; r . height_ = 10 ; // \u53c2\u7167\u53ef r . width_ = 20 ; // \u53c2\u7167\u53ef Square s ; s . SetSize ( 10 ); return 0 ; } \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u6b21\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u304c\u51fa\u73fe\u3059\u308b\u307e\u3067\u304c\u6709\u52b9\u7bc4\u56f2\u3068\u306a\u308a\u307e\u3059\u3002 \u307e\u305f\u3001\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u4f55\u5ea6\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 class AccessSpecifier { void Private1 (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u306f private public : void Public1 (); void Public2 (); public : // \u5bfe\u8c61\u3068\u306a\u308b\u30e1\u30f3\u30d0\u304c\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3057 private : void Private2 (); private : // \u30a2\u30af\u30bb\u30b9\u30ec\u30d9\u30eb\u306e\u5909\u5316\u304c\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3057 void Private3 (); }; \u8aad\u307f\u3065\u3089\u3044\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3092\u9632\u3050\u305f\u3081\u3001 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u3067\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002 \u7d99\u627f\u306b\u5bfe\u3059\u308b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 \u00b6 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u306f\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u3088\u3063\u3066 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3092\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u3092\u3055\u3089\u306b\u5236\u9650\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f private \u306b\u306a\u308a\u307e\u3059\u3002 class Base {}; class Sub1 : public Base {}; // public \u7d99\u627f class Sub2 : protected Base {}; // protected \u7d99\u627f class Sub3 : private Base {}; // private \u7d99\u627f class Sub4 : Base {}; // private \u7d99\u627f (\u30c7\u30d5\u30a9\u30eb\u30c8) \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u5b9f\u88c5\u3092\u884c\u3046\u5834\u5408\u306b\u306f public \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u8a73\u7d30\u306f \u6d3e\u751f\u30af\u30e9\u30b9 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"7.3. \u7d99\u627f"},{"location":"ch07-03-inheritance/#_1","text":"\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0 (\u30e1\u30f3\u30d0\u5909\u6570\u3068\u30e1\u30f3\u30d0\u95a2\u6570) \u3092\u5f15\u304d\u7d99\u3044\u3067 \u65b0\u3057\u3044\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3092\u7d99\u627f\u3068\u3044\u3044\u307e\u3059\u3002 \u9577\u65b9\u5f62\u3092\u6271\u3046 Rectangle \u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066 \u6b63\u65b9\u5f62\u3092\u6271\u3046 Square \u30af\u30e9\u30b9\u3092\u4f5c\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <iostream> class Rectangle { public : int Area () const { return height_ * width_ ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } }; int main () { Square s ; s . SetSize ( 10 ); std :: cout << s . Area () << std :: endl ; return 0 ; } Square \u30af\u30e9\u30b9\u3067\u306f Rectangle \u30af\u30e9\u30b9\u306e\u5168\u30e1\u30f3\u30d0\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570 SetSize \u3067 Rectangle \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570 height_ \u3068 width_ \u3092\u53c2\u7167\u3057\u305f\u308a\u3001 \u30e1\u30f3\u30d0\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u3067 s.Area \u3068\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u7d99\u627f\u3092\u884c\u3063\u305f\u5834\u5408\u3082\u30e1\u30f3\u30d0\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001 Square \u30af\u30e9\u30b9\u3067\u306f Rectangle \u30af\u30e9\u30b9\u306b\u306f\u306a\u3044\u30e1\u30f3\u30d0\u95a2\u6570 SetSize \u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u7d99\u627f"},{"location":"ch07-03-inheritance/#_2","text":"\u7d99\u627f\u306e\u5143\u306b\u306a\u3063\u305f\u30af\u30e9\u30b9\u306e\u3053\u3068\u3092\u57fa\u5e95\u30af\u30e9\u30b9\u3001 \u7d99\u627f\u3057\u3066\u4f5c\u3063\u305f\u30af\u30e9\u30b9\u306e\u3053\u3068\u3092\u6d3e\u751f\u30af\u30e9\u30b9\u3068\u3044\u3044\u307e\u3059\u3002 Rectangle \u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066 Square \u30af\u30e9\u30b9\u3092\u4f5c\u308b\u5834\u5408\u3001 Rectangle \u30af\u30e9\u30b9\u304c\u57fa\u5e95\u30af\u30e9\u30b9\u3001 Square \u30af\u30e9\u30b9\u304c\u6d3e\u751f\u30af\u30e9\u30b9\u3068\u306a\u308a\u307e\u3059\u3002","title":"\u57fa\u5e95\u30af\u30e9\u30b9\u3068\u6d3e\u751f\u30af\u30e9\u30b9"},{"location":"ch07-03-inheritance/#_3","text":"\u30e1\u30f3\u30d0\u3092\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u306f\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u3088\u3063\u3066\u5236\u9650\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u306f\u6b21\u306e3\u3064\u304c\u3042\u308a\u307e\u3059\u3002 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50 \u81ea\u30af\u30e9\u30b9 \u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9 \u305d\u306e\u4ed6 public protected private \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f private \u306b\u306a\u308a\u307e\u3059\u3002","title":"\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50"},{"location":"ch07-03-inheritance/#_4","text":"private \u306b\u3059\u308b\u3068\u81ea\u30af\u30e9\u30b9\u5185\u3067\u306e\u307f\u30e1\u30f3\u30d0\u304c\u53c2\u7167\u3067\u304d\u307e\u3059\u3002 private_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } private : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 width_ = size ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 } }; int main () { Rectangle r ; r . height_ = 10 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 r . width_ = 20 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 Square s ; s . SetSize ( 10 ); return 0 ; } protected \u306b\u3059\u308b\u3068\u81ea\u30af\u30e9\u30b9\u5185\u306b\u52a0\u3048\u3001\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u5185\u3067\u3082\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 protected_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } protected : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u53c2\u7167\u53ef width_ = size ; // \u53c2\u7167\u53ef } }; int main () { Rectangle r ; r . height_ = 10 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 r . width_ = 20 ; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059 Square s ; s . SetSize ( 10 ); return 0 ; } public \u306b\u3059\u308b\u3068\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u306e\u5236\u9650\u306f\u306a\u304f\u306a\u308a\u307e\u3059\u3002 public_member.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Rectangle { public : int Area () const { height_ * width_ ; // \u53c2\u7167\u53ef } public : int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; // \u53c2\u7167\u53ef width_ = size ; // \u53c2\u7167\u53ef } }; int main () { Rectangle r ; r . height_ = 10 ; // \u53c2\u7167\u53ef r . width_ = 20 ; // \u53c2\u7167\u53ef Square s ; s . SetSize ( 10 ); return 0 ; } \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u6b21\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u304c\u51fa\u73fe\u3059\u308b\u307e\u3067\u304c\u6709\u52b9\u7bc4\u56f2\u3068\u306a\u308a\u307e\u3059\u3002 \u307e\u305f\u3001\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u4f55\u5ea6\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 class AccessSpecifier { void Private1 (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u306f private public : void Public1 (); void Public2 (); public : // \u5bfe\u8c61\u3068\u306a\u308b\u30e1\u30f3\u30d0\u304c\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3057 private : void Private2 (); private : // \u30a2\u30af\u30bb\u30b9\u30ec\u30d9\u30eb\u306e\u5909\u5316\u304c\u306a\u304f\u3066\u3082\u554f\u984c\u306a\u3057 void Private3 (); }; \u8aad\u307f\u3065\u3089\u3044\u30b3\u30fc\u30c9\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3092\u9632\u3050\u305f\u3081\u3001 \u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u3067\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002","title":"\u30e1\u30f3\u30d0\u306b\u5bfe\u3059\u308b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50"},{"location":"ch07-03-inheritance/#_5","text":"\u6d3e\u751f\u30af\u30e9\u30b9\u3067\u306f\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306b\u3088\u3063\u3066 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u3092\u53c2\u7167\u3067\u304d\u308b\u7bc4\u56f2\u3092\u3055\u3089\u306b\u5236\u9650\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f private \u306b\u306a\u308a\u307e\u3059\u3002 class Base {}; class Sub1 : public Base {}; // public \u7d99\u627f class Sub2 : protected Base {}; // protected \u7d99\u627f class Sub3 : private Base {}; // private \u7d99\u627f class Sub4 : Base {}; // private \u7d99\u627f (\u30c7\u30d5\u30a9\u30eb\u30c8) \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u5b9f\u88c5\u3092\u884c\u3046\u5834\u5408\u306b\u306f public \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u8a73\u7d30\u306f \u6d3e\u751f\u30af\u30e9\u30b9 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u7d99\u627f\u306b\u5bfe\u3059\u308b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50"},{"location":"ch07-04-polymorphism/","text":"\u591a\u614b\u6027 \u00b6 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8 \u00b6 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u304b\u3089 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u578b\u5909\u63db\u3092\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u306b\u3088\u3063\u3066\u3001 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u307e\u305f\u306f\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 polymorphism_upcast.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> class Rectangle { public : int Area () const { return height_ * width_ ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } }; int main () { Square s ; s . SetSize ( 10 ); const Rectangle & r = s ; std :: cout << \"area = \" << r . Area () << std :: endl ; return 0 ; } \u3053\u306e\u4f8b\u3067\u306f Square \u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 s \u3092 Rectangle \u30af\u30e9\u30b9\u306e\u53c2\u7167 r \u3067\u6271\u3063\u3066\u3044\u307e\u3059\u3002 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u306f\u6697\u9ed9\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u660e\u793a\u7684\u306b\u578b\u5909\u63db\u3092\u884c\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u00b6 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u304b\u3089 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u578b\u5909\u63db\u3092\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u308f\u306a\u3044\u3067\u6e08\u3080\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4eee\u60f3\u95a2\u6570\u3068\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9 \u00b6 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u6319\u52d5\u3092\u5909\u66f4\u3067\u304d\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4eee\u60f3\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u4eee\u60f3\u95a2\u6570\u306b\u3059\u308b\u306b\u306f\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b virtual \u3092\u3064\u3051\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u4eee\u60f3\u95a2\u6570\u306e\u6319\u52d5\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3068\u3044\u3044\u307e\u3059\u3002 \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u306b\u306f\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b override \u3092\u3064\u3051\u307e\u3059\u3002 polymorphism_override.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> class Rectangle { public : virtual void Describe () const { std :: cout << \"height = \" << height_ << std :: endl ; std :: cout << \"width = \" << width_ << std :: endl ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } void Describe () const override { std :: cout << \"size = \" << height_ << std :: endl ; } }; int main () { Square s ; s . SetSize ( 10 ); const Rectangle & r = s ; r . Describe (); return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 size = 10 \u3053\u306e\u4f8b\u3067\u306f\u30e1\u30f3\u30d0\u95a2\u6570 Describe \u304c\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001 Rectangle \u30af\u30e9\u30b9\u3067\u306f\u306a\u304f Square \u30af\u30e9\u30b9\u306e Describe \u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3068\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 \u00b6 \u5b9a\u7fa9\u3092\u3082\u305f\u306a\u3044\u4eee\u60f3\u95a2\u6570\u3092\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u306b\u3059\u308b\u306b\u306f\u4eee\u60f3\u95a2\u6570\u306b = 0 \u3092\u3064\u3051\u307e\u3059\u3002 class Polygon { public : virtual int Area () const = 0 ; }; \u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u304c\u3042\u308b\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 C++ \u306b\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u3064\u304f\u308b\u305f\u3081\u306e\u5c02\u7528\u306e\u8a18\u6cd5\u306f\u306a\u3044\u305f\u3081\u3001 \u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3059\u3079\u3066\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3067\u3042\u308b\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002 class Polygon { public : virtual int Area () const = 0 ; }; class Rectangle : public Polygon { public : int Area () const override { return height_ * width_ ; } int height_ ; int width_ ; };","title":"7.4. \u591a\u614b\u6027"},{"location":"ch07-04-polymorphism/#_1","text":"","title":"\u591a\u614b\u6027"},{"location":"ch07-04-polymorphism/#_2","text":"\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u304b\u3089 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u578b\u5909\u63db\u3092\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u306b\u3088\u3063\u3066\u3001 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u307e\u305f\u306f\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 polymorphism_upcast.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> class Rectangle { public : int Area () const { return height_ * width_ ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } }; int main () { Square s ; s . SetSize ( 10 ); const Rectangle & r = s ; std :: cout << \"area = \" << r . Area () << std :: endl ; return 0 ; } \u3053\u306e\u4f8b\u3067\u306f Square \u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 s \u3092 Rectangle \u30af\u30e9\u30b9\u306e\u53c2\u7167 r \u3067\u6271\u3063\u3066\u3044\u307e\u3059\u3002 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u306f\u6697\u9ed9\u7684\u306b\u884c\u308f\u308c\u308b\u305f\u3081\u3001\u660e\u793a\u7684\u306b\u578b\u5909\u63db\u3092\u884c\u3046\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8"},{"location":"ch07-04-polymorphism/#_3","text":"\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u304b\u3089 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3084\u30dd\u30a4\u30f3\u30bf\u3078\u306e\u578b\u5909\u63db\u3092\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u308f\u306a\u3044\u3067\u6e08\u3080\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8"},{"location":"ch07-04-polymorphism/#_4","text":"\u6d3e\u751f\u30af\u30e9\u30b9\u3067\u6319\u52d5\u3092\u5909\u66f4\u3067\u304d\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4eee\u60f3\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u4eee\u60f3\u95a2\u6570\u306b\u3059\u308b\u306b\u306f\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b virtual \u3092\u3064\u3051\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u4eee\u60f3\u95a2\u6570\u306e\u6319\u52d5\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3068\u3044\u3044\u307e\u3059\u3002 \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u306b\u306f\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b override \u3092\u3064\u3051\u307e\u3059\u3002 polymorphism_override.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 #include <iostream> class Rectangle { public : virtual void Describe () const { std :: cout << \"height = \" << height_ << std :: endl ; std :: cout << \"width = \" << width_ << std :: endl ; } int height_ ; int width_ ; }; class Square : public Rectangle { public : void SetSize ( int size ) { height_ = size ; width_ = size ; } void Describe () const override { std :: cout << \"size = \" << height_ << std :: endl ; } }; int main () { Square s ; s . SetSize ( 10 ); const Rectangle & r = s ; r . Describe (); return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 size = 10 \u3053\u306e\u4f8b\u3067\u306f\u30e1\u30f3\u30d0\u95a2\u6570 Describe \u304c\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001 Rectangle \u30af\u30e9\u30b9\u3067\u306f\u306a\u304f Square \u30af\u30e9\u30b9\u306e Describe \u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002","title":"\u4eee\u60f3\u95a2\u6570\u3068\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9"},{"location":"ch07-04-polymorphism/#_5","text":"\u5b9a\u7fa9\u3092\u3082\u305f\u306a\u3044\u4eee\u60f3\u95a2\u6570\u3092\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3068\u3044\u3044\u307e\u3059\u3002 \u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u306b\u3059\u308b\u306b\u306f\u4eee\u60f3\u95a2\u6570\u306b = 0 \u3092\u3064\u3051\u307e\u3059\u3002 class Polygon { public : virtual int Area () const = 0 ; }; \u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u304c\u3042\u308b\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 C++ \u306b\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u3064\u304f\u308b\u305f\u3081\u306e\u5c02\u7528\u306e\u8a18\u6cd5\u306f\u306a\u3044\u305f\u3081\u3001 \u30e1\u30f3\u30d0\u95a2\u6570\u304c\u3059\u3079\u3066\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3067\u3042\u308b\u30af\u30e9\u30b9\u3092\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002 class Polygon { public : virtual int Area () const = 0 ; }; class Rectangle : public Polygon { public : int Area () const override { return height_ * width_ ; } int height_ ; int width_ ; };","title":"\u7d14\u7c8b\u4eee\u60f3\u95a2\u6570\u3068\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9"},{"location":"ch07-05-constructors/","text":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30af\u30e9\u30b9\u540d\u3068\u540c\u3058\u540d\u524d\u3067\u623b\u308a\u5024\u304c\u306a\u3044\u95a2\u6570\u304c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ); int Area () const ; private : const int height_ ; const int width_ ; }; \u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle r ( 10 , 20 ); \u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316 \u00b6 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30e1\u30f3\u30d0\u5909\u6570\u3092\u521d\u671f\u5316\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; \u521d\u671f\u5316\u306f\u5024\u306e\u5909\u66f4\u3067\u306f\u306a\u3044\u305f\u3081\u3001 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3055\u308c\u305f\u5024\u304b\u3089 const \u30e1\u30f3\u30d0\u5909\u6570\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9 \u00b6 \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ); int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; Rectangle :: Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {} \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u5024\u30921\u3064\u3082\u53d7\u3051\u53d6\u3089\u306a\u3044\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Rectangle { public : Rectangle () : height_ ( 0 ), width_ ( 0 ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle r ; \u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c1\u3064\u3082\u306a\u3044\u5834\u5408\u306e\u307f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6697\u9ed9\u7684\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u305d\u306e\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3060\u3051\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Copyable { public : Copyable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Copyable ( const Copyable & c ); // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf }; \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Copyable c1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Copyable c2 ( c1 ); // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 const \u3067\u306f\u306a\u3044\u53c2\u7167\u3067\u3042\u3063\u3066\u3082\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u304c\u3001 \u30b3\u30d4\u30fc\u5143\u3092\u5909\u66f4\u305b\u305a\u306b\u30b3\u30d4\u30fc\u3092\u884c\u3046\u305f\u3081\u306b const \u306e\u53c2\u7167\u306b\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u306f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u30b1\u30fc\u30b9 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u3001 \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u5834\u5408\u306b\u306f\u6697\u9ed9\u7684\u306a\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9a\u7fa9\u306f\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u6761\u4ef6\u306e\u4e00\u4f8b\u3068\u3057\u3066\u6b21\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044\u30e1\u30f3\u30d0\u5909\u6570\u3092\u3082\u3064 \u53f3\u8fba\u5024\u53c2\u7167\u578b\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092\u3082\u3064 \u4e0b\u8a18\u306e\u3044\u305a\u308c\u304b\u304c\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 \u8a73\u7d30\u306f \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u305d\u306e\u30af\u30e9\u30b9\u306e\u53f3\u8fba\u5024\u53c2\u7167\u3060\u3051\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Movable { public : Movable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Movable ( Movable && m ); // \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf }; \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Movable m1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Movable m2 ( std :: move ( m1 )); // \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u306f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306b\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u30b1\u30fc\u30b9 \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u3001 \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u5834\u5408\u306b\u306f\u6697\u9ed9\u7684\u306a\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9a\u7fa9\u306f\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u6761\u4ef6\u306e\u4e00\u4f8b\u3068\u3057\u3066\u6b21\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30e0\u30fc\u30d6\u3067\u304d\u306a\u3044\u30e1\u30f3\u30d0\u5909\u6570\u3092\u3082\u3064 \u4e0b\u8a18\u306e\u3044\u305a\u308c\u304b\u304c\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u8a73\u7d30\u306f \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068 explicit \u00b6 \u5024\u30921\u3064\u3060\u3051\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3082\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3059\u3002 class Square { public : Square ( int size ) : size_ ( size ) {} int Area () const { return size_ * size_ ; } private : int size_ ; }; \u53d7\u3051\u53d6\u308b\u5024\u304c2\u500b\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Square s ( 10 ); \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u305f\u5834\u5408\u3001 int \u304b\u3089 Square \u3078\u306e\u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3067\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 Square s = 10 ; \u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3067\u4f7f\u7528\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f \u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b explicit \u3092\u3064\u3051\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3092\u610f\u56f3\u3057\u3066\u4f7f\u7528\u3059\u308b\u5834\u5408\u3092\u9664\u304d\u3001 \u53d7\u3051\u53d6\u308b\u5024\u304c1\u3064\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f explicit \u3092\u3064\u3051\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092 explicit \u306b\u3059\u308b\u3068 \u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u5024\u6e21\u3057\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u4e00\u822c\u7684\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f explicit \u306b\u306f\u3057\u307e\u305b\u3093\u3002 class Square { public : explicit Square ( int size ) : size_ ( size ) {} int Area () const { return size_ * size_ ; } private : int size_ ; }; explicit \u3092\u3064\u3051\u308b\u3068\u4ee5\u4e0b\u306e\u8a18\u8ff0\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 Square s = 10 ; \u7d99\u627f \u00b6 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6697\u9ed9\u7684\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 constructor_inheritance.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> class Rectangle { public : Rectangle () : height_ ( 0 ), width_ ( 0 ) { std :: cout << \"Rectangle::Rectangle() is called.\" << std :: endl ; } int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; class Square : public Rectangle { public : Square () { std :: cout << \"Square::Square() is called.\" << std :: endl ; } }; int main () { Square s ; // Square \u30af\u30e9\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u7528 std :: cout << \"area = \" << s . Area () << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Rectangle::Rectangle() is called. Square::Square() is called. area = 0 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u884c\u9806\u5e8f\u306f\u3001\u5fc5\u305a\u6b21\u306e\u9806\u5e8f\u306b\u306a\u308a\u307e\u3059\u3002 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u660e\u793a\u7684\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; class Square : public Rectangle { public : Square ( int size ) : Rectangle ( size , size ) {} };","title":"7.5. \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-05-constructors/#_1","text":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30af\u30e9\u30b9\u540d\u3068\u540c\u3058\u540d\u524d\u3067\u623b\u308a\u5024\u304c\u306a\u3044\u95a2\u6570\u304c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ); int Area () const ; private : const int height_ ; const int width_ ; }; \u3053\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle r ( 10 , 20 );","title":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-05-constructors/#_2","text":"\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30e1\u30f3\u30d0\u5909\u6570\u3092\u521d\u671f\u5316\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; \u521d\u671f\u5316\u306f\u5024\u306e\u5909\u66f4\u3067\u306f\u306a\u3044\u305f\u3081\u3001 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3055\u308c\u305f\u5024\u304b\u3089 const \u30e1\u30f3\u30d0\u5909\u6570\u306e\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316"},{"location":"ch07-05-constructors/#_3","text":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ); int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; Rectangle :: Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {}","title":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9"},{"location":"ch07-05-constructors/#_4","text":"\u5024\u30921\u3064\u3082\u53d7\u3051\u53d6\u3089\u306a\u3044\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Rectangle { public : Rectangle () : height_ ( 0 ), width_ ( 0 ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle r ; \u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3059\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c1\u3064\u3082\u306a\u3044\u5834\u5408\u306e\u307f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6697\u9ed9\u7684\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002","title":"\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-05-constructors/#_5","text":"\u305d\u306e\u30af\u30e9\u30b9\u306e\u53c2\u7167\u3060\u3051\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Copyable { public : Copyable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Copyable ( const Copyable & c ); // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf }; \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Copyable c1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Copyable c2 ( c1 ); // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 const \u3067\u306f\u306a\u3044\u53c2\u7167\u3067\u3042\u3063\u3066\u3082\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u304c\u3001 \u30b3\u30d4\u30fc\u5143\u3092\u5909\u66f4\u305b\u305a\u306b\u30b3\u30d4\u30fc\u3092\u884c\u3046\u305f\u3081\u306b const \u306e\u53c2\u7167\u306b\u3059\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u306f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u30b1\u30fc\u30b9 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u3001 \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u5834\u5408\u306b\u306f\u6697\u9ed9\u7684\u306a\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9a\u7fa9\u306f\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u6761\u4ef6\u306e\u4e00\u4f8b\u3068\u3057\u3066\u6b21\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u3067\u304d\u306a\u3044\u30e1\u30f3\u30d0\u5909\u6570\u3092\u3082\u3064 \u53f3\u8fba\u5024\u53c2\u7167\u578b\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3092\u3082\u3064 \u4e0b\u8a18\u306e\u3044\u305a\u308c\u304b\u304c\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 \u8a73\u7d30\u306f \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-05-constructors/#_6","text":"\u305d\u306e\u30af\u30e9\u30b9\u306e\u53f3\u8fba\u5024\u53c2\u7167\u3060\u3051\u3092\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 class Movable { public : Movable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Movable ( Movable && m ); // \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf }; \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3063\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Movable m1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Movable m2 ( std :: move ( m1 )); // \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u306f\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306b\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u30b1\u30fc\u30b9 \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u3001 \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u5834\u5408\u306b\u306f\u6697\u9ed9\u7684\u306a\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9a\u7fa9\u306f\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u6761\u4ef6\u306e\u4e00\u4f8b\u3068\u3057\u3066\u6b21\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30e0\u30fc\u30d6\u3067\u304d\u306a\u3044\u30e1\u30f3\u30d0\u5909\u6570\u3092\u3082\u3064 \u4e0b\u8a18\u306e\u3044\u305a\u308c\u304b\u304c\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u8a73\u7d30\u306f \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-05-constructors/#explicit","text":"\u5024\u30921\u3064\u3060\u3051\u53d7\u3051\u53d6\u308b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3082\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3059\u3002 class Square { public : Square ( int size ) : size_ ( size ) {} int Area () const { return size_ * size_ ; } private : int size_ ; }; \u53d7\u3051\u53d6\u308b\u5024\u304c2\u500b\u306e\u5834\u5408\u3068\u540c\u69d8\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Square s ( 10 ); \u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u305f\u5834\u5408\u3001 int \u304b\u3089 Square \u3078\u306e\u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3067\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 Square s = 10 ; \u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3067\u4f7f\u7528\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306b\u306f \u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b explicit \u3092\u3064\u3051\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306a\u578b\u5909\u63db\u3092\u610f\u56f3\u3057\u3066\u4f7f\u7528\u3059\u308b\u5834\u5408\u3092\u9664\u304d\u3001 \u53d7\u3051\u53d6\u308b\u5024\u304c1\u3064\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f explicit \u3092\u3064\u3051\u308b\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092 explicit \u306b\u3059\u308b\u3068 \u95a2\u6570\u306e\u623b\u308a\u5024\u3067\u5024\u6e21\u3057\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u4e00\u822c\u7684\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f explicit \u306b\u306f\u3057\u307e\u305b\u3093\u3002 class Square { public : explicit Square ( int size ) : size_ ( size ) {} int Area () const { return size_ * size_ ; } private : int size_ ; }; explicit \u3092\u3064\u3051\u308b\u3068\u4ee5\u4e0b\u306e\u8a18\u8ff0\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 Square s = 10 ;","title":"\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068 explicit"},{"location":"ch07-05-constructors/#_7","text":"\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6697\u9ed9\u7684\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 constructor_inheritance.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> class Rectangle { public : Rectangle () : height_ ( 0 ), width_ ( 0 ) { std :: cout << \"Rectangle::Rectangle() is called.\" << std :: endl ; } int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; class Square : public Rectangle { public : Square () { std :: cout << \"Square::Square() is called.\" << std :: endl ; } }; int main () { Square s ; // Square \u30af\u30e9\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u7528 std :: cout << \"area = \" << s . Area () << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Rectangle::Rectangle() is called. Square::Square() is called. area = 0 \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u884c\u9806\u5e8f\u306f\u3001\u5fc5\u305a\u6b21\u306e\u9806\u5e8f\u306b\u306a\u308a\u307e\u3059\u3002 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u660e\u793a\u7684\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 class Rectangle { public : Rectangle ( int height , int width ) : height_ ( height ), width_ ( width ) {} int Area () const { return height_ * width_ ; } private : const int height_ ; const int width_ ; }; class Square : public Rectangle { public : Square ( int size ) : Rectangle ( size , size ) {} };","title":"\u7d99\u627f"},{"location":"ch07-06-destructors/","text":"\u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7834\u68c4\u3059\u308b\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u89e3\u653e\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 RAII (Resource Acquisition Is Initialization) C++ \u3067\u306f \u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3 \u306e\u4ee3\u308f\u308a\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u3063\u3066\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\u3092\u884c\u3044\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u308b\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u660e\u793a\u7684\u3067\u3042\u308b\u305f\u3081\u3001 C++ \u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 RAII \u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u305a\u306b RAII \u3092\u5b9f\u73fe\u3067\u304d\u308b\u8a00\u8a9e\u3082\u3042\u308a\u307e\u3059\u304c\u3001 \u4e00\u822c\u306b\u4f55\u3089\u304b\u306e\u660e\u793a\u7684\u306a\u51e6\u7406\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002 \u305f\u3068\u3048\u3070 Python \u3067\u306f\u660e\u793a\u7684\u306b with \u6587\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 ~ \u306b\u30af\u30e9\u30b9\u540d\u3092\u3064\u3051\u305f\u540d\u524d\u3067\u623b\u308a\u5024\u304c\u306a\u3044\u95a2\u6570\u304c\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5f15\u6570\u3092\u3082\u3061\u307e\u305b\u3093\u3002 #include <iostream> class DynamicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { DynamicArray d ( 5 , 1 ); std :: cout << d . Get ( 2 ) << std :: endl ; d . Set ( 2 , 10 ); std :: cout << d . Get ( 2 ) << std :: endl ; return 0 ; } \u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3057\u306a\u3044\u5834\u5408\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6697\u9ed9\u7684\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9 \u00b6 \u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class DynamicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray (); void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; DynamicArray ::~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } \u7d99\u627f \u00b6 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6697\u9ed9\u7684\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 destructor_inheritance.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <iostream> class BasicArray { public : ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { DynamicArray d ( 5 , 1 ); std :: cout << d . Get ( 2 ) << std :: endl ; d . Set ( 2 , 10 ); std :: cout << d . Get ( 2 ) << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 DynamicArray::~DynamicArray() is called. BasicArray::~BasicArray() is called. \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u884c\u9806\u5e8f\u306f\u3001\u5fc5\u305a\u6b21\u306e\u9806\u5e8f\u306b\u306a\u308a\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u4eee\u60f3\u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u00b6 \u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3046\u5834\u5408\u3001 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3060\u3051\u304c\u547c\u3073\u51fa\u3055\u308c\u3066 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u547c\u3073\u51fa\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 destructor_non_virtual.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <iostream> #include <memory> class BasicArray { public : ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { std :: unique_ptr < BasicArray > b ( new DynamicArray ( 5 , 1 )); std :: cout << b -> Get ( 2 ) << std :: endl ; b -> Set ( 2 , 10 ); std :: cout << b -> Get ( 2 ) << std :: endl ; return 0 ; } \u3053\u306e\u4f8b\u3067\u306f \u6d3e\u751f\u30af\u30e9\u30b9 DynamicArray \u3092\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066 \u57fa\u5e95\u30af\u30e9\u30b9 BasicArray \u306e\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3063\u3066\u3044\u307e\u3059\u3002 \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 BasicArray::~BasicArray() is called. DynamicArray \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u3066\u304a\u3089\u305a\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u554f\u984c\u3092\u9632\u3050\u305f\u3081\u306b\u3001 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4eee\u60f3\u95a2\u6570\u306b\u3057\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u306f\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u305f\u3081 override \u3092\u3064\u3051\u307e\u3059\u3002 destructor_virtual.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <iostream> #include <memory> class BasicArray { public : virtual ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () override { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { std :: unique_ptr < BasicArray > b ( new DynamicArray ( 5 , 1 )); std :: cout << b -> Get ( 2 ) << std :: endl ; b -> Set ( 2 , 10 ); std :: cout << b -> Get ( 2 ) << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 DynamicArray::~DynamicArray() is called. BasicArray::~BasicArray() is called. STL\u30b3\u30f3\u30c6\u30ca\u30af\u30e9\u30b9\u306e\u7d99\u627f STL\u30b3\u30f3\u30c6\u30ca\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4eee\u60f3\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081STL\u30b3\u30f3\u30c6\u30ca\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092 STL\u30b3\u30f3\u30c6\u30ca\u306b\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u4f7f\u7528\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002","title":"7.6. \u30c7\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-06-destructors/#_1","text":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u7834\u68c4\u3059\u308b\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u3044\u3044\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u89e3\u653e\u3092\u884c\u3046\u305f\u3081\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002 RAII (Resource Acquisition Is Initialization) C++ \u3067\u306f \u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30b7\u30e7\u30f3 \u306e\u4ee3\u308f\u308a\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u3063\u3066\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\u3092\u884c\u3044\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u308b\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u660e\u793a\u7684\u3067\u3042\u308b\u305f\u3081\u3001 C++ \u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 RAII \u304c\u9069\u7528\u3055\u308c\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u305a\u306b RAII \u3092\u5b9f\u73fe\u3067\u304d\u308b\u8a00\u8a9e\u3082\u3042\u308a\u307e\u3059\u304c\u3001 \u4e00\u822c\u306b\u4f55\u3089\u304b\u306e\u660e\u793a\u7684\u306a\u51e6\u7406\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002 \u305f\u3068\u3048\u3070 Python \u3067\u306f\u660e\u793a\u7684\u306b with \u6587\u3092\u4f7f\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 ~ \u306b\u30af\u30e9\u30b9\u540d\u3092\u3064\u3051\u305f\u540d\u524d\u3067\u623b\u308a\u5024\u304c\u306a\u3044\u95a2\u6570\u304c\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306a\u308a\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5f15\u6570\u3092\u3082\u3061\u307e\u305b\u3093\u3002 #include <iostream> class DynamicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { DynamicArray d ( 5 , 1 ); std :: cout << d . Get ( 2 ) << std :: endl ; d . Set ( 2 , 10 ); std :: cout << d . Get ( 2 ) << std :: endl ; return 0 ; } \u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3057\u306a\u3044\u5834\u5408\u3001 \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u6697\u9ed9\u7684\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002","title":"\u30c7\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-06-destructors/#_2","text":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class DynamicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray (); void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; DynamicArray ::~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; }","title":"\u30af\u30e9\u30b9\u5ba3\u8a00\u3068\u306f\u5225\u306b\u5b9a\u7fa9"},{"location":"ch07-06-destructors/#_3","text":"\u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6697\u9ed9\u7684\u306b\u547c\u3073\u51fa\u3057\u307e\u3059\u3002 destructor_inheritance.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <iostream> class BasicArray { public : ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { DynamicArray d ( 5 , 1 ); std :: cout << d . Get ( 2 ) << std :: endl ; d . Set ( 2 , 10 ); std :: cout << d . Get ( 2 ) << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 DynamicArray::~DynamicArray() is called. BasicArray::~BasicArray() is called. \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u884c\u9806\u5e8f\u306f\u3001\u5fc5\u305a\u6b21\u306e\u9806\u5e8f\u306b\u306a\u308a\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf","title":"\u7d99\u627f"},{"location":"ch07-06-destructors/#_4","text":"\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3046\u5834\u5408\u3001 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3060\u3051\u304c\u547c\u3073\u51fa\u3055\u308c\u3066 \u6d3e\u751f\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u547c\u3073\u51fa\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 destructor_non_virtual.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <iostream> #include <memory> class BasicArray { public : ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { std :: unique_ptr < BasicArray > b ( new DynamicArray ( 5 , 1 )); std :: cout << b -> Get ( 2 ) << std :: endl ; b -> Set ( 2 , 10 ); std :: cout << b -> Get ( 2 ) << std :: endl ; return 0 ; } \u3053\u306e\u4f8b\u3067\u306f \u6d3e\u751f\u30af\u30e9\u30b9 DynamicArray \u3092\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066 \u57fa\u5e95\u30af\u30e9\u30b9 BasicArray \u306e\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3067\u6271\u3063\u3066\u3044\u307e\u3059\u3002 \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 BasicArray::~BasicArray() is called. DynamicArray \u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u3066\u304a\u3089\u305a\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u554f\u984c\u3092\u9632\u3050\u305f\u3081\u306b\u3001 \u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4eee\u60f3\u95a2\u6570\u306b\u3057\u307e\u3059\u3002 \u6d3e\u751f\u30af\u30e9\u30b9\u3067\u306f\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u305f\u3081 override \u3092\u3064\u3051\u307e\u3059\u3002 destructor_virtual.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 #include <iostream> #include <memory> class BasicArray { public : virtual ~ BasicArray () { std :: cout << \"BasicArray::~BasicArray() is called.\" << std :: endl ; } virtual void Set ( int index , int value ) = 0 ; virtual int Get ( int index ) const = 0 ; }; class DynamicArray : public BasicArray { public : DynamicArray ( int size , int initial_value ) { data_ = new int [ size ]; for ( auto i = 0 ; i < size ; ++ i ) { data_ [ i ] = initial_value ; } } ~ DynamicArray () override { std :: cout << \"DynamicArray::~DynamicArray() is called.\" << std :: endl ; delete [] data_ ; } void Set ( int index , int value ) { data_ [ index ] = value ; } int Get ( int index ) const { return data_ [ index ]; } private : int * data_ ; }; int main () { std :: unique_ptr < BasicArray > b ( new DynamicArray ( 5 , 1 )); std :: cout << b -> Get ( 2 ) << std :: endl ; b -> Set ( 2 , 10 ); std :: cout << b -> Get ( 2 ) << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 1 10 DynamicArray::~DynamicArray() is called. BasicArray::~BasicArray() is called. STL\u30b3\u30f3\u30c6\u30ca\u30af\u30e9\u30b9\u306e\u7d99\u627f STL\u30b3\u30f3\u30c6\u30ca\u30af\u30e9\u30b9\u306e\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u4eee\u60f3\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081STL\u30b3\u30f3\u30c6\u30ca\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092 STL\u30b3\u30f3\u30c6\u30ca\u306b\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u4f7f\u7528\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002","title":"\u4eee\u60f3\u30c7\u30b9\u30c8\u30e9\u30af\u30bf"},{"location":"ch07-07-operator-overloading/","text":"\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 \u00b6 \u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u6f14\u7b97\u5b50\u304c\u4f7f\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002 \u6f14\u7b97\u5b50\u306f\u95a2\u6570\u307e\u305f\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u5358\u9805\u6f14\u7b97\u5b50 \u00b6 \u6574\u6570\u3092\u6271\u3046 Integer \u30af\u30e9\u30b9\u306e\u8ca0\u53f7\u6f14\u7b97\u5b50\u3092\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } private : int value_ ; }; // \u8ca0\u53f7\u6f14\u7b97\u5b50\u306e\u5bfe\u8c61\u304c\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u308b Integer operator - ( const Integer & v ) { Integer tmp ( - v . Value ()); return tmp ; } \u3053\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Integer a ( 2 ); Integer b = - a ; std :: cout << a . Value () << std :: endl ; // 2 std :: cout << b . Value () << std :: endl ; // -2 \u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } // \u8ca0\u53f7\u6f14\u7b97\u5b50\u306e\u5bfe\u8c61\u306e\u30e1\u30f3\u30d0\u95a2\u6570 Integer operator - () const { Integer tmp ( - Value ()); // \u6f14\u7b97\u5bfe\u8c61\u306f\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u7528\u3059\u308b return tmp ; } private : int value_ ; }; \u4e8c\u9805\u6f14\u7b97\u5b50 \u00b6 \u6574\u6570\u3092\u6271\u3046 Integer \u30af\u30e9\u30b9\u306e\u52a0\u7b97\u6f14\u7b97\u5b50\u3092\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } private : int value_ ; }; // \u52a0\u7b97\u6f14\u7b97\u5b50\u306e\u5de6\u8fba\u304c\u7b2c1\u5f15\u6570\u3001\u53f3\u8fba\u304c\u7b2c2\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u308b Integer operator + ( const Integer & lhs , const Integer & rhs ) { Integer tmp ( lhs . Value () + rhs . Value ()); return tmp ; } \u3053\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Integer a ( 2 ); Integer b ( 3 ); Integer c = a + b ; std :: cout << a . Value () << std :: endl ; // 2 std :: cout << b . Value () << std :: endl ; // 3 std :: cout << c . Value () << std :: endl ; // 5 \u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } // \u52a0\u7b97\u6f14\u7b97\u5b50\u306e\u5de6\u8fba\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b\u5bfe\u3057\u3066\u3001\u53f3\u8fba\u304c\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u308b Integer operator + ( const Integer & rhs ) const { Integer tmp ( Value () + rhs . Value ()); // \u5de6\u8fba\u306f\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u7528\u3059\u308b return tmp ; } private : int value_ ; }; \u4e00\u822c\u306b\u4e8c\u9805\u6f14\u7b97\u5b50\u306f\u5bfe\u79f0\u6027\u3092\u7dad\u6301\u3059\u308b\u305f\u3081\u306b\u95a2\u6570\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u6574\u6570\u30af\u30e9\u30b9\u3068\u5b9f\u6570\u30af\u30e9\u30b9\u306e\u4e8c\u9805\u6f14\u7b97\u5b50\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } private : int value_ ; }; class RealNumber { public : explicit RealNumber ( double value ) : value_ ( value ) {} double Value () const { return value_ ; } private : double value_ ; }; RealNumber operator + ( const Integer & lhs , const RealNumber & rhs ) { RealNumber tmp ( lhs . Value () + rhs . Value ()); return tmp ; } RealNumber operator + ( const RealNumber & lhs , const Integer & rhs ) { RealNumber tmp ( lhs . Value () + rhs . Value ()); return tmp ; } \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8 \u00b6 \u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306b\u306f\u524d\u7f6e\u3068\u5f8c\u7f6e\u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002 \u524d\u7f6e\u306f\u5358\u884c\u6f14\u7b97\u5b50\u306e\u65b9\u6cd5\u3067\u5b9a\u7fa9\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } Integer & operator ++ () { ++ value_ ; return * this ; } private : int value_ ; }; \u6b21\u306e\u3088\u3046\u306b\u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Integer a ( 2 ); Integer b = ++ a ; std :: cout << a . Value () << std :: endl ; // 3 std :: cout << b . Value () << std :: endl ; // 3 \u5f8c\u7f6e\u306f\u4e8c\u9805\u6f14\u7b97\u5b50\u306e\u65b9\u6cd5\u3067\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u3053\u308c\u306f\u524d\u7f6e\u3068\u5f8c\u7f6e\u3092\u533a\u5225\u3059\u308b\u305f\u3081\u306b\u5f8c\u7f6e\u3067\u306f int (\u901a\u5e38\u306f\u5024 0 ) \u304c\u6e21\u3055\u308c\u308b\u6c7a\u307e\u308a\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } Integer operator ++ ( int ) { // \u5f15\u6570\u306e int \u306f\u4f7f\u7528\u3057\u306a\u3044 Integer tmp ( Value ()); ++ value_ ; return tmp ; } private : int value_ ; }; \u6b21\u306e\u3088\u3046\u306b\u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Integer a ( 2 ); Integer b = a ++ ; std :: cout << a . Value () << std :: endl ; // 3 std :: cout << b . Value () << std :: endl ; // 2 \u671f\u5f85\u3055\u308c\u308b\u632f\u308b\u821e\u3044 \u00b6 \u6f14\u7b97\u5b50\u306e\u632f\u308b\u821e\u3044\u306b\u3064\u3044\u3066\u306f\u5236\u7d04\u304c\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\u304c\u3001 \u4e00\u822c\u306b\u7d44\u307f\u8fbc\u307f\u306e\u6f14\u7b97\u5b50\u3068\u540c\u69d8\u306e\u632f\u308b\u821e\u3044\u306b\u306a\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u671f\u5f85\u3059\u308b\u52d5\u4f5c\u3068\u7570\u306a\u308b\u5b9f\u88c5\u306b\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u306f\u3042\u308a\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } Integer & operator - () { return * this ; // \u4f55\u3082\u3057\u306a\u3044\u3067\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u5374 } private : int value_ ; }; \u3053\u306e\u5b9a\u7fa9\u306b\u5bfe\u3057\u3066\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Integer a ( 2 ); Integer b = - a ; std :: cout << a . Value () << std :: endl ; // 2 std :: cout << b . Value () << std :: endl ; // 2 (-2 \u3067\u306f\u306a\u3044) \u3053\u306e\u3088\u3046\u306b\u671f\u5f85\u3055\u308c\u308b\u632f\u308b\u821e\u3044\u3068\u7570\u306a\u308b\u632f\u308b\u821e\u3044\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3001 \u7d44\u307f\u8fbc\u307f\u306e\u6f14\u7b97\u5b50\u3068\u306a\u308b\u3079\u304f\u540c\u3058\u632f\u308b\u821e\u3044\u306b\u306a\u308b\u3088\u3046\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u3002 \u671f\u5f85\u3055\u308c\u308b\u632f\u308b\u821e\u3044\u306b\u3064\u3044\u3066\u306f \u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"7.7. \u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9"},{"location":"ch07-07-operator-overloading/#_1","text":"\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u6f14\u7b97\u5b50\u304c\u4f7f\u7528\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002 \u6f14\u7b97\u5b50\u306f\u95a2\u6570\u307e\u305f\u306f\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002","title":"\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9"},{"location":"ch07-07-operator-overloading/#_2","text":"\u6574\u6570\u3092\u6271\u3046 Integer \u30af\u30e9\u30b9\u306e\u8ca0\u53f7\u6f14\u7b97\u5b50\u3092\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } private : int value_ ; }; // \u8ca0\u53f7\u6f14\u7b97\u5b50\u306e\u5bfe\u8c61\u304c\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u308b Integer operator - ( const Integer & v ) { Integer tmp ( - v . Value ()); return tmp ; } \u3053\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Integer a ( 2 ); Integer b = - a ; std :: cout << a . Value () << std :: endl ; // 2 std :: cout << b . Value () << std :: endl ; // -2 \u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } // \u8ca0\u53f7\u6f14\u7b97\u5b50\u306e\u5bfe\u8c61\u306e\u30e1\u30f3\u30d0\u95a2\u6570 Integer operator - () const { Integer tmp ( - Value ()); // \u6f14\u7b97\u5bfe\u8c61\u306f\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u7528\u3059\u308b return tmp ; } private : int value_ ; };","title":"\u5358\u9805\u6f14\u7b97\u5b50"},{"location":"ch07-07-operator-overloading/#_3","text":"\u6574\u6570\u3092\u6271\u3046 Integer \u30af\u30e9\u30b9\u306e\u52a0\u7b97\u6f14\u7b97\u5b50\u3092\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } private : int value_ ; }; // \u52a0\u7b97\u6f14\u7b97\u5b50\u306e\u5de6\u8fba\u304c\u7b2c1\u5f15\u6570\u3001\u53f3\u8fba\u304c\u7b2c2\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u308b Integer operator + ( const Integer & lhs , const Integer & rhs ) { Integer tmp ( lhs . Value () + rhs . Value ()); return tmp ; } \u3053\u306e\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Integer a ( 2 ); Integer b ( 3 ); Integer c = a + b ; std :: cout << a . Value () << std :: endl ; // 2 std :: cout << b . Value () << std :: endl ; // 3 std :: cout << c . Value () << std :: endl ; // 5 \u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } // \u52a0\u7b97\u6f14\u7b97\u5b50\u306e\u5de6\u8fba\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b\u5bfe\u3057\u3066\u3001\u53f3\u8fba\u304c\u5f15\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u308b Integer operator + ( const Integer & rhs ) const { Integer tmp ( Value () + rhs . Value ()); // \u5de6\u8fba\u306f\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u7528\u3059\u308b return tmp ; } private : int value_ ; }; \u4e00\u822c\u306b\u4e8c\u9805\u6f14\u7b97\u5b50\u306f\u5bfe\u79f0\u6027\u3092\u7dad\u6301\u3059\u308b\u305f\u3081\u306b\u95a2\u6570\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u6574\u6570\u30af\u30e9\u30b9\u3068\u5b9f\u6570\u30af\u30e9\u30b9\u306e\u4e8c\u9805\u6f14\u7b97\u5b50\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } private : int value_ ; }; class RealNumber { public : explicit RealNumber ( double value ) : value_ ( value ) {} double Value () const { return value_ ; } private : double value_ ; }; RealNumber operator + ( const Integer & lhs , const RealNumber & rhs ) { RealNumber tmp ( lhs . Value () + rhs . Value ()); return tmp ; } RealNumber operator + ( const RealNumber & lhs , const Integer & rhs ) { RealNumber tmp ( lhs . Value () + rhs . Value ()); return tmp ; }","title":"\u4e8c\u9805\u6f14\u7b97\u5b50"},{"location":"ch07-07-operator-overloading/#_4","text":"\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u306b\u306f\u524d\u7f6e\u3068\u5f8c\u7f6e\u306e2\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002 \u524d\u7f6e\u306f\u5358\u884c\u6f14\u7b97\u5b50\u306e\u65b9\u6cd5\u3067\u5b9a\u7fa9\u3057\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } Integer & operator ++ () { ++ value_ ; return * this ; } private : int value_ ; }; \u6b21\u306e\u3088\u3046\u306b\u524d\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Integer a ( 2 ); Integer b = ++ a ; std :: cout << a . Value () << std :: endl ; // 3 std :: cout << b . Value () << std :: endl ; // 3 \u5f8c\u7f6e\u306f\u4e8c\u9805\u6f14\u7b97\u5b50\u306e\u65b9\u6cd5\u3067\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u3053\u308c\u306f\u524d\u7f6e\u3068\u5f8c\u7f6e\u3092\u533a\u5225\u3059\u308b\u305f\u3081\u306b\u5f8c\u7f6e\u3067\u306f int (\u901a\u5e38\u306f\u5024 0 ) \u304c\u6e21\u3055\u308c\u308b\u6c7a\u307e\u308a\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } Integer operator ++ ( int ) { // \u5f15\u6570\u306e int \u306f\u4f7f\u7528\u3057\u306a\u3044 Integer tmp ( Value ()); ++ value_ ; return tmp ; } private : int value_ ; }; \u6b21\u306e\u3088\u3046\u306b\u5f8c\u7f6e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Integer a ( 2 ); Integer b = a ++ ; std :: cout << a . Value () << std :: endl ; // 3 std :: cout << b . Value () << std :: endl ; // 2","title":"\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8/\u30c7\u30af\u30ea\u30e1\u30f3\u30c8"},{"location":"ch07-07-operator-overloading/#_5","text":"\u6f14\u7b97\u5b50\u306e\u632f\u308b\u821e\u3044\u306b\u3064\u3044\u3066\u306f\u5236\u7d04\u304c\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\u304c\u3001 \u4e00\u822c\u306b\u7d44\u307f\u8fbc\u307f\u306e\u6f14\u7b97\u5b50\u3068\u540c\u69d8\u306e\u632f\u308b\u821e\u3044\u306b\u306a\u308b\u3053\u3068\u304c\u671f\u5f85\u3055\u308c\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u671f\u5f85\u3059\u308b\u52d5\u4f5c\u3068\u7570\u306a\u308b\u5b9f\u88c5\u306b\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u306f\u3042\u308a\u307e\u3059\u3002 class Integer { public : explicit Integer ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } Integer & operator - () { return * this ; // \u4f55\u3082\u3057\u306a\u3044\u3067\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u5374 } private : int value_ ; }; \u3053\u306e\u5b9a\u7fa9\u306b\u5bfe\u3057\u3066\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 Integer a ( 2 ); Integer b = - a ; std :: cout << a . Value () << std :: endl ; // 2 std :: cout << b . Value () << std :: endl ; // 2 (-2 \u3067\u306f\u306a\u3044) \u3053\u306e\u3088\u3046\u306b\u671f\u5f85\u3055\u308c\u308b\u632f\u308b\u821e\u3044\u3068\u7570\u306a\u308b\u632f\u308b\u821e\u3044\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3001 \u7d44\u307f\u8fbc\u307f\u306e\u6f14\u7b97\u5b50\u3068\u306a\u308b\u3079\u304f\u540c\u3058\u632f\u308b\u821e\u3044\u306b\u306a\u308b\u3088\u3046\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u3002 \u671f\u5f85\u3055\u308c\u308b\u632f\u308b\u821e\u3044\u306b\u3064\u3044\u3066\u306f \u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u671f\u5f85\u3055\u308c\u308b\u632f\u308b\u821e\u3044"},{"location":"ch07-08-assignment-operator/","text":"\u4ee3\u5165\u6f14\u7b97\u5b50 \u00b6 \u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u5bfe\u8c61\u3057\u3066\u4ee3\u5165\u6f14\u7b97\u5b50\u3082\u3042\u308a\u307e\u3059\u3002 \u4ee3\u5165\u6f14\u7b97\u5b50\u306b\u306f\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u306e2\u3064\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 \u00b6 \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u901a\u5e38\u4ee5\u4e0b\u3092\u6e80\u305f\u3059\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u5f15\u6570\u306f\u30b3\u30d4\u30fc\u5143\u3068\u306a\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e const \u5de6\u8fba\u5024\u53c2\u7167 \u623b\u308a\u5024\u306f\u30b3\u30d4\u30fc\u5148\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8) \u306e\u5de6\u8fba\u5024\u53c2\u7167 class Copyable { public : Copyable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Copyable & operator = ( const Copyable & c ); // \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 }; \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Copyable c1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Copyable c2 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 c2 = c1 ; // \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3067\u30b3\u30d4\u30fc\u4ee3\u5165 \u4e00\u822c\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u30bb\u30c3\u30c8\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002 class Copyable { public : Copyable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Copyable ( const Copyable & c ); // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Copyable & operator = ( const Copyable & c ); // \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 }; \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u306f \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306b\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u30b1\u30fc\u30b9 \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u3001 \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u5834\u5408\u306b\u306f\u6697\u9ed9\u7684\u306a\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u306e\u5b9a\u7fa9\u306f\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u6761\u4ef6\u306e\u4e00\u4f8b\u3068\u3057\u3066\u6b21\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u30e1\u30f3\u30d0\u5909\u6570\u3092\u3082\u3064 \u4e0b\u8a18\u306e\u3044\u305a\u308c\u304b\u304c\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 \u8a73\u7d30\u306f \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 \u00b6 \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u901a\u5e38\u4ee5\u4e0b\u3092\u6e80\u305f\u3059\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u5f15\u6570\u306f\u30e0\u30fc\u30d6\u5143\u3068\u306a\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u53f3\u8fba\u5024\u53c2\u7167 \u623b\u308a\u5024\u306f\u30e0\u30fc\u30d6\u5148\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8) \u306e\u5de6\u8fba\u5024\u53c2\u7167 class Movable { public : Movable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Movable & operator = ( Movable && m ); // \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 }; \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Movable m1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Movable m2 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 m2 = std :: move ( m1 ); // \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3067\u30e0\u30fc\u30d6\u4ee3\u5165 \u4e00\u822c\u306b\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u30bb\u30c3\u30c8\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002 class Movable { public : Movable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Movable ( Movable && m ); // \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Movable & operator = ( Movable && m ); // \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 }; \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u306f \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306b\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u30b1\u30fc\u30b9 \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u3001 \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u5834\u5408\u306b\u306f\u6697\u9ed9\u7684\u306a\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u306e\u5b9a\u7fa9\u306f\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u6761\u4ef6\u306e\u4e00\u4f8b\u3068\u3057\u3066\u6b21\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u30e1\u30f3\u30d0\u5909\u6570\u3092\u3082\u3064 \u4e0b\u8a18\u306e\u3044\u305a\u308c\u304b\u304c\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u8a73\u7d30\u306f \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u521d\u671f\u5316 \u00b6 C++ \u3067\u306f\u4ee3\u5165\u3068\u521d\u671f\u5316\u304c\u533a\u5225\u3055\u308c\u307e\u3059\u3002 \u5909\u6570\u5ba3\u8a00\u3068\u540c\u6642\u306b\u4f7f\u7528\u3059\u308b = \u306f\u4ee3\u5165\u3067\u306f\u306a\u304f\u521d\u671f\u5316\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u521d\u671f\u5316 \u00b6 \u521d\u671f\u5316\u3092\u30b3\u30d4\u30fc\u306b\u3088\u3063\u3066\u884c\u3046\u5834\u5408\u3001 \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3067\u306f\u306a\u304f\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 Copyable c1 ; Copyable c2 = c1 ; // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u7528 Copyable c3 ; c3 = c2 ; // \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u4f7f\u7528 \u30e0\u30fc\u30d6\u521d\u671f\u5316 \u00b6 \u521d\u671f\u5316\u3092\u30e0\u30fc\u30d6\u306b\u3088\u3063\u3066\u884c\u3046\u5834\u5408\u3001 \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3067\u306f\u306a\u304f\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 Movable m1 ; Movable m2 = std :: move ( m1 ); // \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u7528 Movable m3 ; m3 = std :: move ( m2 ); // \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u4f7f\u7528","title":"7.8. \u4ee3\u5165\u6f14\u7b97\u5b50"},{"location":"ch07-08-assignment-operator/#_1","text":"\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u5bfe\u8c61\u3057\u3066\u4ee3\u5165\u6f14\u7b97\u5b50\u3082\u3042\u308a\u307e\u3059\u3002 \u4ee3\u5165\u6f14\u7b97\u5b50\u306b\u306f\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3068\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u306e2\u3064\u304c\u3042\u308a\u307e\u3059\u3002","title":"\u4ee3\u5165\u6f14\u7b97\u5b50"},{"location":"ch07-08-assignment-operator/#_2","text":"\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u901a\u5e38\u4ee5\u4e0b\u3092\u6e80\u305f\u3059\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u5f15\u6570\u306f\u30b3\u30d4\u30fc\u5143\u3068\u306a\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e const \u5de6\u8fba\u5024\u53c2\u7167 \u623b\u308a\u5024\u306f\u30b3\u30d4\u30fc\u5148\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8) \u306e\u5de6\u8fba\u5024\u53c2\u7167 class Copyable { public : Copyable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Copyable & operator = ( const Copyable & c ); // \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 }; \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Copyable c1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Copyable c2 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 c2 = c1 ; // \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3067\u30b3\u30d4\u30fc\u4ee3\u5165 \u4e00\u822c\u306b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u30bb\u30c3\u30c8\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002 class Copyable { public : Copyable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Copyable ( const Copyable & c ); // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Copyable & operator = ( const Copyable & c ); // \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 }; \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u306f \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306b\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u30b1\u30fc\u30b9 \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u3001 \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u5834\u5408\u306b\u306f\u6697\u9ed9\u7684\u306a\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u306e\u5b9a\u7fa9\u306f\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u6761\u4ef6\u306e\u4e00\u4f8b\u3068\u3057\u3066\u6b21\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u30e1\u30f3\u30d0\u5909\u6570\u3092\u3082\u3064 \u4e0b\u8a18\u306e\u3044\u305a\u308c\u304b\u304c\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 \u8a73\u7d30\u306f \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50"},{"location":"ch07-08-assignment-operator/#_3","text":"\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u901a\u5e38\u4ee5\u4e0b\u3092\u6e80\u305f\u3059\u30e1\u30f3\u30d0\u95a2\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002 \u5f15\u6570\u306f\u30e0\u30fc\u30d6\u5143\u3068\u306a\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u53f3\u8fba\u5024\u53c2\u7167 \u623b\u308a\u5024\u306f\u30e0\u30fc\u30d6\u5148\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 (\u81ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8) \u306e\u5de6\u8fba\u5024\u53c2\u7167 class Movable { public : Movable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Movable & operator = ( Movable && m ); // \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 }; \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Movable m1 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 Movable m2 ; // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u4f5c\u6210 m2 = std :: move ( m1 ); // \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3067\u30e0\u30fc\u30d6\u4ee3\u5165 \u4e00\u822c\u306b\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u306f\u30bb\u30c3\u30c8\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002 class Movable { public : Movable (); // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Movable ( Movable && m ); // \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf Movable & operator = ( Movable && m ); // \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 }; \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u306f \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002 \u6697\u9ed9\u7684\u306b\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u30b1\u30fc\u30b9 \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3067\u3042\u3063\u3066\u3082\u3001 \u7279\u5b9a\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u5834\u5408\u306b\u306f\u6697\u9ed9\u7684\u306a\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u306e\u5b9a\u7fa9\u306f\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 \u6761\u4ef6\u306e\u4e00\u4f8b\u3068\u3057\u3066\u6b21\u306e\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u30e1\u30f3\u30d0\u5909\u6570\u3092\u3082\u3064 \u4e0b\u8a18\u306e\u3044\u305a\u308c\u304b\u304c\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u8a73\u7d30\u306f \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50"},{"location":"ch07-08-assignment-operator/#_4","text":"C++ \u3067\u306f\u4ee3\u5165\u3068\u521d\u671f\u5316\u304c\u533a\u5225\u3055\u308c\u307e\u3059\u3002 \u5909\u6570\u5ba3\u8a00\u3068\u540c\u6642\u306b\u4f7f\u7528\u3059\u308b = \u306f\u4ee3\u5165\u3067\u306f\u306a\u304f\u521d\u671f\u5316\u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002","title":"\u521d\u671f\u5316"},{"location":"ch07-08-assignment-operator/#_5","text":"\u521d\u671f\u5316\u3092\u30b3\u30d4\u30fc\u306b\u3088\u3063\u3066\u884c\u3046\u5834\u5408\u3001 \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3067\u306f\u306a\u304f\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 Copyable c1 ; Copyable c2 = c1 ; // \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u7528 Copyable c3 ; c3 = c2 ; // \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u4f7f\u7528","title":"\u30b3\u30d4\u30fc\u521d\u671f\u5316"},{"location":"ch07-08-assignment-operator/#_6","text":"\u521d\u671f\u5316\u3092\u30e0\u30fc\u30d6\u306b\u3088\u3063\u3066\u884c\u3046\u5834\u5408\u3001 \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3067\u306f\u306a\u304f\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 Movable m1 ; Movable m2 = std :: move ( m1 ); // \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u7528 Movable m3 ; m3 = std :: move ( m2 ); // \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50\u3092\u4f7f\u7528","title":"\u30e0\u30fc\u30d6\u521d\u671f\u5316"},{"location":"ch07-09-default-and-delete/","text":"default/delete \u00b6 \u4ee5\u4e0b\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308b\u7279\u5225\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u3053\u308c\u3089\u306b\u5bfe\u3059\u308b\u6307\u5b9a\u3068\u3057\u3066 default \u6307\u5b9a\u3068 delete \u6307\u5b9a\u304c\u3042\u308a\u307e\u3059\u3002 default \u6307\u5b9a \u00b6 \u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u7279\u5225\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u306b = default \u3092\u3064\u3051\u308b\u3053\u3068\u3067\u3001 \u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u3082\u306e\u3068\u540c\u3058\u3082\u306e\u3092\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 class Square { public : explicit Square ( int size ) : size_ ( size ) {} // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u4ee5\u5916\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b58\u5728\u3059\u308b\u306e\u3067 // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u6697\u9ed9\u7684\u306a\u5b9a\u7fa9\u306f\u884c\u308f\u308c\u306a\u3044\u3002 // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b default \u6307\u5b9a\u3067\u660e\u793a\u7684\u306b\u5b9a\u7fa9 Square () = default ; int Area () const { return size_ * size_ ; } private : int size_ ; }; int main () { Square s1 ; Square s2 ( 10 ); return 0 ; } delete \u6307\u5b9a \u00b6 \u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u7279\u5225\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u306b = delete \u3092\u3064\u3051\u308b\u3053\u3068\u3067\u3001 \u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u7279\u5225\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u524a\u9664\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 class NonCopyable { public : NonCopyable () = default ; // \u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3092 // \u524a\u9664\u3059\u308b\u3053\u3068\u3067\u30b3\u30d4\u30fc\u7981\u6b62\u30af\u30e9\u30b9\u3092\u5b9f\u73fe\u3067\u304d\u308b NonCopyable ( const NonCopyable & ) = delete ; NonCopyable & operator = ( const NonCopyable & ) = delete ; };","title":"7.9. default/delete"},{"location":"ch07-09-default-and-delete/#defaultdelete","text":"\u4ee5\u4e0b\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306f\u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u3053\u3068\u304c\u3042\u308b\u7279\u5225\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u3067\u3059\u3002 \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50 \u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf \u30e0\u30fc\u30d6\u4ee3\u5165\u6f14\u7b97\u5b50 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf \u3053\u308c\u3089\u306b\u5bfe\u3059\u308b\u6307\u5b9a\u3068\u3057\u3066 default \u6307\u5b9a\u3068 delete \u6307\u5b9a\u304c\u3042\u308a\u307e\u3059\u3002","title":"default/delete"},{"location":"ch07-09-default-and-delete/#default","text":"\u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u7279\u5225\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u306b = default \u3092\u3064\u3051\u308b\u3053\u3068\u3067\u3001 \u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u3082\u306e\u3068\u540c\u3058\u3082\u306e\u3092\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002 class Square { public : explicit Square ( int size ) : size_ ( size ) {} // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u4ee5\u5916\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u5b58\u5728\u3059\u308b\u306e\u3067 // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u6697\u9ed9\u7684\u306a\u5b9a\u7fa9\u306f\u884c\u308f\u308c\u306a\u3044\u3002 // \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306b default \u6307\u5b9a\u3067\u660e\u793a\u7684\u306b\u5b9a\u7fa9 Square () = default ; int Area () const { return size_ * size_ ; } private : int size_ ; }; int main () { Square s1 ; Square s2 ( 10 ); return 0 ; }","title":"default \u6307\u5b9a"},{"location":"ch07-09-default-and-delete/#delete","text":"\u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u7279\u5225\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u306b = delete \u3092\u3064\u3051\u308b\u3053\u3068\u3067\u3001 \u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u7279\u5225\u306a\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u524a\u9664\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 class NonCopyable { public : NonCopyable () = default ; // \u6697\u9ed9\u7684\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30b3\u30d4\u30fc\u4ee3\u5165\u6f14\u7b97\u5b50\u3092 // \u524a\u9664\u3059\u308b\u3053\u3068\u3067\u30b3\u30d4\u30fc\u7981\u6b62\u30af\u30e9\u30b9\u3092\u5b9f\u73fe\u3067\u304d\u308b NonCopyable ( const NonCopyable & ) = delete ; NonCopyable & operator = ( const NonCopyable & ) = delete ; };","title":"delete \u6307\u5b9a"},{"location":"ch07-10-static-members/","text":"static \u30e1\u30f3\u30d0 \u00b6 static \u30e1\u30f3\u30d0\u5909\u6570 \u00b6 \u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3054\u3068\u3067\u306f\u306a\u304f\u3001\u30af\u30e9\u30b9\u305d\u306e\u3082\u306e\u304c\u3082\u3064\u5909\u6570\u3067\u3059\u3002 \u521d\u671f\u5316\u3068\u7834\u68c4\u306e\u30bf\u30a4\u30df\u30f3\u30b0 static \u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316/\u7834\u68c4\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u958b\u59cb/\u7d42\u4e86\u6642\u306b\u307e\u3068\u3081\u3066\u884c\u308f\u308c\u307e\u3059\u304c\u3001 \u5b9f\u884c\u9806\u5e8f\u3092\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 \u8aa4\u3063\u305f\u6271\u3044\u3092\u3059\u308b\u3068\u539f\u56e0\u7279\u5b9a\u304c\u96e3\u3057\u3044\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3084\u3059\u3044\u6a5f\u80fd\u3067\u3042\u308a\u3001\u4f7f\u7528\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 \u30e1\u30f3\u30d0\u5909\u6570\u306e\u5ba3\u8a00\u306b static \u3092\u3064\u3051\u308b\u3053\u3068\u3067 static \u30e1\u30f3\u30d0\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 class Counter { public : static int count_ ; }; static \u30e1\u30f3\u30d0\u5909\u6570\u306f\u30af\u30e9\u30b9\u306e\u5916\u3067\u5b9f\u4f53\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 int Counter :: count_ = 10 ; // \u5024 10 \u3067\u521d\u671f\u5316 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u304c2\u3064\u4ee5\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u308b\u5834\u5408\u3001 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u5b9f\u4f53\u306e\u5b9a\u7fa9\u3092\u884c\u3046\u3068\u591a\u91cd\u5b9a\u7fa9\u3068\u306a\u308a\u30ea\u30f3\u30af\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3053\u306e\u554f\u984c\u3092\u907f\u3051\u308b\u305f\u3081\u306b static \u30e1\u30f3\u30d0\u5909\u6570\u306e\u5b9f\u4f53\u306e\u5b9a\u7fa9\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u884c\u3044\u307e\u3059\u3002 counter.cc #include \"counter.h\" int Counter :: count_ = 10 ; counter.h #ifndef COUNTER_H_ #define COUNTER_H_ class Counter { public : static int count_ ; }; #endif // COUNTER_H_ static \u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u306b\u306f Counter::count_ \u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <iostream> #include \"counter.h\" int main () { ++ Counter :: count_ ; std :: cout << Counter :: count_ << std :: endl ; // 11 return 0 ; } static \u30e1\u30f3\u30d0\u95a2\u6570 \u00b6 \u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3054\u3068\u3067\u306f\u306a\u304f\u3001\u30af\u30e9\u30b9\u305d\u306e\u3082\u306e\u304c\u3082\u3064\u95a2\u6570\u3067\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570\u306e\u5ba3\u8a00\u306b static \u3092\u3064\u3051\u308b\u3053\u3068\u3067 static \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 class Brightness { public : explicit Brightness ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } static Brightness Maximum (); static Brightness Minimum (); static Brightness Median (); private : int value_ ; }; static \u30e1\u30f3\u30d0\u95a2\u6570\u306f static \u30e1\u30f3\u30d0\u5909\u6570\u4ee5\u5916\u306e\u30e1\u30f3\u30d0\u5909\u6570\u306f\u76f4\u63a5\u53c2\u7167\u3067\u304d\u306a\u3044\u305f\u3081\u3001 static \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306f\u306a\u304f\u901a\u5e38\u306e\u95a2\u6570\u3067\u5341\u5206\u306a\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 \u901a\u5e38\u306e\u95a2\u6570\u3068\u306e\u9055\u3044\u306f static \u30e1\u30f3\u30d0\u95a2\u6570\u306f\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u305f\u3081\u3001 protected \u3084 private \u306e\u30e1\u30f3\u30d0\u306b\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3053\u3068\u3067\u3059\u3002 Brightness Brightness :: Maximum () { return Brightness ( 100 ); } Brightness Brightness :: Minimum () { return Brightness ( 0 ); } Brightness Brightness :: Median () { return Brightness (( Maximum (). value_ + Minimum (). value_ ) / 2 ); } static \u30e1\u30f3\u30d0\u95a2\u6570\u306f\u5b9f\u884c\u9806\u5e8f\u304c\u5b9a\u307e\u308b\u305f\u3081\u3001 static \u30e1\u30f3\u30d0\u5909\u6570\u306e\u4ee3\u308f\u308a\u306b static \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067 \u521d\u671f\u5316\u9806\u5e8f\u3092\u5236\u5fa1\u3067\u304d\u306a\u3044\u554f\u984c\u3092\u56de\u907f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"7.10. static \u30e1\u30f3\u30d0"},{"location":"ch07-10-static-members/#static","text":"","title":"static \u30e1\u30f3\u30d0"},{"location":"ch07-10-static-members/#static_1","text":"\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3054\u3068\u3067\u306f\u306a\u304f\u3001\u30af\u30e9\u30b9\u305d\u306e\u3082\u306e\u304c\u3082\u3064\u5909\u6570\u3067\u3059\u3002 \u521d\u671f\u5316\u3068\u7834\u68c4\u306e\u30bf\u30a4\u30df\u30f3\u30b0 static \u30e1\u30f3\u30d0\u5909\u6570\u306e\u521d\u671f\u5316/\u7834\u68c4\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u958b\u59cb/\u7d42\u4e86\u6642\u306b\u307e\u3068\u3081\u3066\u884c\u308f\u308c\u307e\u3059\u304c\u3001 \u5b9f\u884c\u9806\u5e8f\u3092\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 \u8aa4\u3063\u305f\u6271\u3044\u3092\u3059\u308b\u3068\u539f\u56e0\u7279\u5b9a\u304c\u96e3\u3057\u3044\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3084\u3059\u3044\u6a5f\u80fd\u3067\u3042\u308a\u3001\u4f7f\u7528\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 \u30e1\u30f3\u30d0\u5909\u6570\u306e\u5ba3\u8a00\u306b static \u3092\u3064\u3051\u308b\u3053\u3068\u3067 static \u30e1\u30f3\u30d0\u5909\u6570\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 class Counter { public : static int count_ ; }; static \u30e1\u30f3\u30d0\u5909\u6570\u306f\u30af\u30e9\u30b9\u306e\u5916\u3067\u5b9f\u4f53\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 int Counter :: count_ = 10 ; // \u5024 10 \u3067\u521d\u671f\u5316 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u304c2\u3064\u4ee5\u4e0a\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3055\u308c\u308b\u5834\u5408\u3001 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u5b9f\u4f53\u306e\u5b9a\u7fa9\u3092\u884c\u3046\u3068\u591a\u91cd\u5b9a\u7fa9\u3068\u306a\u308a\u30ea\u30f3\u30af\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u3053\u306e\u554f\u984c\u3092\u907f\u3051\u308b\u305f\u3081\u306b static \u30e1\u30f3\u30d0\u5909\u6570\u306e\u5b9f\u4f53\u306e\u5b9a\u7fa9\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u884c\u3044\u307e\u3059\u3002 counter.cc #include \"counter.h\" int Counter :: count_ = 10 ; counter.h #ifndef COUNTER_H_ #define COUNTER_H_ class Counter { public : static int count_ ; }; #endif // COUNTER_H_ static \u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u306b\u306f Counter::count_ \u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 #include <iostream> #include \"counter.h\" int main () { ++ Counter :: count_ ; std :: cout << Counter :: count_ << std :: endl ; // 11 return 0 ; }","title":"static \u30e1\u30f3\u30d0\u5909\u6570"},{"location":"ch07-10-static-members/#static_2","text":"\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3054\u3068\u3067\u306f\u306a\u304f\u3001\u30af\u30e9\u30b9\u305d\u306e\u3082\u306e\u304c\u3082\u3064\u95a2\u6570\u3067\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570\u306e\u5ba3\u8a00\u306b static \u3092\u3064\u3051\u308b\u3053\u3068\u3067 static \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5ba3\u8a00\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 class Brightness { public : explicit Brightness ( int value ) : value_ ( value ) {} int Value () const { return value_ ; } static Brightness Maximum (); static Brightness Minimum (); static Brightness Median (); private : int value_ ; }; static \u30e1\u30f3\u30d0\u95a2\u6570\u306f static \u30e1\u30f3\u30d0\u5909\u6570\u4ee5\u5916\u306e\u30e1\u30f3\u30d0\u5909\u6570\u306f\u76f4\u63a5\u53c2\u7167\u3067\u304d\u306a\u3044\u305f\u3081\u3001 static \u30e1\u30f3\u30d0\u95a2\u6570\u3067\u306f\u306a\u304f\u901a\u5e38\u306e\u95a2\u6570\u3067\u5341\u5206\u306a\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u3002 \u901a\u5e38\u306e\u95a2\u6570\u3068\u306e\u9055\u3044\u306f static \u30e1\u30f3\u30d0\u95a2\u6570\u306f\u30af\u30e9\u30b9\u306b\u5c5e\u3059\u308b\u305f\u3081\u3001 protected \u3084 private \u306e\u30e1\u30f3\u30d0\u306b\u3082\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3053\u3068\u3067\u3059\u3002 Brightness Brightness :: Maximum () { return Brightness ( 100 ); } Brightness Brightness :: Minimum () { return Brightness ( 0 ); } Brightness Brightness :: Median () { return Brightness (( Maximum (). value_ + Minimum (). value_ ) / 2 ); } static \u30e1\u30f3\u30d0\u95a2\u6570\u306f\u5b9f\u884c\u9806\u5e8f\u304c\u5b9a\u307e\u308b\u305f\u3081\u3001 static \u30e1\u30f3\u30d0\u5909\u6570\u306e\u4ee3\u308f\u308a\u306b static \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067 \u521d\u671f\u5316\u9806\u5e8f\u3092\u5236\u5fa1\u3067\u304d\u306a\u3044\u554f\u984c\u3092\u56de\u907f\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"static \u30e1\u30f3\u30d0\u95a2\u6570"},{"location":"ch07-11-structs/","text":"\u69cb\u9020\u4f53 \u00b6 \u30af\u30e9\u30b9\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 private \u3067\u3059\u304c\u3001 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u3092 public \u306b\u3057\u305f\u3082\u306e\u304c\u69cb\u9020\u4f53\u3067\u3059\u3002 class \u306e\u4ee3\u308f\u308a\u306b struct \u3068\u3059\u308b\u3068\u69cb\u9020\u4f53\u306b\u306a\u308a\u307e\u3059\u3002 struct Rectangle { int height ; int width ; }; \u3053\u306e\u4f8b\u3067\u306f\u660e\u793a\u7684\u306b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u66f8\u3044\u3066\u3042\u308a\u307e\u305b\u3093\u304c\u3001 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5024\u304c public \u3067\u3042\u308b\u305f\u3081\u6b21\u306e\u3088\u3046\u306b\u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Rectangle r ; r . height = 10 ; r . width = 20 ; \u30af\u30e9\u30b9\u3068\u69cb\u9020\u4f53\u306e\u4f7f\u3044\u5206\u3051\u306b\u3064\u3044\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u3067\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002","title":"7.11. \u69cb\u9020\u4f53"},{"location":"ch07-11-structs/#_1","text":"\u30af\u30e9\u30b9\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 private \u3067\u3059\u304c\u3001 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u3092 public \u306b\u3057\u305f\u3082\u306e\u304c\u69cb\u9020\u4f53\u3067\u3059\u3002 class \u306e\u4ee3\u308f\u308a\u306b struct \u3068\u3059\u308b\u3068\u69cb\u9020\u4f53\u306b\u306a\u308a\u307e\u3059\u3002 struct Rectangle { int height ; int width ; }; \u3053\u306e\u4f8b\u3067\u306f\u660e\u793a\u7684\u306b\u30a2\u30af\u30bb\u30b9\u6307\u5b9a\u5b50\u306f\u66f8\u3044\u3066\u3042\u308a\u307e\u305b\u3093\u304c\u3001 \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5024\u304c public \u3067\u3042\u308b\u305f\u3081\u6b21\u306e\u3088\u3046\u306b\u30e1\u30f3\u30d0\u5909\u6570\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Rectangle r ; r . height = 10 ; r . width = 20 ; \u30af\u30e9\u30b9\u3068\u69cb\u9020\u4f53\u306e\u4f7f\u3044\u5206\u3051\u306b\u3064\u3044\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u3067\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002","title":"\u69cb\u9020\u4f53"},{"location":"ch08-01-cpp-casts/","text":"C++ \u306e\u30ad\u30e3\u30b9\u30c8 \u00b6 C++ \u3067\u306f4\u7a2e\u985e\u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50 \u4e3b\u306a\u7528\u9014 static_cast \u578b\u5909\u63db\u3092\u660e\u793a\u7684\u306b\u884c\u3046 dynamic_cast \u57fa\u5e95\u30af\u30e9\u30b9\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6d3e\u751f\u30af\u30e9\u30b9\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u5909\u63db\u3059\u308b const_cast const\u4fee\u98fe\u5b50\u3092\u5916\u3059 reinterpret_cast \u30dd\u30a4\u30f3\u30bf\u306e\u578b\u5909\u63db\u3092\u884c\u3046 \u672c\u7bc0\u3067\u306f\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3060\u3051\u3092\u8aac\u660e\u3057\u307e\u3059\u3002 \u8a73\u3057\u3044\u8aac\u660e\u306f \u30ad\u30e3\u30b9\u30c8\u306e\u8a73\u3057\u3044\u8aac\u660e \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 static_cast \u00b6 \u578b\u5909\u63db\u3092\u660e\u793a\u7684\u306b\u884c\u3046\u305f\u3081\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 double dx = 3.14 ; int x = static_cast < int > ( dx ); // 3 \u5217\u6319\u578b\u3068\u6570\u5024\u578b\u306e\u5909\u63db\u306a\u3069 \u6697\u9ed9\u7684\u306b\u5909\u63db\u3055\u308c\u306a\u3044\u578b\u5909\u63db\u3082\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 enum class Day { Sun , // 0 Mon , // 1 Tue , // 2 Wed , // 3 Thu , // 4 Fri , // 5 Sat // 6 }; Day day1 = static_cast < Day > ( 1 ); // Day::Mon int day2 = static_cast < int > ( Day :: Tue ); // 2 \u578b\u5909\u63db\u3092\u660e\u793a\u7684\u306b\u884c\u3046\u3053\u3068\u3067\u3001 explicit \u6307\u5b9a\u3055\u308c\u305f\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u308b\u5909\u63db\u3082\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 class Square { public : explicit Square ( int size ) : size_ ( size ) {} private : int size_ ; }; Square square = static_cast < Square > ( 10 ); dynamic_cast \u00b6 \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u3059\u308b\u969b\u306b\u3001 dynamic_cast \u3092\u4f7f\u3044\u307e\u3059\u3002 dynamic_cast \u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 const_cast \u00b6 const\u4fee\u98fe\u5b50\u3092\u5916\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 const std :: string str ( \"hoge\" ); std :: string & x = const_cast < std :: string &> ( str ); \u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u66f4\u3092\u52a0\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u300d\u305f\u3081\u306b const \u304c\u4ed8\u3044\u3066\u3044\u308b\u306b\u3082\u95a2\u308f\u3089\u305a\u3001 const_cast \u3067\u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u66f4\u3092\u52a0\u3048\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u300d\u3053\u3068\u306f\u671b\u307e\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u57fa\u672c\u7684\u306b\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002 reinterpret_cast \u00b6 \u30dd\u30a4\u30f3\u30bf\u306e\u578b\u5909\u63db\u3092\u884c\u3046\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 class A {}; class B {}; A a ; B * b = reinterpret_cast < B *> ( & a ); \u5909\u63db\u5f8c\u306e\u578b\u304b\u3089\u5909\u63db\u524d\u306e\u578b\u306b\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u70b9\u306f\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001 \u5909\u63db\u3057\u305f\u3082\u306e\u304c\u6b63\u3057\u304f\u6a5f\u80fd\u3059\u308b\u304b\u306f\u5b9f\u88c5\u306b\u4f9d\u5b58\u3059\u308b\u305f\u3081\u3001\u306a\u308b\u3079\u304f reinterpret_cast \u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 reinterpret_cast \u306f\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u6642\u306b\u4f7f\u308f\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e read() \u3084\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e write() \u306e\u7b2c 1 \u5f15\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u578b\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002 #include <fstream> #include <vector> int main () { std :: vector < int > nums = { 1 , 2 , 3 , 4 }; // \u30d0\u30a4\u30ca\u30ea + \u51fa\u529b\u30e2\u30fc\u30c9\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u958b\u304f std :: ofstream ofs ( \"nums.bin\" , std :: ios :: binary | std :: ios :: out ); if ( ! ofs ) { return 1 ; } const auto size = sizeof ( int ) * nums . size (); // int \u306e\u30b5\u30a4\u30ba * \u914d\u5217\u8981\u7d20\u6570 // \u914d\u5217\u306e\u5148\u982d\u304b\u3089\u914d\u5217\u5168\u4f53\u306e\u30b5\u30a4\u30ba\u5206\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080 // \u5148\u982d\u30dd\u30a4\u30f3\u30bf\u306f\u30ad\u30e3\u30b9\u30c8\u304c\u5fc5\u8981 ofs . write ( reinterpret_cast < const char *> ( nums . data ()), size ); return 0 ; }","title":"8.1. C++ \u306e\u30ad\u30e3\u30b9\u30c8"},{"location":"ch08-01-cpp-casts/#c","text":"C++ \u3067\u306f4\u7a2e\u985e\u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002 \u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50 \u4e3b\u306a\u7528\u9014 static_cast \u578b\u5909\u63db\u3092\u660e\u793a\u7684\u306b\u884c\u3046 dynamic_cast \u57fa\u5e95\u30af\u30e9\u30b9\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6d3e\u751f\u30af\u30e9\u30b9\u578b\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u5909\u63db\u3059\u308b const_cast const\u4fee\u98fe\u5b50\u3092\u5916\u3059 reinterpret_cast \u30dd\u30a4\u30f3\u30bf\u306e\u578b\u5909\u63db\u3092\u884c\u3046 \u672c\u7bc0\u3067\u306f\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3060\u3051\u3092\u8aac\u660e\u3057\u307e\u3059\u3002 \u8a73\u3057\u3044\u8aac\u660e\u306f \u30ad\u30e3\u30b9\u30c8\u306e\u8a73\u3057\u3044\u8aac\u660e \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"C++ \u306e\u30ad\u30e3\u30b9\u30c8"},{"location":"ch08-01-cpp-casts/#static_cast","text":"\u578b\u5909\u63db\u3092\u660e\u793a\u7684\u306b\u884c\u3046\u305f\u3081\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 double dx = 3.14 ; int x = static_cast < int > ( dx ); // 3 \u5217\u6319\u578b\u3068\u6570\u5024\u578b\u306e\u5909\u63db\u306a\u3069 \u6697\u9ed9\u7684\u306b\u5909\u63db\u3055\u308c\u306a\u3044\u578b\u5909\u63db\u3082\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 enum class Day { Sun , // 0 Mon , // 1 Tue , // 2 Wed , // 3 Thu , // 4 Fri , // 5 Sat // 6 }; Day day1 = static_cast < Day > ( 1 ); // Day::Mon int day2 = static_cast < int > ( Day :: Tue ); // 2 \u578b\u5909\u63db\u3092\u660e\u793a\u7684\u306b\u884c\u3046\u3053\u3068\u3067\u3001 explicit \u6307\u5b9a\u3055\u308c\u305f\u5909\u63db\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u308b\u5909\u63db\u3082\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 class Square { public : explicit Square ( int size ) : size_ ( size ) {} private : int size_ ; }; Square square = static_cast < Square > ( 10 );","title":"static_cast"},{"location":"ch08-01-cpp-casts/#dynamic_cast","text":"\u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8\u3092\u3059\u308b\u969b\u306b\u3001 dynamic_cast \u3092\u4f7f\u3044\u307e\u3059\u3002 dynamic_cast \u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"dynamic_cast"},{"location":"ch08-01-cpp-casts/#const_cast","text":"const\u4fee\u98fe\u5b50\u3092\u5916\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 const std :: string str ( \"hoge\" ); std :: string & x = const_cast < std :: string &> ( str ); \u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u66f4\u3092\u52a0\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u300d\u305f\u3081\u306b const \u304c\u4ed8\u3044\u3066\u3044\u308b\u306b\u3082\u95a2\u308f\u3089\u305a\u3001 const_cast \u3067\u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u66f4\u3092\u52a0\u3048\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u300d\u3053\u3068\u306f\u671b\u307e\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u57fa\u672c\u7684\u306b\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002","title":"const_cast"},{"location":"ch08-01-cpp-casts/#reinterpret_cast","text":"\u30dd\u30a4\u30f3\u30bf\u306e\u578b\u5909\u63db\u3092\u884c\u3046\u30ad\u30e3\u30b9\u30c8\u3067\u3059\u3002 class A {}; class B {}; A a ; B * b = reinterpret_cast < B *> ( & a ); \u5909\u63db\u5f8c\u306e\u578b\u304b\u3089\u5909\u63db\u524d\u306e\u578b\u306b\u623b\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u70b9\u306f\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001 \u5909\u63db\u3057\u305f\u3082\u306e\u304c\u6b63\u3057\u304f\u6a5f\u80fd\u3059\u308b\u304b\u306f\u5b9f\u88c5\u306b\u4f9d\u5b58\u3059\u308b\u305f\u3081\u3001\u306a\u308b\u3079\u304f reinterpret_cast \u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u3053\u3068\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 reinterpret_cast \u306f\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u6642\u306b\u4f7f\u308f\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e read() \u3084\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e write() \u306e\u7b2c 1 \u5f15\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u578b\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002 #include <fstream> #include <vector> int main () { std :: vector < int > nums = { 1 , 2 , 3 , 4 }; // \u30d0\u30a4\u30ca\u30ea + \u51fa\u529b\u30e2\u30fc\u30c9\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u958b\u304f std :: ofstream ofs ( \"nums.bin\" , std :: ios :: binary | std :: ios :: out ); if ( ! ofs ) { return 1 ; } const auto size = sizeof ( int ) * nums . size (); // int \u306e\u30b5\u30a4\u30ba * \u914d\u5217\u8981\u7d20\u6570 // \u914d\u5217\u306e\u5148\u982d\u304b\u3089\u914d\u5217\u5168\u4f53\u306e\u30b5\u30a4\u30ba\u5206\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080 // \u5148\u982d\u30dd\u30a4\u30f3\u30bf\u306f\u30ad\u30e3\u30b9\u30c8\u304c\u5fc5\u8981 ofs . write ( reinterpret_cast < const char *> ( nums . data ()), size ); return 0 ; }","title":"reinterpret_cast"},{"location":"ch08-02-c-cast/","text":"C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8 \u00b6 C++ \u306f C\u8a00\u8a9e\u3068\u4e92\u63db\u6027\u304c\u3042\u308b\u305f\u3081\u3001 (\u578b\u540d) \u3067C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 double dx = 3.14 ; int x = ( int ) dx ; \u3057\u304b\u3057\u3001C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u3001\u30b3\u30fc\u30c9\u304b\u3089\u30ad\u30e3\u30b9\u30c8\u306e\u610f\u56f3\u304c\u6c72\u307f\u53d6\u308a\u306b\u304f\u3044\u4e0a\u3001\u5b9f\u88c5\u8005\u306e\u610f\u306b\u53cd\u3057\u305f\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u3063\u305f\u3068\u3057\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308b\u305f\u3081\u3001\u4e0d\u5177\u5408\u3092\u751f\u307f\u51fa\u3059\u8981\u56e0\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u5bfe\u3057\u3066\u3001C++ \u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u306f\u7528\u9014\u306b\u5408\u308f\u305b\u3066\u7a2e\u985e\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u610f\u56f3\u304c\u660e\u78ba\u306b\u306a\u308b\u4e0a\u3001\u5b9f\u88c5\u8005\u306e\u610f\u306b\u53cd\u3057\u305f\u30ad\u30e3\u30b9\u30c8\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 int x = 100 ; int * px = static_cast < int *> ( x ); // static_cast\u306e\u610f\u56f3\u306b\u53cd\u3057\u3066\u3044\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u30ad\u30e3\u30b9\u30c8\u306e\u610f\u56f3\u3092\u660e\u78ba\u306b\u3059\u308b\u305f\u3081\u306b\u3001C++ \u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002","title":"8.2. C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8"},{"location":"ch08-02-c-cast/#c","text":"C++ \u306f C\u8a00\u8a9e\u3068\u4e92\u63db\u6027\u304c\u3042\u308b\u305f\u3081\u3001 (\u578b\u540d) \u3067C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 double dx = 3.14 ; int x = ( int ) dx ; \u3057\u304b\u3057\u3001C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8\u3067\u306f\u3001\u30b3\u30fc\u30c9\u304b\u3089\u30ad\u30e3\u30b9\u30c8\u306e\u610f\u56f3\u304c\u6c72\u307f\u53d6\u308a\u306b\u304f\u3044\u4e0a\u3001\u5b9f\u88c5\u8005\u306e\u610f\u306b\u53cd\u3057\u305f\u30ad\u30e3\u30b9\u30c8\u3092\u884c\u3063\u305f\u3068\u3057\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308b\u305f\u3081\u3001\u4e0d\u5177\u5408\u3092\u751f\u307f\u51fa\u3059\u8981\u56e0\u306b\u306a\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u5bfe\u3057\u3066\u3001C++ \u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u306f\u7528\u9014\u306b\u5408\u308f\u305b\u3066\u7a2e\u985e\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u610f\u56f3\u304c\u660e\u78ba\u306b\u306a\u308b\u4e0a\u3001\u5b9f\u88c5\u8005\u306e\u610f\u306b\u53cd\u3057\u305f\u30ad\u30e3\u30b9\u30c8\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u691c\u77e5\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002 int x = 100 ; int * px = static_cast < int *> ( x ); // static_cast\u306e\u610f\u56f3\u306b\u53cd\u3057\u3066\u3044\u308b\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u30ad\u30e3\u30b9\u30c8\u306e\u610f\u56f3\u3092\u660e\u78ba\u306b\u3059\u308b\u305f\u3081\u306b\u3001C++ \u306e\u30ad\u30e3\u30b9\u30c8\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002","title":"C\u8a00\u8a9e\u5f62\u5f0f\u306e\u30ad\u30e3\u30b9\u30c8"},{"location":"ch09-01-function-templates/","text":"\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u00b6 \u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u6a5f\u80fd\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u578b\u306b\u4f9d\u5b58\u305b\u305a\u51e6\u7406\u3092\u5171\u901a\u5316\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 \u95a2\u6570\u306b\u5bfe\u3059\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T > T Sum ( T a , T b ) { return a + b ; } \u578b\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u306b\u306f typename \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u3053\u306e\u4f8b\u3067\u306f T \u3068\u3044\u3046\u578b\u30672\u3064\u306e\u5f15\u6570\u3068\u623b\u308a\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Sum < int > ( 1 , 2 ); // 3 Sum < double > ( 1.2 , 3.4 ); // 4.6 \u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b < ... > \u3067 T \u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u306e\u7701\u7565 \u00b6 \u5b9f\u5f15\u6570\u304b\u3089\u578b\u30d1\u30e9\u30e1\u30fc\u30bf T \u3092\u63a8\u8ad6\u3067\u304d\u308b\u5834\u5408\u306b\u306f \u547c\u3073\u51fa\u3057\u6642\u306e < ... > \u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Sum ( 1 , 2 ); // 3 Sum ( 1.2 , 3.4 ); // 4.6 \u7b2c1\u5f15\u6570\u3092 int \u3001\u7b2c2\u5f15\u6570\u3092 double \u306b\u3059\u308b\u3068 T \u306e\u578b\u3092\u63a8\u8ad6\u3067\u304d\u305a\u3001 \u547c\u3073\u51fa\u3057\u6642\u306e < ... > \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 Sum < double > ( 1 , 2.3 ); // 3.3 // Sum(1, 2.3); // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc \u8907\u6570\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570 \u00b6 \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306f 1\u3064\u3060\u3051\u3067\u306f\u306a\u304f\u8907\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u623b\u308a\u5024\u3092 double \u306b\u56fa\u5b9a\u3057\u3066\u7b2c1\u5f15\u6570\u3068\u7b2c2\u5f15\u6570\u3092 \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T , typename U > double Sum ( T a , U b ) { return a + b ; } \u3053\u306e\u5834\u5408\u306b\u306f\u6b21\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 Sum ( 1 , 2.3 ); // 3.3 \u623b\u308a\u5024\u306e\u578b\u63a8\u8ad6 \u00b6 \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3057\u305f\u5f15\u6570\u306e\u578b\u304b\u3089\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u306b\u306f decltype \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 template < typename T , typename U > auto Sum ( T a , U b ) -> decltype ( a + b ) { return a + b ; } \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316 \u00b6 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u306f\u578b\u3060\u3051\u3067\u306f\u306a\u304f \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3068\u3057\u3066\u914d\u5217\u306e\u30b5\u30a4\u30ba\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 template < int N > int Fibonacchi () { int a [ N + 1 ]; a [ 0 ] = 0 ; a [ 1 ] = 1 ; for ( auto i = 2 ; i <= N ; ++ i ) { a [ i ] = a [ i - 1 ] + a [ i - 2 ]; } return a [ N ]; } \u3053\u306e\u4f8b\u306f \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570 \u3092\u8a08\u7b97\u3059\u308b\u51e6\u7406\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u5024\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Fibonacchi < 10 > (); // 55","title":"9.1. \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ch09-01-function-templates/#_1","text":"\u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u6a5f\u80fd\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u578b\u306b\u4f9d\u5b58\u305b\u305a\u51e6\u7406\u3092\u5171\u901a\u5316\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 \u95a2\u6570\u306b\u5bfe\u3059\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T > T Sum ( T a , T b ) { return a + b ; } \u578b\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u306b\u306f typename \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u3053\u306e\u4f8b\u3067\u306f T \u3068\u3044\u3046\u578b\u30672\u3064\u306e\u5f15\u6570\u3068\u623b\u308a\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Sum < int > ( 1 , 2 ); // 3 Sum < double > ( 1.2 , 3.4 ); // 4.6 \u95a2\u6570\u547c\u3073\u51fa\u3057\u6642\u306b < ... > \u3067 T \u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002","title":"\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ch09-01-function-templates/#_2","text":"\u5b9f\u5f15\u6570\u304b\u3089\u578b\u30d1\u30e9\u30e1\u30fc\u30bf T \u3092\u63a8\u8ad6\u3067\u304d\u308b\u5834\u5408\u306b\u306f \u547c\u3073\u51fa\u3057\u6642\u306e < ... > \u3092\u7701\u7565\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Sum ( 1 , 2 ); // 3 Sum ( 1.2 , 3.4 ); // 4.6 \u7b2c1\u5f15\u6570\u3092 int \u3001\u7b2c2\u5f15\u6570\u3092 double \u306b\u3059\u308b\u3068 T \u306e\u578b\u3092\u63a8\u8ad6\u3067\u304d\u305a\u3001 \u547c\u3073\u51fa\u3057\u6642\u306e < ... > \u3092\u7701\u7565\u3057\u305f\u5834\u5408\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 Sum < double > ( 1 , 2.3 ); // 3.3 // Sum(1, 2.3); // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc","title":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u306e\u7701\u7565"},{"location":"ch09-01-function-templates/#_3","text":"\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306f 1\u3064\u3060\u3051\u3067\u306f\u306a\u304f\u8907\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u623b\u308a\u5024\u3092 double \u306b\u56fa\u5b9a\u3057\u3066\u7b2c1\u5f15\u6570\u3068\u7b2c2\u5f15\u6570\u3092 \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T , typename U > double Sum ( T a , U b ) { return a + b ; } \u3053\u306e\u5834\u5408\u306b\u306f\u6b21\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002 Sum ( 1 , 2.3 ); // 3.3","title":"\u8907\u6570\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570"},{"location":"ch09-01-function-templates/#_4","text":"\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3057\u305f\u5f15\u6570\u306e\u578b\u304b\u3089\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u306b\u306f decltype \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 template < typename T , typename U > auto Sum ( T a , U b ) -> decltype ( a + b ) { return a + b ; }","title":"\u623b\u308a\u5024\u306e\u578b\u63a8\u8ad6"},{"location":"ch09-01-function-templates/#_5","text":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u306f\u578b\u3060\u3051\u3067\u306f\u306a\u304f \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u3068\u3057\u3066\u914d\u5217\u306e\u30b5\u30a4\u30ba\u306a\u3069\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 template < int N > int Fibonacchi () { int a [ N + 1 ]; a [ 0 ] = 0 ; a [ 1 ] = 1 ; for ( auto i = 2 ; i <= N ; ++ i ) { a [ i ] = a [ i - 1 ] + a [ i - 2 ]; } return a [ N ]; } \u3053\u306e\u4f8b\u306f \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570 \u3092\u8a08\u7b97\u3059\u308b\u51e6\u7406\u3067\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u5024\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 Fibonacchi < 10 > (); // 55","title":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316"},{"location":"ch09-02-class-templates/","text":"\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u00b6 \u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T > class Rectangle { public : Rectangle ( T height , T width ) : height_ ( height ), width_ ( width ) {} T Area () const { return height_ * width_ ; } private : const T height_ ; const T width_ ; }; \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle < int > r1 ( 10 , 20 ); Rectangle < double > r2 ( 1.2 , 3.4 ); \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u304c\u5fc5\u8981\u306a\u306e\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u6642\u306e\u307f\u3067\u3001 \u751f\u6210\u5f8c\u306f\u901a\u5e38\u306e\u30af\u30e9\u30b9\u3068\u540c\u69d8\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 r1 . Area (); // 200 r2 . Area (); // 4.08 \u8907\u6570\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570 \u00b6 \u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306f \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3082\u8907\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 template < typename T , typename U > class Rectangle { public : Rectangle ( T height , U width ) : height_ ( height ), width_ ( width ) {} double Area () const { return height_ * width_ ; } private : const T height_ ; const U width_ ; }; \u3053\u306e\u4f8b\u3067\u306f\u30e1\u30f3\u30d0\u95a2\u6570 Area() \u306e\u623b\u308a\u5024\u3092 double \u306b\u56fa\u5b9a\u3057\u3066 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u30922\u3064\u306b\u3057\u3066\u3044\u307e\u3059\u3002 \u30e1\u30f3\u30d0\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u63a8\u8ad6 \u00b6 \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u306b\u306f decltype \u5185\u3067 std::declval \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 template < typename T , typename U > class Rectangle { public : Rectangle ( T height , U width ) : height_ ( height ), width_ ( width ) {} auto Area () const -> decltype ( std :: declval < T > () * std :: declval < U > ()) { return height_ * width_ ; } private : const T height_ ; const U width_ ; }; \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316 \u00b6 \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u306f\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 template < typename T , int N > class Array { public : int size () const { return N ; } T data_ [ N ]; };","title":"9.2. \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ch09-02-class-templates/#_1","text":"\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u3044\u3044\u307e\u3059\u3002 \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T > class Rectangle { public : Rectangle ( T height , T width ) : height_ ( height ), width_ ( width ) {} T Area () const { return height_ * width_ ; } private : const T height_ ; const T width_ ; }; \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 Rectangle < int > r1 ( 10 , 20 ); Rectangle < double > r2 ( 1.2 , 3.4 ); \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5b9f\u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u304c\u5fc5\u8981\u306a\u306e\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u6642\u306e\u307f\u3067\u3001 \u751f\u6210\u5f8c\u306f\u901a\u5e38\u306e\u30af\u30e9\u30b9\u3068\u540c\u69d8\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 r1 . Area (); // 200 r2 . Area (); // 4.08","title":"\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8"},{"location":"ch09-02-class-templates/#_2","text":"\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3059\u308b\u578b\u3084\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306f \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3082\u8907\u6570\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 template < typename T , typename U > class Rectangle { public : Rectangle ( T height , U width ) : height_ ( height ), width_ ( width ) {} double Area () const { return height_ * width_ ; } private : const T height_ ; const U width_ ; }; \u3053\u306e\u4f8b\u3067\u306f\u30e1\u30f3\u30d0\u95a2\u6570 Area() \u306e\u623b\u308a\u5024\u3092 double \u306b\u56fa\u5b9a\u3057\u3066 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u30922\u3064\u306b\u3057\u3066\u3044\u307e\u3059\u3002","title":"\u8907\u6570\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570"},{"location":"ch09-02-class-templates/#_3","text":"\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\u3059\u308b\u306b\u306f decltype \u5185\u3067 std::declval \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 template < typename T , typename U > class Rectangle { public : Rectangle ( T height , U width ) : height_ ( height ), width_ ( width ) {} auto Area () const -> decltype ( std :: declval < T > () * std :: declval < U > ()) { return height_ * width_ ; } private : const T height_ ; const U width_ ; };","title":"\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u63a8\u8ad6"},{"location":"ch09-02-class-templates/#_4","text":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u306f\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u3082\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 template < typename T , int N > class Array { public : int size () const { return N ; } T data_ [ N ]; };","title":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5b9a\u307e\u308b\u5024\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u5316"},{"location":"ch09-03-template-specializations/","text":"\u7279\u6b8a\u5316 \u00b6 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u306f\u5b9f\u5f15\u6570\u306b\u5fdc\u3058\u3066\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 // \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 template < typename T > T Sum ( T a , T b ) { return a + b ; } // \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057 Sum < int > ( 1 , 2 ); Sum<int>(1, 2) \u3068\u3044\u3046\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306b\u3088\u3063\u3066 T \u304c int \u3067\u3042\u308b\u95a2\u6570\u304c\u5fc5\u8981\u3068\u5224\u65ad\u3055\u308c\u3001\u6b21\u306e\u95a2\u6570\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002 int Sum ( int a , int b ) { return a + b ; } \u3053\u306e\u3088\u3046\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u7b87\u6240\u306b\u304a\u3044\u3066\u3001 \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u95a2\u6570\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304a\u3088\u3073 \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3092\u7279\u6b8a\u5316 (\u307e\u305f\u306f\u6697\u9ed9\u7684\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316) \u3068\u3044\u3044\u307e\u3059\u3002 \u7279\u6b8a\u5316\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u308b\u305f\u3081\u3001 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u305d\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3082\u884c\u3044\u307e\u3059\u3002 sum.h #ifndef SUM_H_ #define SUM_H_ template < typename T > inline T Sum ( T a , T b ) { // inline \u6307\u5b9a\u304c\u5fc5\u8981 return a + b ; } #endif // SUM_H_ main.cc #include <iostream> #include \"sum.h\" int main () { std :: cout << Sum ( 1 , 2 ) << std :: endl ; return 0 ; } \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u660e\u793a\u7684\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u7b87\u6240\u3067\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u660e\u793a\u7684\u306b\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u5ba3\u8a00\u3060\u3051\u884c\u3046\u3053\u3068\u306f\u53ef\u80fd\u3067\u306f\u3042\u308a\u307e\u3059\u3002 sum.h #ifndef SUM_H_ #define SUM_H_ template < typename T > T Sum ( T a , T b ); // \u5ba3\u8a00\u3060\u3051\u884c\u3046 (inline \u3082\u3064\u3051\u306a\u3044) #endif // SUM_H_ sum.cc #include \"sum.h\" // \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5b9a\u7fa9 template < typename T > T Sum ( T a , T b ) { return a + b ; } // \u660e\u793a\u7684\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 template int Sum < int > ( int , int ); \u3053\u3046\u3057\u305f\u69cb\u6210\u306b\u3059\u308b\u3068\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u3066\u3082 \u4f7f\u7528\u53ef\u80fd\u306a\u578b\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u660e\u793a\u7684\u306a\u751f\u6210\u3092\u884c\u3046\u578b\u306e\u307f\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u305f\u3068\u3048\u3070 Sum<double>(double, double) \u306f\u751f\u6210\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081 Sum(1.2, 3.4) \u306e\u3088\u3046\u306b\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u30ea\u30f3\u30af\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u3046\u3057\u305f\u554f\u984c\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u306f\u3001 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u3084\u3081\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u305f\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 sum.h #ifndef SUM_H_ #define SUM_H_ int Sum ( int a , int b ); double Sum ( double a , double b ); #endif // SUM_H_ sum.cc #include \"sum.h\" // \u5b9f\u88c5\u306b\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528 template < typename T > T SumImpl ( T a , T b ) { return a + b ; } int Sum ( int a , int b ) { return SumImpl ( a , b ); } double Sum ( double a , double b ) { return SumImpl ( a , b ); } \u5b8c\u5168\u7279\u6b8a\u5316 \u00b6 \u7279\u6b8a\u5316\u306b\u3088\u3063\u3066\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3084\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 \u901a\u5e38\u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067 \u7279\u5b9a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u5bfe\u3059\u308b\u6319\u52d5\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3092\u5b8c\u5168\u7279\u6b8a\u5316 (\u307e\u305f\u306f\u660e\u793a\u7684\u7279\u6b8a\u5316) \u3068\u3044\u3044\u307e\u3059\u3002 \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5b8c\u5168\u7279\u6b8a\u5316\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T > T DoSomething ( T a , T b ) { return a + b ; } template <> double DoSomething < double > ( double a , double b ) { return a * b ; } std :: cout << DoSomething ( 2 , 3 ) << std :: endl ; // 5 std :: cout << DoSomething ( 2.0 , 3.0 ) << std :: endl ; // 6 \u95a2\u6570\u306e\u524d\u306b template <> \u3092\u4ed8\u3051\u3066\u5b8c\u5168\u7279\u6b8a\u5316\u3092\u884c\u3046\u3053\u3068\u3092\u6307\u5b9a\u3057\u3001 \u95a2\u6570\u540d\u306e\u5f8c\u306b < ... > \u3067\u5bfe\u8c61\u3068\u306a\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5b8c\u5168\u7279\u6b8a\u5316\u3082\u540c\u69d8\u3067\u3059\u3002 template < typename T > class Array { public : explicit Array ( int size ) : size_ ( size ), data_ ( new T [ size_ ]) {} ~ Array () { delete [] data_ ; } int Size () const { return size_ ; } private : const int size_ ; T * data_ ; }; template <> class Array < bool > { public : explicit Array ( int size ) : size_ ( size ), data_size_ (( size - 1 ) / 8 + 1 ), data_ ( new uint8_t [ data_size_ ]) {} ~ Array () { delete [] data_ ; } int Size () const { return size_ ; } private : const int size_ ; const int data_size_ ; uint8_t * data_ ; }; \u3053\u306e\u4f8b\u3067\u306f8\u500b\u306e bool \u5024\u30921\u500b\u306e uint8_t \u3067\u6271\u3063\u3066\u7701\u30e1\u30e2\u30ea\u5316\u3059\u308b\u305f\u3081\u306b\u3001 bool \u306b\u5bfe\u3059\u308b\u5b8c\u5168\u7279\u6b8a\u5316\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002 \u90e8\u5206\u7279\u6b8a\u5316 \u00b6 \u7279\u5b9a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u5bfe\u3057\u3066 \u7279\u6b8a\u5316\u3067\u4f7f\u7528\u3059\u308b\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3084\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5225\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3092\u90e8\u5206\u7279\u6b8a\u5316\u3068\u3044\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u90e8\u5206\u7279\u6b8a\u5316 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"9.3. \u7279\u6b8a\u5316"},{"location":"ch09-03-template-specializations/#_1","text":"\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u306f\u5b9f\u5f15\u6570\u306b\u5fdc\u3058\u3066\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002 // \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 template < typename T > T Sum ( T a , T b ) { return a + b ; } // \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057 Sum < int > ( 1 , 2 ); Sum<int>(1, 2) \u3068\u3044\u3046\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u306b\u3088\u3063\u3066 T \u304c int \u3067\u3042\u308b\u95a2\u6570\u304c\u5fc5\u8981\u3068\u5224\u65ad\u3055\u308c\u3001\u6b21\u306e\u95a2\u6570\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002 int Sum ( int a , int b ) { return a + b ; } \u3053\u306e\u3088\u3046\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u7b87\u6240\u306b\u304a\u3044\u3066\u3001 \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u95a2\u6570\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304a\u3088\u3073 \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3092\u7279\u6b8a\u5316 (\u307e\u305f\u306f\u6697\u9ed9\u7684\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316) \u3068\u3044\u3044\u307e\u3059\u3002 \u7279\u6b8a\u5316\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u308b\u305f\u3081\u3001 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u305d\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u5b9a\u7fa9\u3082\u884c\u3044\u307e\u3059\u3002 sum.h #ifndef SUM_H_ #define SUM_H_ template < typename T > inline T Sum ( T a , T b ) { // inline \u6307\u5b9a\u304c\u5fc5\u8981 return a + b ; } #endif // SUM_H_ main.cc #include <iostream> #include \"sum.h\" int main () { std :: cout << Sum ( 1 , 2 ) << std :: endl ; return 0 ; } \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u660e\u793a\u7684\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u7b87\u6240\u3067\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u660e\u793a\u7684\u306b\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u5ba3\u8a00\u3060\u3051\u884c\u3046\u3053\u3068\u306f\u53ef\u80fd\u3067\u306f\u3042\u308a\u307e\u3059\u3002 sum.h #ifndef SUM_H_ #define SUM_H_ template < typename T > T Sum ( T a , T b ); // \u5ba3\u8a00\u3060\u3051\u884c\u3046 (inline \u3082\u3064\u3051\u306a\u3044) #endif // SUM_H_ sum.cc #include \"sum.h\" // \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5b9a\u7fa9 template < typename T > T Sum ( T a , T b ) { return a + b ; } // \u660e\u793a\u7684\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316 template int Sum < int > ( int , int ); \u3053\u3046\u3057\u305f\u69cb\u6210\u306b\u3059\u308b\u3068\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u3066\u3082 \u4f7f\u7528\u53ef\u80fd\u306a\u578b\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u660e\u793a\u7684\u306a\u751f\u6210\u3092\u884c\u3046\u578b\u306e\u307f\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002 \u305f\u3068\u3048\u3070 Sum<double>(double, double) \u306f\u751f\u6210\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081 Sum(1.2, 3.4) \u306e\u3088\u3046\u306b\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3068\u30ea\u30f3\u30af\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 \u3053\u3046\u3057\u305f\u554f\u984c\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u306f\u3001 \u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u3084\u3081\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u305f\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3001 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3067\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 sum.h #ifndef SUM_H_ #define SUM_H_ int Sum ( int a , int b ); double Sum ( double a , double b ); #endif // SUM_H_ sum.cc #include \"sum.h\" // \u5b9f\u88c5\u306b\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u7528 template < typename T > T SumImpl ( T a , T b ) { return a + b ; } int Sum ( int a , int b ) { return SumImpl ( a , b ); } double Sum ( double a , double b ) { return SumImpl ( a , b ); }","title":"\u7279\u6b8a\u5316"},{"location":"ch09-03-template-specializations/#_2","text":"\u7279\u6b8a\u5316\u306b\u3088\u3063\u3066\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3084\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u751f\u6210\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 \u901a\u5e38\u306e\u95a2\u6570\u3084\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3059\u308b\u3088\u3046\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067 \u7279\u5b9a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u5bfe\u3059\u308b\u6319\u52d5\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3092\u5b8c\u5168\u7279\u6b8a\u5316 (\u307e\u305f\u306f\u660e\u793a\u7684\u7279\u6b8a\u5316) \u3068\u3044\u3044\u307e\u3059\u3002 \u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5b8c\u5168\u7279\u6b8a\u5316\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 template < typename T > T DoSomething ( T a , T b ) { return a + b ; } template <> double DoSomething < double > ( double a , double b ) { return a * b ; } std :: cout << DoSomething ( 2 , 3 ) << std :: endl ; // 5 std :: cout << DoSomething ( 2.0 , 3.0 ) << std :: endl ; // 6 \u95a2\u6570\u306e\u524d\u306b template <> \u3092\u4ed8\u3051\u3066\u5b8c\u5168\u7279\u6b8a\u5316\u3092\u884c\u3046\u3053\u3068\u3092\u6307\u5b9a\u3057\u3001 \u95a2\u6570\u540d\u306e\u5f8c\u306b < ... > \u3067\u5bfe\u8c61\u3068\u306a\u308b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u5b8c\u5168\u7279\u6b8a\u5316\u3082\u540c\u69d8\u3067\u3059\u3002 template < typename T > class Array { public : explicit Array ( int size ) : size_ ( size ), data_ ( new T [ size_ ]) {} ~ Array () { delete [] data_ ; } int Size () const { return size_ ; } private : const int size_ ; T * data_ ; }; template <> class Array < bool > { public : explicit Array ( int size ) : size_ ( size ), data_size_ (( size - 1 ) / 8 + 1 ), data_ ( new uint8_t [ data_size_ ]) {} ~ Array () { delete [] data_ ; } int Size () const { return size_ ; } private : const int size_ ; const int data_size_ ; uint8_t * data_ ; }; \u3053\u306e\u4f8b\u3067\u306f8\u500b\u306e bool \u5024\u30921\u500b\u306e uint8_t \u3067\u6271\u3063\u3066\u7701\u30e1\u30e2\u30ea\u5316\u3059\u308b\u305f\u3081\u306b\u3001 bool \u306b\u5bfe\u3059\u308b\u5b8c\u5168\u7279\u6b8a\u5316\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002","title":"\u5b8c\u5168\u7279\u6b8a\u5316"},{"location":"ch09-03-template-specializations/#_3","text":"\u7279\u5b9a\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u5bfe\u3057\u3066 \u7279\u6b8a\u5316\u3067\u4f7f\u7528\u3059\u308b\u95a2\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3084\u30af\u30e9\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5225\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u3092\u90e8\u5206\u7279\u6b8a\u5316\u3068\u3044\u3044\u307e\u3059\u3002 \u8a73\u7d30\u306f \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306e\u90e8\u5206\u7279\u6b8a\u5316 - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u90e8\u5206\u7279\u6b8a\u5316"},{"location":"ch10-01-exceptions/","text":"\u4f8b\u5916\u51e6\u7406 \u00b6 \u4f8b\u5916\u51e6\u7406\u3068\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u3001 \u5f8c\u7d9a\u306e\u51e6\u7406\u3092\u884c\u3046\u306e\u3092\u3084\u3081\u3066\u30a8\u30e9\u30fc\u767a\u751f\u6642\u7528\u306e\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u306e\u6a5f\u80fd\u3067\u3059\u3002 \u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u306b\u3088\u308b\u4f8b\u5916\u51e6\u7406\u306e\u4f7f\u7528\u7981\u6b62 C++ \u306b\u304a\u3051\u308b\u4f8b\u5916\u51e6\u7406\u306f\u554f\u984c\u70b9\u304c\u591a\u304f\u3001 Google C++ Style Guide \u3084 LLVM Coding Standards \u3067\u306f\u4f8b\u5916\u51e6\u7406\u306e\u4f7f\u7528\u3092\u539f\u5247\u7981\u6b62\u3057\u3066\u3044\u307e\u3059\u3002 \u4f8b\u5916\u51e6\u7406\u306b\u304a\u3044\u3066\u30a8\u30e9\u30fc\u3092\u8868\u3059\u3082\u306e\u4f8b\u5916\u3068\u3044\u3044\u307e\u3059\u3002 \u4f8b\u5916\u51e6\u7406\u306f\u6b21\u306e2\u3064\u306e\u6bb5\u968e\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002 \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u7b87\u6240\u3067\u4f8b\u5916\u3092\u9001\u51fa\u3057\u3001\u5f8c\u7d9a\u306e\u51e6\u7406\u3092\u884c\u3046\u306e\u3092\u3084\u3081\u308b \u9001\u51fa\u3055\u308c\u305f\u4f8b\u5916\u3092\u6355\u6349\u3057\u3001\u30a8\u30e9\u30fc\u767a\u751f\u6642\u7528\u306e\u51e6\u7406\u3092\u884c\u3046 \u6b63\u306e\u6574\u6570\u3092\u8868\u3059 std::string \u3092 int \u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u306b\u304a\u3044\u3066\u3001 \u7121\u52b9\u306a\u6587\u5b57\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u5909\u63db\u51e6\u7406\u3092\u3084\u3081\u3066\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\u3059\u308b\u306b\u306f \u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 std :: string str = \"123XY56\" ; try { int num = 0 ; for ( const auto s : str ) { num *= 10 ; switch ( s ) { case '0' : num += 0 ; break ; case '1' : num += 1 ; break ; case '2' : num += 2 ; break ; case '3' : num += 3 ; break ; case '4' : num += 4 ; break ; case '5' : num += 5 ; break ; case '6' : num += 6 ; break ; case '7' : num += 7 ; break ; case '8' : num += 8 ; break ; case '9' : num += 9 ; break ; default : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3067\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a2d\u5b9a throw std :: runtime_error ( \"\u6570\u5024\u3067\u306f\u306a\u3044\u6587\u5b57\u304c\u5165\u3063\u3066\u3044\u307e\u3059\" ); } } std :: cout << num << std :: endl ; // \u554f\u984c\u306a\u304f\u5909\u63db\u3067\u304d\u305f\u5834\u5408\u306b\u306f\u5909\u63db\u5f8c\u306e\u5024\u3092\u51fa\u529b } catch ( const std :: runtime_error & e ) { // what() \u3067\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97 std :: cout << e . what () << std :: endl ; } \u4f8b\u5916\u306e\u9001\u51fa\u306f throw \u3067\u884c\u3044\u307e\u3059\u3002 \u3053\u306e\u4f8b\u3067\u306f\u6570\u5024\u3067\u306f\u306a\u3044\u6587\u5b57\u304c\u3042\u308b\u5834\u5408\u306b\u30a8\u30e9\u30fc\u3068\u3057\u3066 \u4f8b\u5916 std::runtime_error \u3092\u9001\u51fa\u3057\u3001 \u6b8b\u3063\u3066\u3044\u308b\u6587\u5b57\u306e\u5909\u63db\u51e6\u7406\u306f\u884c\u308f\u305a\u306b\u30a8\u30e9\u30fc\u767a\u751f\u6642\u7528\u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 try \u30d6\u30ed\u30c3\u30af\u5185\u3067\u9001\u51fa\u3057\u305f\u4f8b\u5916\u306f catch \u30d6\u30ed\u30c3\u30af\u3067\u6355\u6349\u3057\u307e\u3059\u3002 \u3053\u306e\u4f8b\u3067\u306f\u4f8b\u5916 std::runtime_error \u304c\u9001\u51fa\u3055\u308c\u305f\u5834\u5408\u306b \u53c2\u7167 e \u3067\u53d7\u3051\u3066 e.what() \u3067\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002 \u4f8b\u5916\u306e\u578b \u00b6 \u4f8b\u5916\u306b\u306f\u3042\u3089\u3086\u308b\u578b\u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 try { throw 123 ; } catch ( const int v ) { std :: cout << v << std :: endl ; } \u901a\u5e38\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f8b\u5916\u30af\u30e9\u30b9\u3084\u305d\u308c\u3092\u7d99\u627f\u3057\u305f\u30e6\u30fc\u30b6\u5b9a\u7fa9\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u578b\u306b\u5fdc\u3058\u305f\u6355\u6349 \u00b6 1\u3064\u306e try \u30d6\u30ed\u30c3\u30af\u306b\u5bfe\u3057\u3066 catch \u30d6\u30ed\u30c3\u30af\u306f\u8907\u6570\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u3063\u3066\u4f8b\u5916\u306e\u578b\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 try { throw 123 ; // int \u3092\u9001\u51fa } catch ( const bool v ) { // int \u306f bool \u3068\u306f\u7570\u306a\u308b\u578b\u3067\u3042\u308b\u305f\u3081\u6355\u6349\u3055\u308c\u306a\u3044 std :: cout << \"bool: \" << v << std :: endl ; } catch ( const int v ) { // \u3053\u3053\u3067\u6355\u6349\u3055\u308c\u308b std :: cout << \"int: \" << v << std :: endl ; } \u4f8b\u5916\u306e\u578b\u304c\u30af\u30e9\u30b9\u3067\u3042\u308b\u5834\u5408\u306b\u306f\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3092\u542b\u3081\u3066\u6355\u6349\u306f\u884c\u308f\u308c\u307e\u3059\u3002 \u6355\u6349\u306f\u4e0a\u304b\u3089\u9806\u306b\u78ba\u8a8d\u3057\u3066\u6700\u521d\u306b\u4e00\u81f4\u3057\u305f\u3082\u306e\u3060\u3051\u304c\u51e6\u7406\u3055\u308c\u307e\u3059\u3002 try { throw std :: runtime_error ( \"test\" ); // std::runtime_error \u3092\u9001\u51fa } catch ( const std :: exception & e ) { // std::runtime_error \u306f std::exception \u306e\u6d3e\u751f\u30af\u30e9\u30b9\u3067\u3042\u308b\u305f\u3081\u3053\u3053\u3067\u6355\u6349\u3055\u308c\u308b std :: cout << \"std::exception: \" << e . what () << std :: endl ; } catch ( const std :: runtime_error & e ) { // \u3053\u306e\u51e6\u7406\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044 std :: cout << \"std::runtime_error: \" << e . what () << std :: endl ; } catch (...) \u3068\u8a18\u8f09\u3059\u308b\u3053\u3068\u3067\u3042\u3089\u3086\u308b\u4f8b\u5916\u3092\u6355\u6349\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e catch \u30d6\u30ed\u30c3\u30af\u3067\u306f\u4f8b\u5916\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 try { throw 123 ; } catch (...) { std :: cout << \"Unexpected exception was thrown.\" << std :: endl ; } \u95a2\u6570\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa \u00b6 \u95a2\u6570\u5185\u3067\u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u306a\u3044\u5834\u5408\u3001 \u6355\u6349\u3055\u308c\u308b\u307e\u3067\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u5143\u3092\u9806\u306b\u8fbf\u3063\u3066\u3044\u304d\u307e\u3059\u3002 \u6b63\u306e\u6574\u6570\u3092\u8868\u3059 std::string \u3092 int \u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u3092\u95a2\u6570\u5316\u3057\u3001 \u7121\u52b9\u306a\u6587\u5b57\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u95a2\u6570\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 int StringToInt ( const std :: string & str ) { int num = 0 ; for ( const auto s : str ) { num *= 10 ; switch ( s ) { case '0' : num += 0 ; break ; case '1' : num += 1 ; break ; case '2' : num += 2 ; break ; case '3' : num += 3 ; break ; case '4' : num += 4 ; break ; case '5' : num += 5 ; break ; case '6' : num += 6 ; break ; case '7' : num += 7 ; break ; case '8' : num += 8 ; break ; case '9' : num += 9 ; break ; default : throw std :: runtime_error ( \"\u6570\u5024\u3067\u306f\u306a\u3044\u6587\u5b57\u304c\u5165\u3063\u3066\u3044\u307e\u3059\" ); } } return num ; } \u3053\u306e\u95a2\u6570\u5185\u3067\u306f\u4f8b\u5916\u3092\u6355\u6349\u3057\u306a\u3044\u305f\u3081 try \u30d6\u30ed\u30c3\u30af\u304c\u3042\u308a\u307e\u305b\u3093\u3002 \u547c\u3073\u51fa\u3057\u5143\u3067\u6355\u6349\u3059\u308b\u305f\u3081\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 std :: string str = \"123XY56\" ; try { auto num = StringToInt ( str ); std :: cout << num << std :: endl ; } catch ( const std :: runtime_error & e ) { std :: cout << e . what () << std :: endl ; } \u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u306e\u306f\u547c\u3073\u51fa\u3059\u95a2\u6570\u306e\u5185\u90e8\u3067\u3042\u308b\u305f\u3081\u3001 \u3053\u306e try \u30d6\u30ed\u30c3\u30af\u306b\u306f throw \u304c\u3042\u308a\u307e\u305b\u3093\u3002 1\u6587\u5b57\u305a\u3064\u306e\u6570\u5024\u3078\u306e\u5909\u63db\u51e6\u7406\u3092\u95a2\u6570\u5316\u3059\u308b\u3068\u3001 \u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u308b\u307e\u3067\u306e\u9593\u306b\u95a2\u6570\u547c\u3073\u51fa\u3057\u30922\u56de\u9061\u308a\u307e\u3059\u3002 exception.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <iostream> #include <string> int CharToInt ( const char c ) { switch ( c ) { case '0' : return 0 ; case '1' : return 1 ; case '2' : return 2 ; case '3' : return 3 ; case '4' : return 4 ; case '5' : return 5 ; case '6' : return 6 ; case '7' : return 7 ; case '8' : return 8 ; case '9' : return 9 ; default : // \u95a2\u6570\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa throw std :: runtime_error ( \"\u6570\u5024\u3067\u306f\u306a\u3044\u6587\u5b57\u304c\u5165\u3063\u3066\u3044\u307e\u3059\" ); } } int StringToInt ( const std :: string & str ) { int num = 0 ; for ( const auto s : str ) { num *= 10 ; // CharToInt \u304b\u3089\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u308b num += CharToInt ( s ); } return num ; } int main () { std :: string str = \"123XY56\" ; try { // StringToInt \u5185\u90e8\u306e CharToInt \u304b\u3089\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u308b auto num = StringToInt ( str ); std :: cout << num << std :: endl ; } catch ( const std :: runtime_error & e ) { std :: cout << e . what () << std :: endl ; } return 0 ; } \u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u306a\u3044\u5834\u5408 \u00b6 \u9001\u51fa\u3055\u308c\u305f\u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u306a\u3044\u5834\u5408\u3001 std::terminate \u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7570\u5e38\u7d42\u4e86\u3057\u307e\u3059\u3002 int main () { std :: string str = \"123XY56\" ; auto num = StringToInt ( str ); std :: cout << num << std :: endl ; return 0 ; } noexcept \u00b6 \u95a2\u6570\u304c\u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3044\u3053\u3068\u3092\u660e\u793a\u7684\u306b\u8868\u3059\u306b\u306f noexcept \u3092\u3064\u3051\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u6697\u9ed9\u7684\u306b noexcept \u306b\u306a\u308a\u307e\u3059\u3002 int Compare ( int a , int b ) noexcept { if ( a < b ) { return - 1 ; } else if ( a > b ) { return 1 ; } else { // a == b return 0 ; } } noexcept \u306b\u306f\u6761\u4ef6\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 int Compare ( int a , int b ) noexcept ( true ); // \u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3044 int CharToInt ( const char c ) noexcept ( false ); // \u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b noexcept \u5185\u3067 noexcept \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001 \u4ed6\u306e\u95a2\u6570\u304c noexcept \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u6761\u4ef6\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 int StringToInt ( const std :: string & str ) noexcept ( noexcept ( CharToInt ( char ()))); noexcept \u6307\u5b9a\u3055\u308c\u305f\u95a2\u6570\u304b\u3089\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u305f\u5834\u5408\u3001 std::terminate \u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7570\u5e38\u7d42\u4e86\u3057\u307e\u3059\u3002 \u975e\u63a8\u5968\u306e\u52d5\u7684\u4f8b\u5916\u4ed5\u69d8 \u95a2\u6570\u304b\u3089\u9001\u51fa\u3055\u308c\u308b\u4f8b\u5916\u3092\u5217\u6319\u3059\u308b\u305f\u3081\u306e throw \u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u304c\u3001 C++11 \u3067\u306f\u975e\u63a8\u5968\u3068\u306a\u3063\u3066\u304a\u308a C++17 \u3067\u306f\u524a\u9664\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 int CharToInt ( const char c ) throw ( std :: runtime_error ); \u8a73\u7d30\u306f \u975e\u63a8\u5968\u3060\u3063\u305f\u53e4\u3044\u4f8b\u5916\u4ed5\u69d8\u3092\u524a\u9664 - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f8b\u5916\u30af\u30e9\u30b9 \u00b6 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f8b\u5916\u30af\u30e9\u30b9\u306e\u4e00\u90e8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u4e00\u89a7\u306f std::exception - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 std::logic_error \u3068 std::runtime_error \u306e\u9055\u3044 \u4e00\u822c\u306b \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u524d\u306b\u691c\u51fa\u53ef\u80fd\u306a\u3082\u306e\u306f std::logic_error \u3001 \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u306e\u307f\u691c\u51fa\u53ef\u80fd\u306a\u3082\u306e\u306f std::runtime_error \u3068\u3057\u3066\u5206\u985e\u3055\u308c\u3066\u3044\u307e\u3059\u3002 std::exception \u00b6 \u3059\u3079\u3066\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f8b\u5916\u30af\u30e9\u30b9\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3067\u3059\u3002 \u3053\u306e\u30af\u30e9\u30b9\u3067\u4f8b\u5916\u3092\u6355\u6349\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f8b\u5916\u30af\u30e9\u30b9\u3092\u3059\u3079\u3066\u6355\u6349\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 int main () { std :: string str = \"123XY56\" ; try { auto num = StringToInt ( str ); // std::runtime_error \u3092\u9001\u51fa std :: cout << num << std :: endl ; } catch ( const std :: exception & e ) { // std::exception \u3067 std::runtime_error \u3092\u6355\u6349 std :: cout << e . what () << std :: endl ; } return 0 ; } std::logic_error \u00b6 \u524d\u63d0\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u306a\u3044\u306a\u3069\u8ad6\u7406\u30a8\u30e9\u30fc\u3092\u8868\u3059\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067 std::logic_error \u3092\u9001\u51fa\u3059\u308b\u3082\u306e\u306f\u3042\u308a\u307e\u305b\u3093\u3002 std::invalid_argument \u00b6 \u95a2\u6570\u306e\u5b9f\u5f15\u6570\u304c\u4e0d\u6b63\u306a\u5024\u3067\u3042\u308b\u5834\u5408\u306e\u8ad6\u7406\u30a8\u30e9\u30fc\u3092\u8868\u3059\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002 std::bitset \u3067\u5909\u63db\u3067\u304d\u306a\u3044\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306a\u3069\u306b\u9001\u51fa\u3055\u308c\u307e\u3059\u3002 try { std :: bitset < 8 > b ( \"0000x111\" ); // \u4e0d\u6b63\u306a\u6587\u5b57 x \u3092\u542b\u3093\u3067\u3044\u308b std :: cout << b << std :: endl ; } catch ( const std :: invalid_argument & e ) { std :: cout << \"std::invalid_argument \u3092\u6355\u6349\" << std :: endl ; std :: cout << e . what () << std :: endl ; } std::bitset \u3067\u306f\u6587\u5b57\u5217\u304b\u30892\u9032\u6570\u6570\u5024\u3078\u306e\u5909\u63db\u51e6\u7406\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002 \u4e00\u822c\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u623b\u308a\u5024\u304c\u306a\u3044\u305f\u3081\u3001\u623b\u308a\u5024\u306b\u3088\u3063\u3066\u30a8\u30e9\u30fc\u6709\u7121\u3092\u5224\u65ad\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u306f\u3001\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 std::out_of_range \u00b6 \u914d\u5217\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u8981\u7d20\u53c2\u7167\u3067 \u7bc4\u56f2\u5916\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306e\u8ad6\u7406\u30a8\u30e9\u30fc\u3092\u8868\u3059\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002 std::vector \u306e at() \u3067\u7bc4\u56f2\u5916\u306e\u8981\u7d20\u3092\u53c2\u7167\u3057\u3088\u3046\u3068\u3057\u305f\u5834\u5408\u306a\u3069\u306b\u9001\u51fa\u3055\u308c\u307e\u3059\u3002 std :: vector < int > x = { 1 , 2 , 3 , 4 , 5 }; // \u8981\u7d20\u6570\u304c 5 \u306e\u30d9\u30af\u30bf try { int a = x . at ( 5 ); // at() \u3067\u8981\u7d20\u53c2\u7167 std :: cout << \"5\u756a\u76ee\u306e\u5024: \" << a << std :: endl ; } catch ( const std :: out_of_range & e ) { std :: cout << \"std::out_of_range \u3092\u6355\u6349\" << std :: endl ; std :: cout << e . what () << std :: endl ; } std::vector \u306e [] \u3067\u7bc4\u56f2\u5916\u306e\u8981\u7d20\u3092\u53c2\u7167\u3057\u3088\u3046\u3068\u3057\u305f\u5834\u5408\u306b\u306f\u4f8b\u5916\u306f\u9001\u51fa\u3055\u308c\u307e\u305b\u3093\u3002 std :: vector < int > x = { 1 , 2 , 3 , 4 , 5 }; // \u8981\u7d20\u6570\u304c 5 \u306e\u30d9\u30af\u30bf try { int a = x [ 5 ]; // [] \u3067\u8981\u7d20\u53c2\u7167 std :: cout << \"5\u756a\u76ee\u306e\u5024: \" << a << std :: endl ; // \u4e0d\u5b9a\u5024\u304c\u51fa\u529b\u3055\u308c\u308b } catch (...) { std :: cout << \"\u4f8b\u5916\u3092\u6355\u6349\" << std :: endl ; // \u4f8b\u5916\u306f\u9001\u51fa\u3055\u308c\u306a\u3044\u305f\u3081\u5b9f\u884c\u3055\u308c\u306a\u3044 } \u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u9055\u53cd \u3053\u306e\u4f8b\u3067 [] \u3067\u7bc4\u56f2\u5916\u306e\u8981\u7d20\u53c2\u7167\u3092\u3059\u308b\u969b\u306b \u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u9055\u53cd\u304c\u767a\u751f\u3057\u3066 OS \u306b\u3088\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7d42\u4e86\u3055\u308c\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002 std::runtime_error \u00b6 \u5b9f\u884c\u6642\u306b\u8a55\u4fa1\u3059\u308b\u5024\u306e\u4e0d\u6b63\u3084\u5b9f\u884c\u74b0\u5883\u306e\u554f\u984c\u306a\u3069 \u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3092\u8868\u3059\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002 std::bad_cast \u00b6 dynamic_cast \u3067\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u9001\u51fa\u3055\u308c\u307e\u3059\u3002 dynamic_cast \u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u4f8b\u5916 \u00b6 \u4f8b\u5916\u3092\u9001\u51fa\u3057\u3066\u6355\u6349\u3059\u308b\u307e\u3067\u306e\u9593\u306b\u3001 \u3055\u3089\u306b\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3068 std::terminate \u304c\u547c\u3073\u51fa\u3055\u308c\u3066 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7570\u5e38\u7d42\u4e86\u3057\u307e\u3059\u3002 \u3053\u306e\u4e8b\u8c61\u306f\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3068\u767a\u751f\u3057\u307e\u3059\u3002 \u4f8b\u5916\u3092\u9001\u51fa\u3057\u305f\u5834\u5408\u3001 \u305d\u306e\u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u308b\u307e\u3067\u306b\u751f\u5b58\u671f\u9593\u304c\u7d42\u4e86\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3073\u51fa\u3057\u3066\u7834\u68c4\u3055\u308c\u307e\u3059\u3002 #include <iostream> class DestructorAndException { public : ~ DestructorAndException () { // \u4f8b\u5916\u3092\u9001\u51fa\u3057\u3066\u6355\u6349\u3059\u308b\u307e\u3067\u306e\u9593\u306b\u5b9f\u884c\u3055\u308c\u308b std :: cout << \"~DestructorAndException() is called.\" << std :: endl ; } }; int main () { try { DestructorAndException obj ; throw std :: runtime_error ( \"main()\" ); } catch ( const std :: exception & e ) { std :: cout << e . what () << std :: endl ; } return 0 ; } \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3068\u3001 \u300c\u4f8b\u5916\u3092\u9001\u51fa\u3057\u3066\u6355\u6349\u3059\u308b\u307e\u3067\u306e\u9593\u306b\u3001\u3055\u3089\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u300d\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001 std::terminate \u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7570\u5e38\u7d42\u4e86\u3057\u307e\u3059\u3002 #include <iostream> class DestructorAndException { public : // \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u6697\u9ed9\u7684\u306b noexcept \u306b\u306a\u308b\u305f\u3081 noexcept(false) \u3092\u660e\u793a\u7684\u306b\u6307\u5b9a ~ DestructorAndException () noexcept ( false ) { // \u4f8b\u5916\u3092\u9001\u51fa\u3057\u3066\u6355\u6349\u3059\u308b\u307e\u3067\u306e\u9593\u306b\u5b9f\u884c\u3055\u308c\u308b std :: cout << \"~DestructorAndException() is called.\" << std :: endl ; // \u3055\u3089\u306b\u4f8b\u5916\u3092\u9001\u51fa throw std :: runtime_error ( \"~DestructorAndException()\" ); } }; int main () { try { DestructorAndException obj ; throw std :: runtime_error ( \"main()\" ); } catch ( const std :: exception & e ) { std :: cout << e . what () << std :: endl ; } return 0 ; } \u3053\u3046\u3057\u305f\u6319\u52d5\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3001 \u4e00\u822c\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u306f\u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002","title":"10.1 \u4f8b\u5916\u51e6\u7406"},{"location":"ch10-01-exceptions/#_1","text":"\u4f8b\u5916\u51e6\u7406\u3068\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u4e2d\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u3001 \u5f8c\u7d9a\u306e\u51e6\u7406\u3092\u884c\u3046\u306e\u3092\u3084\u3081\u3066\u30a8\u30e9\u30fc\u767a\u751f\u6642\u7528\u306e\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u306e\u6a5f\u80fd\u3067\u3059\u3002 \u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u898f\u7d04\u306b\u3088\u308b\u4f8b\u5916\u51e6\u7406\u306e\u4f7f\u7528\u7981\u6b62 C++ \u306b\u304a\u3051\u308b\u4f8b\u5916\u51e6\u7406\u306f\u554f\u984c\u70b9\u304c\u591a\u304f\u3001 Google C++ Style Guide \u3084 LLVM Coding Standards \u3067\u306f\u4f8b\u5916\u51e6\u7406\u306e\u4f7f\u7528\u3092\u539f\u5247\u7981\u6b62\u3057\u3066\u3044\u307e\u3059\u3002 \u4f8b\u5916\u51e6\u7406\u306b\u304a\u3044\u3066\u30a8\u30e9\u30fc\u3092\u8868\u3059\u3082\u306e\u4f8b\u5916\u3068\u3044\u3044\u307e\u3059\u3002 \u4f8b\u5916\u51e6\u7406\u306f\u6b21\u306e2\u3064\u306e\u6bb5\u968e\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\u3002 \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3059\u308b\u7b87\u6240\u3067\u4f8b\u5916\u3092\u9001\u51fa\u3057\u3001\u5f8c\u7d9a\u306e\u51e6\u7406\u3092\u884c\u3046\u306e\u3092\u3084\u3081\u308b \u9001\u51fa\u3055\u308c\u305f\u4f8b\u5916\u3092\u6355\u6349\u3057\u3001\u30a8\u30e9\u30fc\u767a\u751f\u6642\u7528\u306e\u51e6\u7406\u3092\u884c\u3046 \u6b63\u306e\u6574\u6570\u3092\u8868\u3059 std::string \u3092 int \u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u306b\u304a\u3044\u3066\u3001 \u7121\u52b9\u306a\u6587\u5b57\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u5909\u63db\u51e6\u7406\u3092\u3084\u3081\u3066\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\u3059\u308b\u306b\u306f \u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 std :: string str = \"123XY56\" ; try { int num = 0 ; for ( const auto s : str ) { num *= 10 ; switch ( s ) { case '0' : num += 0 ; break ; case '1' : num += 1 ; break ; case '2' : num += 2 ; break ; case '3' : num += 3 ; break ; case '4' : num += 4 ; break ; case '5' : num += 5 ; break ; case '6' : num += 6 ; break ; case '7' : num += 7 ; break ; case '8' : num += 8 ; break ; case '9' : num += 9 ; break ; default : // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3067\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a2d\u5b9a throw std :: runtime_error ( \"\u6570\u5024\u3067\u306f\u306a\u3044\u6587\u5b57\u304c\u5165\u3063\u3066\u3044\u307e\u3059\" ); } } std :: cout << num << std :: endl ; // \u554f\u984c\u306a\u304f\u5909\u63db\u3067\u304d\u305f\u5834\u5408\u306b\u306f\u5909\u63db\u5f8c\u306e\u5024\u3092\u51fa\u529b } catch ( const std :: runtime_error & e ) { // what() \u3067\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97 std :: cout << e . what () << std :: endl ; } \u4f8b\u5916\u306e\u9001\u51fa\u306f throw \u3067\u884c\u3044\u307e\u3059\u3002 \u3053\u306e\u4f8b\u3067\u306f\u6570\u5024\u3067\u306f\u306a\u3044\u6587\u5b57\u304c\u3042\u308b\u5834\u5408\u306b\u30a8\u30e9\u30fc\u3068\u3057\u3066 \u4f8b\u5916 std::runtime_error \u3092\u9001\u51fa\u3057\u3001 \u6b8b\u3063\u3066\u3044\u308b\u6587\u5b57\u306e\u5909\u63db\u51e6\u7406\u306f\u884c\u308f\u305a\u306b\u30a8\u30e9\u30fc\u767a\u751f\u6642\u7528\u306e\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\u3002 try \u30d6\u30ed\u30c3\u30af\u5185\u3067\u9001\u51fa\u3057\u305f\u4f8b\u5916\u306f catch \u30d6\u30ed\u30c3\u30af\u3067\u6355\u6349\u3057\u307e\u3059\u3002 \u3053\u306e\u4f8b\u3067\u306f\u4f8b\u5916 std::runtime_error \u304c\u9001\u51fa\u3055\u308c\u305f\u5834\u5408\u306b \u53c2\u7167 e \u3067\u53d7\u3051\u3066 e.what() \u3067\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3057\u3066\u51fa\u529b\u3057\u307e\u3059\u3002","title":"\u4f8b\u5916\u51e6\u7406"},{"location":"ch10-01-exceptions/#_2","text":"\u4f8b\u5916\u306b\u306f\u3042\u3089\u3086\u308b\u578b\u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 try { throw 123 ; } catch ( const int v ) { std :: cout << v << std :: endl ; } \u901a\u5e38\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f8b\u5916\u30af\u30e9\u30b9\u3084\u305d\u308c\u3092\u7d99\u627f\u3057\u305f\u30e6\u30fc\u30b6\u5b9a\u7fa9\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"\u4f8b\u5916\u306e\u578b"},{"location":"ch10-01-exceptions/#_3","text":"1\u3064\u306e try \u30d6\u30ed\u30c3\u30af\u306b\u5bfe\u3057\u3066 catch \u30d6\u30ed\u30c3\u30af\u306f\u8907\u6570\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u306b\u3088\u3063\u3066\u4f8b\u5916\u306e\u578b\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 try { throw 123 ; // int \u3092\u9001\u51fa } catch ( const bool v ) { // int \u306f bool \u3068\u306f\u7570\u306a\u308b\u578b\u3067\u3042\u308b\u305f\u3081\u6355\u6349\u3055\u308c\u306a\u3044 std :: cout << \"bool: \" << v << std :: endl ; } catch ( const int v ) { // \u3053\u3053\u3067\u6355\u6349\u3055\u308c\u308b std :: cout << \"int: \" << v << std :: endl ; } \u4f8b\u5916\u306e\u578b\u304c\u30af\u30e9\u30b9\u3067\u3042\u308b\u5834\u5408\u306b\u306f\u30a2\u30c3\u30d7\u30ad\u30e3\u30b9\u30c8\u3092\u542b\u3081\u3066\u6355\u6349\u306f\u884c\u308f\u308c\u307e\u3059\u3002 \u6355\u6349\u306f\u4e0a\u304b\u3089\u9806\u306b\u78ba\u8a8d\u3057\u3066\u6700\u521d\u306b\u4e00\u81f4\u3057\u305f\u3082\u306e\u3060\u3051\u304c\u51e6\u7406\u3055\u308c\u307e\u3059\u3002 try { throw std :: runtime_error ( \"test\" ); // std::runtime_error \u3092\u9001\u51fa } catch ( const std :: exception & e ) { // std::runtime_error \u306f std::exception \u306e\u6d3e\u751f\u30af\u30e9\u30b9\u3067\u3042\u308b\u305f\u3081\u3053\u3053\u3067\u6355\u6349\u3055\u308c\u308b std :: cout << \"std::exception: \" << e . what () << std :: endl ; } catch ( const std :: runtime_error & e ) { // \u3053\u306e\u51e6\u7406\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044 std :: cout << \"std::runtime_error: \" << e . what () << std :: endl ; } catch (...) \u3068\u8a18\u8f09\u3059\u308b\u3053\u3068\u3067\u3042\u3089\u3086\u308b\u4f8b\u5916\u3092\u6355\u6349\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e catch \u30d6\u30ed\u30c3\u30af\u3067\u306f\u4f8b\u5916\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 try { throw 123 ; } catch (...) { std :: cout << \"Unexpected exception was thrown.\" << std :: endl ; }","title":"\u578b\u306b\u5fdc\u3058\u305f\u6355\u6349"},{"location":"ch10-01-exceptions/#_4","text":"\u95a2\u6570\u5185\u3067\u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u306a\u3044\u5834\u5408\u3001 \u6355\u6349\u3055\u308c\u308b\u307e\u3067\u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\u5143\u3092\u9806\u306b\u8fbf\u3063\u3066\u3044\u304d\u307e\u3059\u3002 \u6b63\u306e\u6574\u6570\u3092\u8868\u3059 std::string \u3092 int \u306b\u5909\u63db\u3059\u308b\u51e6\u7406\u3092\u95a2\u6570\u5316\u3057\u3001 \u7121\u52b9\u306a\u6587\u5b57\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u95a2\u6570\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 int StringToInt ( const std :: string & str ) { int num = 0 ; for ( const auto s : str ) { num *= 10 ; switch ( s ) { case '0' : num += 0 ; break ; case '1' : num += 1 ; break ; case '2' : num += 2 ; break ; case '3' : num += 3 ; break ; case '4' : num += 4 ; break ; case '5' : num += 5 ; break ; case '6' : num += 6 ; break ; case '7' : num += 7 ; break ; case '8' : num += 8 ; break ; case '9' : num += 9 ; break ; default : throw std :: runtime_error ( \"\u6570\u5024\u3067\u306f\u306a\u3044\u6587\u5b57\u304c\u5165\u3063\u3066\u3044\u307e\u3059\" ); } } return num ; } \u3053\u306e\u95a2\u6570\u5185\u3067\u306f\u4f8b\u5916\u3092\u6355\u6349\u3057\u306a\u3044\u305f\u3081 try \u30d6\u30ed\u30c3\u30af\u304c\u3042\u308a\u307e\u305b\u3093\u3002 \u547c\u3073\u51fa\u3057\u5143\u3067\u6355\u6349\u3059\u308b\u305f\u3081\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 std :: string str = \"123XY56\" ; try { auto num = StringToInt ( str ); std :: cout << num << std :: endl ; } catch ( const std :: runtime_error & e ) { std :: cout << e . what () << std :: endl ; } \u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u306e\u306f\u547c\u3073\u51fa\u3059\u95a2\u6570\u306e\u5185\u90e8\u3067\u3042\u308b\u305f\u3081\u3001 \u3053\u306e try \u30d6\u30ed\u30c3\u30af\u306b\u306f throw \u304c\u3042\u308a\u307e\u305b\u3093\u3002 1\u6587\u5b57\u305a\u3064\u306e\u6570\u5024\u3078\u306e\u5909\u63db\u51e6\u7406\u3092\u95a2\u6570\u5316\u3059\u308b\u3068\u3001 \u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u308b\u307e\u3067\u306e\u9593\u306b\u95a2\u6570\u547c\u3073\u51fa\u3057\u30922\u56de\u9061\u308a\u307e\u3059\u3002 exception.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #include <iostream> #include <string> int CharToInt ( const char c ) { switch ( c ) { case '0' : return 0 ; case '1' : return 1 ; case '2' : return 2 ; case '3' : return 3 ; case '4' : return 4 ; case '5' : return 5 ; case '6' : return 6 ; case '7' : return 7 ; case '8' : return 8 ; case '9' : return 9 ; default : // \u95a2\u6570\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa throw std :: runtime_error ( \"\u6570\u5024\u3067\u306f\u306a\u3044\u6587\u5b57\u304c\u5165\u3063\u3066\u3044\u307e\u3059\" ); } } int StringToInt ( const std :: string & str ) { int num = 0 ; for ( const auto s : str ) { num *= 10 ; // CharToInt \u304b\u3089\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u308b num += CharToInt ( s ); } return num ; } int main () { std :: string str = \"123XY56\" ; try { // StringToInt \u5185\u90e8\u306e CharToInt \u304b\u3089\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u308b auto num = StringToInt ( str ); std :: cout << num << std :: endl ; } catch ( const std :: runtime_error & e ) { std :: cout << e . what () << std :: endl ; } return 0 ; }","title":"\u95a2\u6570\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa"},{"location":"ch10-01-exceptions/#_5","text":"\u9001\u51fa\u3055\u308c\u305f\u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u306a\u3044\u5834\u5408\u3001 std::terminate \u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7570\u5e38\u7d42\u4e86\u3057\u307e\u3059\u3002 int main () { std :: string str = \"123XY56\" ; auto num = StringToInt ( str ); std :: cout << num << std :: endl ; return 0 ; }","title":"\u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u306a\u3044\u5834\u5408"},{"location":"ch10-01-exceptions/#noexcept","text":"\u95a2\u6570\u304c\u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3044\u3053\u3068\u3092\u660e\u793a\u7684\u306b\u8868\u3059\u306b\u306f noexcept \u3092\u3064\u3051\u307e\u3059\u3002 \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u6697\u9ed9\u7684\u306b noexcept \u306b\u306a\u308a\u307e\u3059\u3002 int Compare ( int a , int b ) noexcept { if ( a < b ) { return - 1 ; } else if ( a > b ) { return 1 ; } else { // a == b return 0 ; } } noexcept \u306b\u306f\u6761\u4ef6\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 int Compare ( int a , int b ) noexcept ( true ); // \u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3044 int CharToInt ( const char c ) noexcept ( false ); // \u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b noexcept \u5185\u3067 noexcept \u3092\u4f7f\u7528\u3059\u308b\u3068\u3001 \u4ed6\u306e\u95a2\u6570\u304c noexcept \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u6761\u4ef6\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 int StringToInt ( const std :: string & str ) noexcept ( noexcept ( CharToInt ( char ()))); noexcept \u6307\u5b9a\u3055\u308c\u305f\u95a2\u6570\u304b\u3089\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u305f\u5834\u5408\u3001 std::terminate \u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7570\u5e38\u7d42\u4e86\u3057\u307e\u3059\u3002 \u975e\u63a8\u5968\u306e\u52d5\u7684\u4f8b\u5916\u4ed5\u69d8 \u95a2\u6570\u304b\u3089\u9001\u51fa\u3055\u308c\u308b\u4f8b\u5916\u3092\u5217\u6319\u3059\u308b\u305f\u3081\u306e throw \u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u3042\u308a\u307e\u3059\u304c\u3001 C++11 \u3067\u306f\u975e\u63a8\u5968\u3068\u306a\u3063\u3066\u304a\u308a C++17 \u3067\u306f\u524a\u9664\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002 int CharToInt ( const char c ) throw ( std :: runtime_error ); \u8a73\u7d30\u306f \u975e\u63a8\u5968\u3060\u3063\u305f\u53e4\u3044\u4f8b\u5916\u4ed5\u69d8\u3092\u524a\u9664 - cpprefjp C++\u65e5\u672c\u8a9e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"noexcept"},{"location":"ch10-01-exceptions/#_6","text":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f8b\u5916\u30af\u30e9\u30b9\u306e\u4e00\u90e8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 \u4e00\u89a7\u306f std::exception - cppreference.com \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 std::logic_error \u3068 std::runtime_error \u306e\u9055\u3044 \u4e00\u822c\u306b \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u524d\u306b\u691c\u51fa\u53ef\u80fd\u306a\u3082\u306e\u306f std::logic_error \u3001 \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u6642\u306b\u306e\u307f\u691c\u51fa\u53ef\u80fd\u306a\u3082\u306e\u306f std::runtime_error \u3068\u3057\u3066\u5206\u985e\u3055\u308c\u3066\u3044\u307e\u3059\u3002","title":"\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f8b\u5916\u30af\u30e9\u30b9"},{"location":"ch10-01-exceptions/#stdexception","text":"\u3059\u3079\u3066\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f8b\u5916\u30af\u30e9\u30b9\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3067\u3059\u3002 \u3053\u306e\u30af\u30e9\u30b9\u3067\u4f8b\u5916\u3092\u6355\u6349\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f8b\u5916\u30af\u30e9\u30b9\u3092\u3059\u3079\u3066\u6355\u6349\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 int main () { std :: string str = \"123XY56\" ; try { auto num = StringToInt ( str ); // std::runtime_error \u3092\u9001\u51fa std :: cout << num << std :: endl ; } catch ( const std :: exception & e ) { // std::exception \u3067 std::runtime_error \u3092\u6355\u6349 std :: cout << e . what () << std :: endl ; } return 0 ; }","title":"std::exception"},{"location":"ch10-01-exceptions/#stdlogic_error","text":"\u524d\u63d0\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u306a\u3044\u306a\u3069\u8ad6\u7406\u30a8\u30e9\u30fc\u3092\u8868\u3059\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002 \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067 std::logic_error \u3092\u9001\u51fa\u3059\u308b\u3082\u306e\u306f\u3042\u308a\u307e\u305b\u3093\u3002","title":"std::logic_error"},{"location":"ch10-01-exceptions/#stdinvalid_argument","text":"\u95a2\u6570\u306e\u5b9f\u5f15\u6570\u304c\u4e0d\u6b63\u306a\u5024\u3067\u3042\u308b\u5834\u5408\u306e\u8ad6\u7406\u30a8\u30e9\u30fc\u3092\u8868\u3059\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002 std::bitset \u3067\u5909\u63db\u3067\u304d\u306a\u3044\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306a\u3069\u306b\u9001\u51fa\u3055\u308c\u307e\u3059\u3002 try { std :: bitset < 8 > b ( \"0000x111\" ); // \u4e0d\u6b63\u306a\u6587\u5b57 x \u3092\u542b\u3093\u3067\u3044\u308b std :: cout << b << std :: endl ; } catch ( const std :: invalid_argument & e ) { std :: cout << \"std::invalid_argument \u3092\u6355\u6349\" << std :: endl ; std :: cout << e . what () << std :: endl ; } std::bitset \u3067\u306f\u6587\u5b57\u5217\u304b\u30892\u9032\u6570\u6570\u5024\u3078\u306e\u5909\u63db\u51e6\u7406\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002 \u4e00\u822c\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u306f\u623b\u308a\u5024\u304c\u306a\u3044\u305f\u3081\u3001\u623b\u308a\u5024\u306b\u3088\u3063\u3066\u30a8\u30e9\u30fc\u6709\u7121\u3092\u5224\u65ad\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 \u305d\u306e\u305f\u3081\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u306f\u3001\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002","title":"std::invalid_argument"},{"location":"ch10-01-exceptions/#stdout_of_range","text":"\u914d\u5217\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u8981\u7d20\u53c2\u7167\u3067 \u7bc4\u56f2\u5916\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306e\u8ad6\u7406\u30a8\u30e9\u30fc\u3092\u8868\u3059\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002 std::vector \u306e at() \u3067\u7bc4\u56f2\u5916\u306e\u8981\u7d20\u3092\u53c2\u7167\u3057\u3088\u3046\u3068\u3057\u305f\u5834\u5408\u306a\u3069\u306b\u9001\u51fa\u3055\u308c\u307e\u3059\u3002 std :: vector < int > x = { 1 , 2 , 3 , 4 , 5 }; // \u8981\u7d20\u6570\u304c 5 \u306e\u30d9\u30af\u30bf try { int a = x . at ( 5 ); // at() \u3067\u8981\u7d20\u53c2\u7167 std :: cout << \"5\u756a\u76ee\u306e\u5024: \" << a << std :: endl ; } catch ( const std :: out_of_range & e ) { std :: cout << \"std::out_of_range \u3092\u6355\u6349\" << std :: endl ; std :: cout << e . what () << std :: endl ; } std::vector \u306e [] \u3067\u7bc4\u56f2\u5916\u306e\u8981\u7d20\u3092\u53c2\u7167\u3057\u3088\u3046\u3068\u3057\u305f\u5834\u5408\u306b\u306f\u4f8b\u5916\u306f\u9001\u51fa\u3055\u308c\u307e\u305b\u3093\u3002 std :: vector < int > x = { 1 , 2 , 3 , 4 , 5 }; // \u8981\u7d20\u6570\u304c 5 \u306e\u30d9\u30af\u30bf try { int a = x [ 5 ]; // [] \u3067\u8981\u7d20\u53c2\u7167 std :: cout << \"5\u756a\u76ee\u306e\u5024: \" << a << std :: endl ; // \u4e0d\u5b9a\u5024\u304c\u51fa\u529b\u3055\u308c\u308b } catch (...) { std :: cout << \"\u4f8b\u5916\u3092\u6355\u6349\" << std :: endl ; // \u4f8b\u5916\u306f\u9001\u51fa\u3055\u308c\u306a\u3044\u305f\u3081\u5b9f\u884c\u3055\u308c\u306a\u3044 } \u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u9055\u53cd \u3053\u306e\u4f8b\u3067 [] \u3067\u7bc4\u56f2\u5916\u306e\u8981\u7d20\u53c2\u7167\u3092\u3059\u308b\u969b\u306b \u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u9055\u53cd\u304c\u767a\u751f\u3057\u3066 OS \u306b\u3088\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7d42\u4e86\u3055\u308c\u308b\u53ef\u80fd\u6027\u3082\u3042\u308a\u307e\u3059\u3002","title":"std::out_of_range"},{"location":"ch10-01-exceptions/#stdruntime_error","text":"\u5b9f\u884c\u6642\u306b\u8a55\u4fa1\u3059\u308b\u5024\u306e\u4e0d\u6b63\u3084\u5b9f\u884c\u74b0\u5883\u306e\u554f\u984c\u306a\u3069 \u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u3092\u8868\u3059\u305f\u3081\u306e\u30af\u30e9\u30b9\u3067\u3059\u3002","title":"std::runtime_error"},{"location":"ch10-01-exceptions/#stdbad_cast","text":"dynamic_cast \u3067\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u9001\u51fa\u3055\u308c\u307e\u3059\u3002 dynamic_cast \u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f \u30c0\u30a6\u30f3\u30ad\u30e3\u30b9\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"std::bad_cast"},{"location":"ch10-01-exceptions/#_7","text":"\u4f8b\u5916\u3092\u9001\u51fa\u3057\u3066\u6355\u6349\u3059\u308b\u307e\u3067\u306e\u9593\u306b\u3001 \u3055\u3089\u306b\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3068 std::terminate \u304c\u547c\u3073\u51fa\u3055\u308c\u3066 \u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7570\u5e38\u7d42\u4e86\u3057\u307e\u3059\u3002 \u3053\u306e\u4e8b\u8c61\u306f\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3068\u767a\u751f\u3057\u307e\u3059\u3002 \u4f8b\u5916\u3092\u9001\u51fa\u3057\u305f\u5834\u5408\u3001 \u305d\u306e\u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u308b\u307e\u3067\u306b\u751f\u5b58\u671f\u9593\u304c\u7d42\u4e86\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3073\u51fa\u3057\u3066\u7834\u68c4\u3055\u308c\u307e\u3059\u3002 #include <iostream> class DestructorAndException { public : ~ DestructorAndException () { // \u4f8b\u5916\u3092\u9001\u51fa\u3057\u3066\u6355\u6349\u3059\u308b\u307e\u3067\u306e\u9593\u306b\u5b9f\u884c\u3055\u308c\u308b std :: cout << \"~DestructorAndException() is called.\" << std :: endl ; } }; int main () { try { DestructorAndException obj ; throw std :: runtime_error ( \"main()\" ); } catch ( const std :: exception & e ) { std :: cout << e . what () << std :: endl ; } return 0 ; } \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3068\u3001 \u300c\u4f8b\u5916\u3092\u9001\u51fa\u3057\u3066\u6355\u6349\u3059\u308b\u307e\u3067\u306e\u9593\u306b\u3001\u3055\u3089\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u300d\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u3001 std::terminate \u304c\u547c\u3073\u51fa\u3055\u308c\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7570\u5e38\u7d42\u4e86\u3057\u307e\u3059\u3002 #include <iostream> class DestructorAndException { public : // \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u6697\u9ed9\u7684\u306b noexcept \u306b\u306a\u308b\u305f\u3081 noexcept(false) \u3092\u660e\u793a\u7684\u306b\u6307\u5b9a ~ DestructorAndException () noexcept ( false ) { // \u4f8b\u5916\u3092\u9001\u51fa\u3057\u3066\u6355\u6349\u3059\u308b\u307e\u3067\u306e\u9593\u306b\u5b9f\u884c\u3055\u308c\u308b std :: cout << \"~DestructorAndException() is called.\" << std :: endl ; // \u3055\u3089\u306b\u4f8b\u5916\u3092\u9001\u51fa throw std :: runtime_error ( \"~DestructorAndException()\" ); } }; int main () { try { DestructorAndException obj ; throw std :: runtime_error ( \"main()\" ); } catch ( const std :: exception & e ) { std :: cout << e . what () << std :: endl ; } return 0 ; } \u3053\u3046\u3057\u305f\u6319\u52d5\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u3001 \u4e00\u822c\u306b\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u304b\u3089\u306f\u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3059\u3002","title":"\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u4f8b\u5916"},{"location":"ch10-02-signals/","text":"\u30b7\u30b0\u30ca\u30eb \u00b6 \u30b7\u30b0\u30ca\u30eb\u3068\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u4e2d\u306b\u5916\u90e8\u304b\u3089\u8981\u6c42\u3092\u901a\u77e5\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002 OS \u304b\u3089\u306e\u30a8\u30e9\u30fc\u901a\u77e5\u306a\u3069\u3067\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 <csignal> \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u30b7\u30b0\u30ca\u30eb\u306b\u306f\u4ee5\u4e0b\u306e6\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002 SIGABRT SIGFPE SIGILL SIGINT SIGSEGV SIGTERM \u4e00\u90e8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002 SIGABRT \u00b6 std::abort \u306e\u547c\u3073\u51fa\u3057\u306b\u3088\u3063\u3066\u767a\u751f\u3057\u307e\u3059\u3002 std::abort \u306f std::terminate \u306a\u3069\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002 #include <exception> int main () { // \u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u306a\u3044\u305f\u3081 std::terminate \u304c\u547c\u3073\u51fa\u3055\u308c\u308b throw std :: exception (); return 0 ; } SIGFPE \u00b6 \u6574\u6570\u306e0\u9664\u7b97\u306a\u3069\u4e0d\u6b63\u306a\u7b97\u8853\u6f14\u7b97\u3092\u884c\u3046\u3068\u767a\u751f\u3057\u307e\u3059\u3002 int x = 2 ; int y = 0 ; int z = x / y ; // \u6574\u6570\u306e0\u9664\u7b97 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u5bfe\u3059\u308b\u7b97\u8853\u6f14\u7b97\u30a8\u30e9\u30fc \u591a\u304f\u306e\u51e6\u7406\u7cfb\u3067\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u898f\u683c\u3068\u3057\u3066 IEEE 754 \u304c\u4f7f\u7528\u3055\u308c\u3066\u304a\u308a\u3001 \u4ee5\u4e0b\u3092\u5024\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u975e\u6570 NaN \u7b26\u53f7\u4ed8\u30bc\u30ed ( +0 +0 \u3068 -0 -0 ) \u7121\u9650\u5927 ( +\\infty +\\infty \u3068 -\\infty -\\infty ) \u3053\u3046\u3057\u305f\u51e6\u7406\u7cfb\u3067\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u6f14\u7b97\u7d50\u679c\u3067\u3053\u308c\u3089\u306e\u5024\u3092\u4f7f\u7528\u3057\u3001 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u767a\u751f\u3055\u305b\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u5834\u5408\u304c\u591a\u3044\u3067\u3059\u3002 SIGSEGV \u00b6 \u7121\u52b9\u306a\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9 (\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u9055\u53cd) \u3092\u884c\u3046\u3068\u767a\u751f\u3057\u307e\u3059\u3002 int * x = nullptr ; // nullptr \u306b\u5bfe\u3059\u308b\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067 SIGSEGV \u304c\u767a\u751f std :: cout << * x << std :: endl ;","title":"10.2 \u30b7\u30b0\u30ca\u30eb"},{"location":"ch10-02-signals/#_1","text":"\u30b7\u30b0\u30ca\u30eb\u3068\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u4e2d\u306b\u5916\u90e8\u304b\u3089\u8981\u6c42\u3092\u901a\u77e5\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002 OS \u304b\u3089\u306e\u30a8\u30e9\u30fc\u901a\u77e5\u306a\u3069\u3067\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 <csignal> \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u30b7\u30b0\u30ca\u30eb\u306b\u306f\u4ee5\u4e0b\u306e6\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059\u3002 SIGABRT SIGFPE SIGILL SIGINT SIGSEGV SIGTERM \u4e00\u90e8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002","title":"\u30b7\u30b0\u30ca\u30eb"},{"location":"ch10-02-signals/#sigabrt","text":"std::abort \u306e\u547c\u3073\u51fa\u3057\u306b\u3088\u3063\u3066\u767a\u751f\u3057\u307e\u3059\u3002 std::abort \u306f std::terminate \u306a\u3069\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002 #include <exception> int main () { // \u4f8b\u5916\u304c\u6355\u6349\u3055\u308c\u306a\u3044\u305f\u3081 std::terminate \u304c\u547c\u3073\u51fa\u3055\u308c\u308b throw std :: exception (); return 0 ; }","title":"SIGABRT"},{"location":"ch10-02-signals/#sigfpe","text":"\u6574\u6570\u306e0\u9664\u7b97\u306a\u3069\u4e0d\u6b63\u306a\u7b97\u8853\u6f14\u7b97\u3092\u884c\u3046\u3068\u767a\u751f\u3057\u307e\u3059\u3002 int x = 2 ; int y = 0 ; int z = x / y ; // \u6574\u6570\u306e0\u9664\u7b97 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u5bfe\u3059\u308b\u7b97\u8853\u6f14\u7b97\u30a8\u30e9\u30fc \u591a\u304f\u306e\u51e6\u7406\u7cfb\u3067\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u898f\u683c\u3068\u3057\u3066 IEEE 754 \u304c\u4f7f\u7528\u3055\u308c\u3066\u304a\u308a\u3001 \u4ee5\u4e0b\u3092\u5024\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u975e\u6570 NaN \u7b26\u53f7\u4ed8\u30bc\u30ed ( +0 +0 \u3068 -0 -0 ) \u7121\u9650\u5927 ( +\\infty +\\infty \u3068 -\\infty -\\infty ) \u3053\u3046\u3057\u305f\u51e6\u7406\u7cfb\u3067\u306f\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u6f14\u7b97\u7d50\u679c\u3067\u3053\u308c\u3089\u306e\u5024\u3092\u4f7f\u7528\u3057\u3001 \u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u767a\u751f\u3055\u305b\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u5834\u5408\u304c\u591a\u3044\u3067\u3059\u3002","title":"SIGFPE"},{"location":"ch10-02-signals/#sigsegv","text":"\u7121\u52b9\u306a\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9 (\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u9055\u53cd) \u3092\u884c\u3046\u3068\u767a\u751f\u3057\u307e\u3059\u3002 int * x = nullptr ; // nullptr \u306b\u5bfe\u3059\u308b\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067 SIGSEGV \u304c\u767a\u751f std :: cout << * x << std :: endl ;","title":"SIGSEGV"},{"location":"ch10-03-assertions/","text":"\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3 \u00b6 assert \u00b6 \u5b9f\u884c\u6642\u306b\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u3068 std::abort \u3092\u547c\u3073\u51fa\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7570\u5e38\u7d42\u4e86\u3055\u305b\u308b\u51e6\u7406\u3067\u3059\u3002 assert \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f <cassert> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <cassert> #include <iostream> #include <limits> #include <vector> int Max ( const std :: vector < int >& v ) { assert ( ! v . empty ()); int max = std :: numeric_limits < int >:: min (); for ( auto e : v ) { if ( e > max ) { max = e ; } } return max ; } int main () { std :: vector < int > v1 = { 1 , 2 , 3 , 4 , 5 }; std :: vector < int > v2 ; std :: cout << Max ( v1 ) << std :: endl ; std :: cout << Max ( v2 ) << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 $ ./a.exe 5 assertion \"!v.empty()\" failed: file \"main.cc\" , line 7 , function : int Max ( const std::vector<int> & ) Aborted ( \u30b3\u30a2\u30c0\u30f3\u30d7 ) assert \u306f\u958b\u767a\u4e2d\u306b\u30d0\u30b0\u3092\u53d6\u308a\u9664\u304f\u3053\u3068\u3092\u60f3\u5b9a\u3057\u305f\u6a5f\u80fd\u3067\u3001 NDEBUG \u304c\u5b9a\u7fa9\u3055\u308c\u308b\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u3067\u306f\u7121\u52b9\u3068\u306a\u308a\u307e\u3059\u3002 NDEBUG \u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f -DNDEBUG \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 $ g++ -std = c++11 -DNDEBUG main.cc NDEBUG \u3092\u5b9a\u7fa9\u3057\u3066\u30d3\u30eb\u30c9\u3059\u308b\u3068\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306b\u5909\u5316\u3057\u307e\u3059\u3002 $ ./a.exe 5 -2147483648 static_assert \u00b6 \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u3059\u308b\u51e6\u7406\u3067\u3059\u3002 template < typename T , int N > class Array { static_assert ( N > 0 , \"\u30b5\u30a4\u30ba\u306f0\u3088\u308a\u5927\u304d\u304f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\" ); public : int size () const { return N ; } T data_ [ N ]; // \u30b5\u30a4\u30ba 0 \u306e\u914d\u5217\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044 }; int main () { Array < int , 0 > a ; return 0 ; } \u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 $ g++ -std = c++11 -c main.cc main.cc: In instantiation of \u2018class Array<int, 0 >\u2019: main.cc:12:19: required from here main.cc:3:5: \u30a8\u30e9\u30fc: static assertion failed: \u30b5\u30a4\u30ba\u306f0\u3088\u308a\u5927\u304d\u304f\u306a\u3051\u308c\u3070\u306a\u308a\u307e \u305b\u3093 static_assert ( N > 0 , \"\u30b5\u30a4\u30ba\u306f0\u3088\u308a\u5927\u304d\u304f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\" ) ; ^~~~~~~~~~~~~","title":"10.3 \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3"},{"location":"ch10-03-assertions/#_1","text":"","title":"\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3"},{"location":"ch10-03-assertions/#assert","text":"\u5b9f\u884c\u6642\u306b\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u3068 std::abort \u3092\u547c\u3073\u51fa\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7570\u5e38\u7d42\u4e86\u3055\u305b\u308b\u51e6\u7406\u3067\u3059\u3002 assert \u3092\u4f7f\u7528\u3059\u308b\u306b\u306f <cassert> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <cassert> #include <iostream> #include <limits> #include <vector> int Max ( const std :: vector < int >& v ) { assert ( ! v . empty ()); int max = std :: numeric_limits < int >:: min (); for ( auto e : v ) { if ( e > max ) { max = e ; } } return max ; } int main () { std :: vector < int > v1 = { 1 , 2 , 3 , 4 , 5 }; std :: vector < int > v2 ; std :: cout << Max ( v1 ) << std :: endl ; std :: cout << Max ( v2 ) << std :: endl ; return 0 ; } \u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 $ ./a.exe 5 assertion \"!v.empty()\" failed: file \"main.cc\" , line 7 , function : int Max ( const std::vector<int> & ) Aborted ( \u30b3\u30a2\u30c0\u30f3\u30d7 ) assert \u306f\u958b\u767a\u4e2d\u306b\u30d0\u30b0\u3092\u53d6\u308a\u9664\u304f\u3053\u3068\u3092\u60f3\u5b9a\u3057\u305f\u6a5f\u80fd\u3067\u3001 NDEBUG \u304c\u5b9a\u7fa9\u3055\u308c\u308b\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u3067\u306f\u7121\u52b9\u3068\u306a\u308a\u307e\u3059\u3002 NDEBUG \u3092\u5b9a\u7fa9\u3059\u308b\u306b\u306f -DNDEBUG \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 $ g++ -std = c++11 -DNDEBUG main.cc NDEBUG \u3092\u5b9a\u7fa9\u3057\u3066\u30d3\u30eb\u30c9\u3059\u308b\u3068\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306b\u5909\u5316\u3057\u307e\u3059\u3002 $ ./a.exe 5 -2147483648","title":"assert"},{"location":"ch10-03-assertions/#static_assert","text":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u3059\u308b\u51e6\u7406\u3067\u3059\u3002 template < typename T , int N > class Array { static_assert ( N > 0 , \"\u30b5\u30a4\u30ba\u306f0\u3088\u308a\u5927\u304d\u304f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\" ); public : int size () const { return N ; } T data_ [ N ]; // \u30b5\u30a4\u30ba 0 \u306e\u914d\u5217\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u3044 }; int main () { Array < int , 0 > a ; return 0 ; } \u30b3\u30f3\u30d1\u30a4\u30eb\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 $ g++ -std = c++11 -c main.cc main.cc: In instantiation of \u2018class Array<int, 0 >\u2019: main.cc:12:19: required from here main.cc:3:5: \u30a8\u30e9\u30fc: static assertion failed: \u30b5\u30a4\u30ba\u306f0\u3088\u308a\u5927\u304d\u304f\u306a\u3051\u308c\u3070\u306a\u308a\u307e \u305b\u3093 static_assert ( N > 0 , \"\u30b5\u30a4\u30ba\u306f0\u3088\u308a\u5927\u304d\u304f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\" ) ; ^~~~~~~~~~~~~","title":"static_assert"},{"location":"ch11-01-build/","text":"\u30d3\u30eb\u30c9 \u00b6 \u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u74b0\u5883 Windows \u306e MSYS2 \u74b0\u5883\u306f\u69cb\u6210\u304c\u8907\u96d1\u306a\u305f\u3081\u3001\u8aac\u660e\u3067\u306f Linux \u74b0\u5883\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u51e6\u7406\u3092\u30d3\u30eb\u30c9\u3068\u3044\u3044\u307e\u3059\u3002 \u30d3\u30eb\u30c9\u306f\u6b21\u306e\u624b\u9806\u3067\u884c\u308f\u308c\u307e\u3059\u3002 \u30d7\u30ea\u30d7\u30ed\u30bb\u30b9 \u30b3\u30f3\u30d1\u30a4\u30eb \u30ea\u30f3\u30af \u30d7\u30ea\u30d7\u30ed\u30bb\u30b9 \u00b6 \u30d7\u30ea\u30d7\u30ed\u30bb\u30b9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u524d\u306b\u884c\u308f\u308c\u308b\u524d\u51e6\u7406\u306e\u3053\u3068\u3067\u3059\u3002 \u30b3\u30e1\u30f3\u30c8\u306e\u524a\u9664\u3068 \u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u53f8\u4ee4 \u306e\u5b9f\u884c\u3092\u884c\u3044\u307e\u3059\u3002 -E \u3092\u6307\u5b9a\u3059\u308b\u3068\u30d7\u30ea\u30d7\u30ed\u30bb\u30b9\u3060\u3051\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 $ g++ -std = c++11 -E main.cc \u30b3\u30f3\u30d1\u30a4\u30eb \u00b6 \u4eba\u9593\u304c\u6271\u3046\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u6271\u3046\u305f\u3081\u306b0\u30681\u306e\u8868\u73fe (\u6a5f\u68b0\u8a9e) \u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u3044\u3044\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u5358\u4f4d\u3067\u884c\u3044\u307e\u3059\u3002 \u53b3\u5bc6\u306b\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u3044\u3044\u307e\u3059\u304c\u3001 \u30b3\u30f3\u30d1\u30a4\u30eb\u4ee5\u5916\u306e\u30d3\u30eb\u30c9\u51e6\u7406\u3082\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u63d0\u4f9b\u3055\u308c\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u3002 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u6a5f\u68b0\u8a9e\u306b\u5909\u63db\u3057\u305f\u7d50\u679c\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3068\u547c\u3070\u308c\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u3060\u3051\u5b9f\u884c\u3059\u308b\u306b\u306f -c \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 $ g++ -std = c++11 -c main.cc $ g++ -std = c++11 -c util.cc \u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068 main.cc \u304b\u3089 main.o \u3001 util.cc \u304b\u3089 util.o \u3078\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u3060\u3051\u3067\u306f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306f\u751f\u6210\u3055\u308c\u307e\u305b\u3093\u3002 \u30ea\u30f3\u30af \u00b6 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u3092\u307e\u3068\u3081\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3092\u30ea\u30f3\u30af\u3068\u3044\u3044\u307e\u3059\u3002 \u30ea\u30f3\u30af\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30ea\u30f3\u30ab\u3068\u3044\u3044\u307e\u3059\u3002 main.o \u3068 util.o \u3092\u30ea\u30f3\u30af\u3057\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.o util.o \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u70b9\u3067\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u30921\u3064\u305a\u3064\u51e6\u7406\u3059\u308b\u305f\u3081\u3001 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\u3084\u5909\u6570\u306b\u5bfe\u3057\u3066\u306f\u672a\u5b9a\u7fa9\u3067\u3042\u308b\u3068\u3044\u3046\u60c5\u5831\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 \u30ea\u30f3\u30af\u3067\u306f\u3053\u3046\u3057\u305f\u672a\u5b9a\u7fa9\u306e\u95a2\u6570\u3084\u5909\u6570\u306e\u5b9a\u7fa9\u3092\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u304b\u3089\u63a2\u3057\u3066\u5bfe\u5fdc\u4ed8\u3051\u3092\u884c\u3044\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u95a2\u6570 Sum \u306f main.cc \u3067\u306f\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3060\u3051\u3067\u5b9a\u7fa9\u304c\u306a\u3044\u305f\u3081\u3001 main.o \u306b\u306f Sum \u304c\u672a\u5b9a\u7fa9\u3067\u3042\u308b\u3068\u3044\u3046\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 main.cc int Sum ( int a , int b ); int main () { Sum ( 1 , 2 ); return 0 ; } util.cc int Sum ( int a , int b ) { return a + b ; } Sum \u306f util.cc \u3067\u5b9a\u7fa9\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u305f\u3081\u3001 main.o \u304b\u3089\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u306b\u306f util.o \u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b main.o \u3060\u3051\u3067\u30ea\u30f3\u30af\u3092\u884c\u3046\u3068 main.o \u3067\u672a\u5b9a\u7fa9\u306e Sum \u3092\u5b9a\u7fa9\u3068\u5bfe\u5fdc\u4ed8\u3051\u3067\u304d\u305a\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 $ g++ -std = c++11 main.o main.o: \u95a2\u6570 ` main ' \u5185: main.cc:(.text+0xf): `Sum(int, int)' \u306b\u5bfe\u3059\u308b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u53c2\u7167\u3067\u3059 collect2: error: ld returned 1 exit status","title":"11.1 \u30d3\u30eb\u30c9"},{"location":"ch11-01-build/#_1","text":"\u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u74b0\u5883 Windows \u306e MSYS2 \u74b0\u5883\u306f\u69cb\u6210\u304c\u8907\u96d1\u306a\u305f\u3081\u3001\u8aac\u660e\u3067\u306f Linux \u74b0\u5883\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u51e6\u7406\u3092\u30d3\u30eb\u30c9\u3068\u3044\u3044\u307e\u3059\u3002 \u30d3\u30eb\u30c9\u306f\u6b21\u306e\u624b\u9806\u3067\u884c\u308f\u308c\u307e\u3059\u3002 \u30d7\u30ea\u30d7\u30ed\u30bb\u30b9 \u30b3\u30f3\u30d1\u30a4\u30eb \u30ea\u30f3\u30af","title":"\u30d3\u30eb\u30c9"},{"location":"ch11-01-build/#_2","text":"\u30d7\u30ea\u30d7\u30ed\u30bb\u30b9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u524d\u306b\u884c\u308f\u308c\u308b\u524d\u51e6\u7406\u306e\u3053\u3068\u3067\u3059\u3002 \u30b3\u30e1\u30f3\u30c8\u306e\u524a\u9664\u3068 \u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u53f8\u4ee4 \u306e\u5b9f\u884c\u3092\u884c\u3044\u307e\u3059\u3002 -E \u3092\u6307\u5b9a\u3059\u308b\u3068\u30d7\u30ea\u30d7\u30ed\u30bb\u30b9\u3060\u3051\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 $ g++ -std = c++11 -E main.cc","title":"\u30d7\u30ea\u30d7\u30ed\u30bb\u30b9"},{"location":"ch11-01-build/#_3","text":"\u4eba\u9593\u304c\u6271\u3046\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u6271\u3046\u305f\u3081\u306b0\u30681\u306e\u8868\u73fe (\u6a5f\u68b0\u8a9e) \u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3068\u3044\u3044\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u5358\u4f4d\u3067\u884c\u3044\u307e\u3059\u3002 \u53b3\u5bc6\u306b\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u3053\u3068\u3092\u30b3\u30f3\u30d1\u30a4\u30e9\u3068\u3044\u3044\u307e\u3059\u304c\u3001 \u30b3\u30f3\u30d1\u30a4\u30eb\u4ee5\u5916\u306e\u30d3\u30eb\u30c9\u51e6\u7406\u3082\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u3063\u3066\u63d0\u4f9b\u3055\u308c\u308b\u306e\u304c\u4e00\u822c\u7684\u3067\u3059\u3002 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u6a5f\u68b0\u8a9e\u306b\u5909\u63db\u3057\u305f\u7d50\u679c\u306f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3068\u547c\u3070\u308c\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u3060\u3051\u5b9f\u884c\u3059\u308b\u306b\u306f -c \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 $ g++ -std = c++11 -c main.cc $ g++ -std = c++11 -c util.cc \u3053\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068 main.cc \u304b\u3089 main.o \u3001 util.cc \u304b\u3089 util.o \u3078\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30eb\u3060\u3051\u3067\u306f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306f\u751f\u6210\u3055\u308c\u307e\u305b\u3093\u3002","title":"\u30b3\u30f3\u30d1\u30a4\u30eb"},{"location":"ch11-01-build/#_4","text":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u3092\u307e\u3068\u3081\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3092\u30ea\u30f3\u30af\u3068\u3044\u3044\u307e\u3059\u3002 \u30ea\u30f3\u30af\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30ea\u30f3\u30ab\u3068\u3044\u3044\u307e\u3059\u3002 main.o \u3068 util.o \u3092\u30ea\u30f3\u30af\u3057\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.o util.o \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u70b9\u3067\u306f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u30921\u3064\u305a\u3064\u51e6\u7406\u3059\u308b\u305f\u3081\u3001 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u95a2\u6570\u3084\u5909\u6570\u306b\u5bfe\u3057\u3066\u306f\u672a\u5b9a\u7fa9\u3067\u3042\u308b\u3068\u3044\u3046\u60c5\u5831\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 \u30ea\u30f3\u30af\u3067\u306f\u3053\u3046\u3057\u305f\u672a\u5b9a\u7fa9\u306e\u95a2\u6570\u3084\u5909\u6570\u306e\u5b9a\u7fa9\u3092\u4ed6\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u304b\u3089\u63a2\u3057\u3066\u5bfe\u5fdc\u4ed8\u3051\u3092\u884c\u3044\u307e\u3059\u3002 \u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306e\u95a2\u6570 Sum \u306f main.cc \u3067\u306f\u30d7\u30ed\u30c8\u30bf\u30a4\u30d7\u5ba3\u8a00\u3060\u3051\u3067\u5b9a\u7fa9\u304c\u306a\u3044\u305f\u3081\u3001 main.o \u306b\u306f Sum \u304c\u672a\u5b9a\u7fa9\u3067\u3042\u308b\u3068\u3044\u3046\u60c5\u5831\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002 main.cc int Sum ( int a , int b ); int main () { Sum ( 1 , 2 ); return 0 ; } util.cc int Sum ( int a , int b ) { return a + b ; } Sum \u306f util.cc \u3067\u5b9a\u7fa9\u304c\u884c\u308f\u308c\u3066\u3044\u308b\u305f\u3081\u3001 main.o \u304b\u3089\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3059\u308b\u306b\u306f util.o \u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002 \u6b21\u306e\u3088\u3046\u306b main.o \u3060\u3051\u3067\u30ea\u30f3\u30af\u3092\u884c\u3046\u3068 main.o \u3067\u672a\u5b9a\u7fa9\u306e Sum \u3092\u5b9a\u7fa9\u3068\u5bfe\u5fdc\u4ed8\u3051\u3067\u304d\u305a\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059\u3002 $ g++ -std = c++11 main.o main.o: \u95a2\u6570 ` main ' \u5185: main.cc:(.text+0xf): `Sum(int, int)' \u306b\u5bfe\u3059\u308b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u53c2\u7167\u3067\u3059 collect2: error: ld returned 1 exit status","title":"\u30ea\u30f3\u30af"},{"location":"ch11-02-static-libraries-and-static-linking/","text":"\u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u9759\u7684\u30ea\u30f3\u30af \u00b6 \u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u74b0\u5883 Windows \u306e MSYS2 \u74b0\u5883\u306f\u69cb\u6210\u304c\u8907\u96d1\u306a\u305f\u3081\u3001\u8aac\u660e\u3067\u306f Linux \u74b0\u5883\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u30921\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u3001 \u30ea\u30f3\u30af\u6642\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u4ee3\u308f\u308a\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u307e\u3068\u3081\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3044\u3001 \u305d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30f3\u30af\u3059\u308b\u3053\u3068\u3092\u9759\u7684\u30ea\u30f3\u30af\u3068\u3044\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 int Add ( int a , int b ); int Sub ( int a , int b ); int main () { Add ( 1 , 2 ); Sub ( 3 , 4 ); return 0 ; } add.cc 1 2 3 int Add ( int a , int b ) { return a + b ; } sub.cc 1 2 3 int Sub ( int a , int b ) { return a - b ; } add.cc \u3068 sub.cc \u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u751f\u6210\u3055\u308c\u308b 2\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb add.o \u3068 sub.o \u304b\u3089 \u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea libhoge.a \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ ar rc libhoge.a add.o sub.o ar \u306f\u30a2\u30fc\u30ab\u30a4\u30d6\u3092\u64cd\u4f5c\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3067\u3059\u3002 rc \u3067\u30a2\u30fc\u30ab\u30a4\u30d6\u3092\u4f5c\u6210\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3068\u3044\u3046\u6307\u5b9a\u3092\u3057\u307e\u3059\u3002 \u4f5c\u6210\u3057\u305f\u30a2\u30fc\u30ab\u30a4\u30d6\u306e\u5185\u5bb9\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 $ ar t libhoge.a add.o sub.o libhoge.a \u3092\u9759\u7684\u30ea\u30f3\u30af\u3059\u308b\u306b\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.o libhoge.a","title":"11.2 \u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u9759\u7684\u30ea\u30f3\u30af"},{"location":"ch11-02-static-libraries-and-static-linking/#_1","text":"\u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u74b0\u5883 Windows \u306e MSYS2 \u74b0\u5883\u306f\u69cb\u6210\u304c\u8907\u96d1\u306a\u305f\u3081\u3001\u8aac\u660e\u3067\u306f Linux \u74b0\u5883\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u30921\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u307e\u3068\u3081\u3001 \u30ea\u30f3\u30af\u6642\u306b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u4ee3\u308f\u308a\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u8907\u6570\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u307e\u3068\u3081\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3044\u3001 \u305d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30f3\u30af\u3059\u308b\u3053\u3068\u3092\u9759\u7684\u30ea\u30f3\u30af\u3068\u3044\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 int Add ( int a , int b ); int Sub ( int a , int b ); int main () { Add ( 1 , 2 ); Sub ( 3 , 4 ); return 0 ; } add.cc 1 2 3 int Add ( int a , int b ) { return a + b ; } sub.cc 1 2 3 int Sub ( int a , int b ) { return a - b ; } add.cc \u3068 sub.cc \u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u751f\u6210\u3055\u308c\u308b 2\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb add.o \u3068 sub.o \u304b\u3089 \u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea libhoge.a \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ ar rc libhoge.a add.o sub.o ar \u306f\u30a2\u30fc\u30ab\u30a4\u30d6\u3092\u64cd\u4f5c\u3059\u308b\u30b3\u30de\u30f3\u30c9\u3067\u3059\u3002 rc \u3067\u30a2\u30fc\u30ab\u30a4\u30d6\u3092\u4f5c\u6210\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3068\u3044\u3046\u6307\u5b9a\u3092\u3057\u307e\u3059\u3002 \u4f5c\u6210\u3057\u305f\u30a2\u30fc\u30ab\u30a4\u30d6\u306e\u5185\u5bb9\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 $ ar t libhoge.a add.o sub.o libhoge.a \u3092\u9759\u7684\u30ea\u30f3\u30af\u3059\u308b\u306b\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.o libhoge.a","title":"\u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u9759\u7684\u30ea\u30f3\u30af"},{"location":"ch11-03-dynamic-libraries-and-dynamic-linking/","text":"\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u52d5\u7684\u30ea\u30f3\u30af \u00b6 \u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u74b0\u5883 Windows \u306e MSYS2 \u74b0\u5883\u306f\u69cb\u6210\u304c\u8907\u96d1\u306a\u305f\u3081\u3001\u8aac\u660e\u3067\u306f Linux \u74b0\u5883\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u5b9f\u884c\u306b\u5fc5\u8981\u306a\u51e6\u7406\u306e\u4e00\u90e8\u3092\u5206\u5272\u3057\u3066\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u3066\u304a\u304d\u3001\u5b9f\u884c\u6642\u306b\u7d50\u5408\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u306f\u30d3\u30eb\u30c9\u6642\u306b\u4f9d\u5b58\u95a2\u4fc2\u306e\u8a2d\u5b9a\u3060\u3051\u3092\u884c\u3044\u3001\u5b9f\u884c\u6642\u306b\u89e3\u6c7a\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002 \u3053\u306e\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u3092\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3044\u3001 \u305d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30f3\u30af\u3057\u3066\u4f9d\u5b58\u95a2\u4fc2\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3092\u52d5\u7684\u30ea\u30f3\u30af\u3068\u3044\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 int Add ( int a , int b ); int Sub ( int a , int b ); int main () { Add ( 1 , 2 ); Sub ( 3 , 4 ); return 0 ; } add.cc 1 2 3 int Add ( int a , int b ) { return a + b ; } sub.cc 1 2 3 int Sub ( int a , int b ) { return a - b ; } add.cc \u3068 sub.cc \u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u751f\u6210\u3055\u308c\u308b 2\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb add.o \u3068 sub.o \u304b\u3089 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea libhoge.so \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ g++ -std = c++11 -shared -o libhoge.so add.o sub.o -shared \u3092\u3064\u3051\u308b\u3053\u3068\u3067\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u751f\u6210\u304c\u884c\u308f\u308c\u307e\u3059\u3002 \u751f\u6210\u3059\u308b\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u306f -o \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 libhoge.so \u3092\u52d5\u7684\u30ea\u30f3\u30af\u3059\u308b\u306b\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.o libhoge.so \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b50\u4f9d\u5b58\u95a2\u4fc2\u306f ldd \u30b3\u30de\u30f3\u30c9\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 $ ldd a.out linux-vdso.so.1 = > ( 0x00007ffeacf68000 ) libhoge.so = > ./libhoge.so ( 0x00007f86f4381000 ) libc.so.6 = > /lib/x86_64-linux-gnu/libc.so.6 ( 0x00007f86f3fb7000 ) /lib64/ld-linux-x86-64.so.2 ( 0x00007f86f4583000 ) libhoge.so => not found \u3068\u51fa\u529b\u3055\u308c\u308b\u5834\u5408\u306f export LD_LIBRARY_PATH=. \u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002 $ ldd a.out linux-vdso.so.1 = > ( 0x00007ffc49540000 ) libhoge.so = > not found libc.so.6 = > /lib/x86_64-linux-gnu/libc.so.6 ( 0x00007feb00b3e000 ) /lib64/ld-linux-x86-64.so.2 ( 0x00007feb00f08000 ) $ export LD_LIBRARY_PATH = . $ ldd a.out linux-vdso.so.1 = > ( 0x00007ffeacf68000 ) libhoge.so = > ./libhoge.so ( 0x00007f86f4381000 ) libc.so.6 = > /lib/x86_64-linux-gnu/libc.so.6 ( 0x00007f86f3fb7000 ) /lib64/ld-linux-x86-64.so.2 ( 0x00007f86f4583000 ) \u4f9d\u5b58\u95a2\u4fc2\u306f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3067\u306a\u304f\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3082\u5b58\u5728\u3057\u307e\u3059\u3002 $ ldd /lib/x86_64-linux-gnu/libc.so.6 /lib64/ld-linux-x86-64.so.2 ( 0x00007f53f0153000 ) linux-vdso.so.1 = > ( 0x00007fff235c4000 ) \u3053\u306e\u3088\u3046\u306b\u4f9d\u5b58\u95a2\u4fc2\u306f\u5b50\u4f9d\u5b58\u3060\u3051\u3067\u306f\u5b8c\u7d50\u305b\u305a\u3001\u9023\u9396\u3057\u3066\u767a\u751f\u3057\u307e\u3059\u3002 \u5b50\u4f9d\u5b58\u304c\u306a\u3044\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 $ ldd libhoge.so statically linked -l \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30ea\u30f3\u30af\u6307\u5b9a \u30e9\u30a4\u30d6\u30e9\u30ea\u30d1\u30b9\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306f -l \u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u540d\u79f0\u3092\u7528\u3044\u3066\u30ea\u30f3\u30af\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u30d1\u30b9\u306f\u51e6\u7406\u7cfb\u3067\u5fc5\u8981\u306a\u30d1\u30b9\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5165\u3063\u3066\u304a\u308a\u3001 -L \u3067\u30e6\u30fc\u30b6\u6307\u5b9a\u30d1\u30b9\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u540d\u79f0\u306f\u63a5\u982d\u8f9e lib \u3068\u62e1\u5f35\u5b50\u3092\u3068\u3063\u305f\u3082\u306e\u3067 libhoge.so \u3084 libhoge.a \u306a\u3089 hoge \u3068\u306a\u308a\u307e\u3059\u3002 -l \u3067\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b libhoge.so \u3092\u52d5\u7684\u30ea\u30f3\u30af\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.o -lhoge -L. \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea libhoge.so \u304c\u306a\u3044\u5834\u5408\u306b\u306f\u3001 \u540c\u3058\u30b3\u30de\u30f3\u30c9\u3067\u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea libhoge.a \u306e\u9759\u7684\u30ea\u30f3\u30af\u304c\u884c\u308f\u308c\u307e\u3059\u3002","title":"11.3 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u52d5\u7684\u30ea\u30f3\u30af"},{"location":"ch11-03-dynamic-libraries-and-dynamic-linking/#_1","text":"\u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u74b0\u5883 Windows \u306e MSYS2 \u74b0\u5883\u306f\u69cb\u6210\u304c\u8907\u96d1\u306a\u305f\u3081\u3001\u8aac\u660e\u3067\u306f Linux \u74b0\u5883\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u5b9f\u884c\u306b\u5fc5\u8981\u306a\u51e6\u7406\u306e\u4e00\u90e8\u3092\u5206\u5272\u3057\u3066\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u3066\u304a\u304d\u3001\u5b9f\u884c\u6642\u306b\u7d50\u5408\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u308c\u306f\u30d3\u30eb\u30c9\u6642\u306b\u4f9d\u5b58\u95a2\u4fc2\u306e\u8a2d\u5b9a\u3060\u3051\u3092\u884c\u3044\u3001\u5b9f\u884c\u6642\u306b\u89e3\u6c7a\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002 \u3053\u306e\u5916\u90e8\u30d5\u30a1\u30a4\u30eb\u3092\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3044\u3044\u3001 \u305d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30f3\u30af\u3057\u3066\u4f9d\u5b58\u95a2\u4fc2\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3092\u52d5\u7684\u30ea\u30f3\u30af\u3068\u3044\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 int Add ( int a , int b ); int Sub ( int a , int b ); int main () { Add ( 1 , 2 ); Sub ( 3 , 4 ); return 0 ; } add.cc 1 2 3 int Add ( int a , int b ) { return a + b ; } sub.cc 1 2 3 int Sub ( int a , int b ) { return a - b ; } add.cc \u3068 sub.cc \u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u751f\u6210\u3055\u308c\u308b 2\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb add.o \u3068 sub.o \u304b\u3089 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea libhoge.so \u3092\u4f5c\u6210\u3059\u308b\u306b\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ g++ -std = c++11 -shared -o libhoge.so add.o sub.o -shared \u3092\u3064\u3051\u308b\u3053\u3068\u3067\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u751f\u6210\u304c\u884c\u308f\u308c\u307e\u3059\u3002 \u751f\u6210\u3059\u308b\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u306f -o \u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 libhoge.so \u3092\u52d5\u7684\u30ea\u30f3\u30af\u3059\u308b\u306b\u306f\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.o libhoge.so \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b50\u4f9d\u5b58\u95a2\u4fc2\u306f ldd \u30b3\u30de\u30f3\u30c9\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 $ ldd a.out linux-vdso.so.1 = > ( 0x00007ffeacf68000 ) libhoge.so = > ./libhoge.so ( 0x00007f86f4381000 ) libc.so.6 = > /lib/x86_64-linux-gnu/libc.so.6 ( 0x00007f86f3fb7000 ) /lib64/ld-linux-x86-64.so.2 ( 0x00007f86f4583000 ) libhoge.so => not found \u3068\u51fa\u529b\u3055\u308c\u308b\u5834\u5408\u306f export LD_LIBRARY_PATH=. \u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002 $ ldd a.out linux-vdso.so.1 = > ( 0x00007ffc49540000 ) libhoge.so = > not found libc.so.6 = > /lib/x86_64-linux-gnu/libc.so.6 ( 0x00007feb00b3e000 ) /lib64/ld-linux-x86-64.so.2 ( 0x00007feb00f08000 ) $ export LD_LIBRARY_PATH = . $ ldd a.out linux-vdso.so.1 = > ( 0x00007ffeacf68000 ) libhoge.so = > ./libhoge.so ( 0x00007f86f4381000 ) libc.so.6 = > /lib/x86_64-linux-gnu/libc.so.6 ( 0x00007f86f3fb7000 ) /lib64/ld-linux-x86-64.so.2 ( 0x00007f86f4583000 ) \u4f9d\u5b58\u95a2\u4fc2\u306f\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3067\u306a\u304f\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3082\u5b58\u5728\u3057\u307e\u3059\u3002 $ ldd /lib/x86_64-linux-gnu/libc.so.6 /lib64/ld-linux-x86-64.so.2 ( 0x00007f53f0153000 ) linux-vdso.so.1 = > ( 0x00007fff235c4000 ) \u3053\u306e\u3088\u3046\u306b\u4f9d\u5b58\u95a2\u4fc2\u306f\u5b50\u4f9d\u5b58\u3060\u3051\u3067\u306f\u5b8c\u7d50\u305b\u305a\u3001\u9023\u9396\u3057\u3066\u767a\u751f\u3057\u307e\u3059\u3002 \u5b50\u4f9d\u5b58\u304c\u306a\u3044\u5834\u5408\u306f\u6b21\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 $ ldd libhoge.so statically linked -l \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30ea\u30f3\u30af\u6307\u5b9a \u30e9\u30a4\u30d6\u30e9\u30ea\u30d1\u30b9\u306b\u914d\u7f6e\u3055\u308c\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306f -l \u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u540d\u79f0\u3092\u7528\u3044\u3066\u30ea\u30f3\u30af\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u30d1\u30b9\u306f\u51e6\u7406\u7cfb\u3067\u5fc5\u8981\u306a\u30d1\u30b9\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5165\u3063\u3066\u304a\u308a\u3001 -L \u3067\u30e6\u30fc\u30b6\u6307\u5b9a\u30d1\u30b9\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u540d\u79f0\u306f\u63a5\u982d\u8f9e lib \u3068\u62e1\u5f35\u5b50\u3092\u3068\u3063\u305f\u3082\u306e\u3067 libhoge.so \u3084 libhoge.a \u306a\u3089 hoge \u3068\u306a\u308a\u307e\u3059\u3002 -l \u3067\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b libhoge.so \u3092\u52d5\u7684\u30ea\u30f3\u30af\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 $ g++ -std = c++11 main.o -lhoge -L. \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea libhoge.so \u304c\u306a\u3044\u5834\u5408\u306b\u306f\u3001 \u540c\u3058\u30b3\u30de\u30f3\u30c9\u3067\u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea libhoge.a \u306e\u9759\u7684\u30ea\u30f3\u30af\u304c\u884c\u308f\u308c\u307e\u3059\u3002","title":"\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u52d5\u7684\u30ea\u30f3\u30af"},{"location":"ch11-04-dynamic-loading-and-name-mangling/","text":"\u52d5\u7684\u30ed\u30fc\u30c9\u3068\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0 \u00b6 \u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u74b0\u5883 Windows \u306e MSYS2 \u74b0\u5883\u306f\u69cb\u6210\u304c\u8907\u96d1\u306a\u305f\u3081\u3001\u8aac\u660e\u3067\u306f Linux \u74b0\u5883\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u52d5\u7684\u30ea\u30f3\u30af\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u4e2d\u306b\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u4e2d\u306b\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3092\u52d5\u7684\u30ed\u30fc\u30c9\u3068\u3044\u3044\u307e\u3059\u3002 \u52d5\u7684\u30ed\u30fc\u30c9\u306f C++ \u306e\u6a19\u6e96\u6a5f\u80fd\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u51e6\u7406\u7cfb\u56fa\u6709\u306e\u51e6\u7406\u304c\u5fc5\u8981\u3067\u3059\u3002 Linux \u74b0\u5883\u3067\u4f7f\u7528\u3059\u308b API \u306e\u8a73\u7d30\u306f Man page of DLOPEN - JM Project \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u307e\u305f\u3001\u3053\u308c\u3089\u306e API \u3067\u4f7f\u7528\u3055\u308c\u308b void \u30dd\u30a4\u30f3\u30bf\u306b\u3064\u3044\u3066\u306f void \u30dd\u30a4\u30f3\u30bf \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> #include <dlfcn.h> int main () { void * handle = dlopen ( \"libhoge.so\" , RTLD_NOW ); if ( handle == NULL ) { const char * const error_message = dlerror (); std :: cerr << error_message << std :: endl ; return 1 ; } void * const symbol_add = dlsym ( handle , \"_Z3Addii\" ); { const char * const error_message = dlerror (); if ( error_message != NULL ) { std :: cerr << error_message << std :: endl ; dlclose ( handle ); return 1 ; } } void * const symbol_sub = dlsym ( handle , \"_Z3Subii\" ); { const char * const error_message = dlerror (); if ( error_message != NULL ) { std :: cerr << error_message << std :: endl ; dlclose ( handle ); return 1 ; } } auto Add = reinterpret_cast < int ( * )( int , int ) > ( symbol_add ); auto Sub = reinterpret_cast < int ( * )( int , int ) > ( symbol_sub ); std :: cout << Add ( 1 , 2 ) << std :: endl ; std :: cout << Sub ( 3 , 4 ) << std :: endl ; dlclose ( handle ); return 0 ; } add.cc 1 2 3 int Add ( int a , int b ) { return a + b ; } sub.cc 1 2 3 int Sub ( int a , int b ) { return a - b ; } \u52d5\u7684\u30ed\u30fc\u30c9 \u00b6 add.cc \u3068 sub.cc \u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u751f\u6210\u3055\u308c\u308b 2\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb add.o \u3068 sub.o \u304b\u3089 \u4f5c\u6210\u3057\u305f\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092 libhoge.so \u3068\u3057\u307e\u3059\u3002 Linux \u74b0\u5883\u3067\u52d5\u7684\u30ed\u30fc\u30c9\u3092\u884c\u3046\u305f\u3081\u306b\u306f OS \u304c\u63d0\u4f9b\u3059\u308b libdl.so \u3092\u52d5\u7684\u30ea\u30f3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 libdl.so \u3092\u52d5\u7684\u30ea\u30f3\u30af\u3057\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\u3059\u308b\u306b\u306f -ldl \u3092\u3064\u3051\u307e\u3059\u3002 g++ -std = c++11 main.o -ldl \u52d5\u7684\u30ed\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u884c\u3044\u307e\u3059\u3002 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u958b\u304f \u95a2\u6570\u3084\u5909\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u9589\u3058\u308b \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u958b\u304f \u00b6 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u958b\u304f\u306b\u306f dlopen() \u3092\u4f7f\u3044\u307e\u3059\u3002 \u52d5\u7684\u30ed\u30fc\u30c9\u306b\u95a2\u3059\u308b\u51e6\u7406\u3092\u4f7f\u3046\u306b\u306f <dlfcn.h> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 #include <iostream> #include <dlfcn.h> // \u7b2c1\u5f15\u6570\u306b\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3059\u308b void * handle = dlopen ( \"libhoge.so\" , RTLD_NOW ); if ( handle == NULL ) { const char * const error_message = dlerror (); std :: cerr << error_message << std :: endl ; return 1 ; } dlopen() \u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f NULL \u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002 dlerror() \u3067\u306f\u6700\u5f8c\u306b\u4f7f\u7528\u3055\u308c\u305f\u52d5\u7684\u30ed\u30fc\u30c9\u306e API \u3067\u30a8\u30e9\u30fc\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u63a2\u3057\u65b9\u306f\u52d5\u7684\u30ea\u30f3\u30af\u3057\u305f\u5834\u5408\u3068\u540c\u69d8\u3067\u3059\u3002 \u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u5834\u5408\u306f export LD_LIBRARY_PATH=. \u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002 $ ./a.out libhoge.so: cannot open shared object file: No such file or directory dlopen() \u304c\u6b63\u5e38\u306b\u7d42\u4e86\u3057\u305f\u5834\u5408\u306f\u30cf\u30f3\u30c9\u30eb\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002 \u3053\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u7528\u3044\u3066\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u64cd\u4f5c\u3057\u307e\u3059\u3002 \u95a2\u6570\u3084\u5909\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97 \u00b6 dlopen() \u3067\u53d6\u5f97\u3057\u305f\u30cf\u30f3\u30c9\u30eb\u304b\u3089 \u95a2\u6570\u3084\u5909\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f dlsym() \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 dlsym() \u3067\u306f\u7b2c1\u5f15\u6570\u306b\u30cf\u30f3\u30c9\u30eb\u3001\u7b2c2\u5f15\u6570\u306b\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30b7\u30f3\u30dc\u30eb\u540d\u306f nm \u30b3\u30de\u30f3\u30c9\u3067 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3084\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6307\u5b9a\u3057\u3066\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 $ nm add.o 0000000000000000 T _Z3Addii $ nm sub.o 0000000000000000 T _Z3Subii $ nm libhoge.so 0000000000200e88 d _DYNAMIC 0000000000201000 d _GLOBAL_OFFSET_TABLE_ w _ITM_deregisterTMCloneTable w _ITM_registerTMCloneTable w _Jv_RegisterClasses 0000000000000620 T _Z3Addii 0000000000000634 T _Z3Subii 00000000000006f8 r __FRAME_END__ 0000000000000654 r __GNU_EH_FRAME_HDR 0000000000200e80 d __JCR_END__ 0000000000200e80 d __JCR_LIST__ 0000000000201020 d __TMC_END__ 0000000000201020 B __bss_start w __cxa_finalize 00000000000005b0 t __do_global_dtors_aux 0000000000200e78 t __do_global_dtors_aux_fini_array_entry 0000000000201018 d __dso_handle 0000000000200e70 t __frame_dummy_init_array_entry w __gmon_start__ 0000000000201020 D _edata 0000000000201028 B _end 0000000000000648 T _fini 00000000000004e0 T _init 0000000000201020 b completed.7594 0000000000000520 t deregister_tm_clones 00000000000005f0 t frame_dummy 0000000000000560 t register_tm_clones \u3053\u306e\u4f8b\u3067\u306f int Add(int a, int b) \u306f _Z3Addii \u3001 int Sub(int a, int b) \u306f _Z3Subii \u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u540d\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002 dlsym() \u3067 int Add(int a, int b) \u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 // \u7b2c1\u5f15\u6570\u306b\u30cf\u30f3\u30c9\u30eb\u3001\u7b2c2\u5f15\u6570\u306b\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u6307\u5b9a void * const symbol_add = dlsym ( handle , \"_Z3Addii\" ); { const char * const error_message = dlerror (); if ( error_message != NULL ) { std :: cerr << error_message << std :: endl ; dlclose ( handle ); return 1 ; } } dlsym() \u304c\u6b63\u5e38\u306b\u7d42\u4e86\u3057\u305f\u5834\u5408\u306b\u306f\u305d\u306e\u30b7\u30f3\u30dc\u30eb\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002 \u30b7\u30f3\u30dc\u30eb\u304c\u95a2\u6570\u306a\u3089\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3068\u306a\u308a\u307e\u3059\u3002 dlsym() \u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f NULL \u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u304c\u3001 \u6b63\u5e38\u306b\u7d42\u4e86\u3057\u305f\u5834\u5408\u306e\u7d50\u679c\u304c NULL \u306b\u306a\u308b\u3053\u3068\u3082\u3042\u308b\u305f\u3081\u3001\u30a8\u30e9\u30fc\u306e\u6709\u7121\u306f\u76f4\u5f8c\u306e dlerror() \u306e\u7d50\u679c\u3067\u5224\u65ad\u3057\u307e\u3059\u3002 dlerror() \u306f\u6700\u5f8c\u306b\u4f7f\u7528\u3055\u308c\u305f\u52d5\u7684\u30ed\u30fc\u30c9\u306e API \u3067\u30a8\u30e9\u30fc\u304c\u306a\u3051\u308c\u3070 NULL \u3092\u8fd4\u5374\u3057\u307e\u3059\u3002 dlsym() \u306e\u623b\u308a\u5024\u306f void* \u3067\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u306a\u3044\u305f\u3081\u30ad\u30e3\u30b9\u30c8\u304c\u5fc5\u8981\u3067\u3059\u3002 \u95a2\u6570\u3067\u3042\u308c\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002 auto Add = reinterpret_cast < int ( * )( int , int ) > ( symbol_add ); std :: cout << Add ( 1 , 2 ) << std :: endl ; \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u9589\u3058\u308b \u00b6 \u958b\u3044\u305f\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f7f\u7528\u304c\u7d42\u308f\u3063\u305f\u3089\u9589\u3058\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u9589\u3058\u308b\u306b\u306f dlclose() \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 dlclose ( handle ); \u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0 \u00b6 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u5909\u6570\u3084\u95a2\u6570\u3092\u540d\u524d\u3060\u3051\u3067\u8b58\u5225\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 C \u8a00\u8a9e\u306f\u30ea\u30f3\u30b1\u30fc\u30b8\u6307\u5b9a\u304c\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3067\u306f\u306a\u3044\u5909\u6570\u3084\u95a2\u6570\u3092\u540d\u524d\u3060\u3051\u3067\u8b58\u5225\u3057\u3066\u3044\u307e\u3059\u304c\u3001 C++ \u306f C \u8a00\u8a9e\u306b\u306f\u306a\u3044\u4ee5\u4e0b\u306e\u6a5f\u80fd\u306b\u3088\u3063\u3066\u540d\u524d\u3060\u3051\u3067\u8b58\u5225\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 \u30af\u30e9\u30b9 \u540d\u524d\u7a7a\u9593 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u95a2\u6570\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 \u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u3001 \u8b58\u5225\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u3059\u3079\u3066\u540d\u524d\u306b\u542b\u3081\u308b\u306a\u3069\u3057\u3066\u751f\u6210\u3057\u305f\u4e00\u610f\u306a\u540d\u524d\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u3092\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3068\u3044\u3044\u307e\u3059\u3002 int Add(int a, int b) \u304c _Z3Addii \u3068\u3044\u3063\u305f\u30b7\u30f3\u30dc\u30eb\u540d\u306b\u306a\u308b\u306e\u306f\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u306e\u7d50\u679c\u3067\u3059\u3002 \u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3092\u884c\u3046\u524d\u306e\u60c5\u5831\u306f c++filt \u30b3\u30de\u30f3\u30c9\u3067\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 $ nm add.o 0000000000000000 T _Z3Addii $ nm add.o | c++filt 0000000000000000 T Add ( int, int ) \u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u306e\u65b9\u6cd5\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u4f9d\u5b58\u3067\u3059\u3002 \u540c\u3058\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3042\u3063\u3066\u3082\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u7570\u306a\u308c\u3070\u3001\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u306e\u7d50\u679c\u304c\u4e00\u81f4\u3059\u308b\u4fdd\u8a3c\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u5177\u4f53\u4f8b\u306f \u540d\u524d\u4fee\u98fe - \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308b\u540d\u524d\u4fee\u98fe\u306e\u76f8\u9055 - Wikipedia \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3092\u7121\u52b9\u5316\u3059\u308b\u3053\u3068\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f9d\u5b58\u305b\u305a\u306b\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3092\u7121\u52b9\u5316\u3059\u308b\u306b\u306f\u5ba3\u8a00\u3092 extern \"C\" \u306e\u30d6\u30ed\u30c3\u30af\u306b\u542b\u3081\u307e\u3059\u3002 \u3053\u308c\u306f C \u8a00\u8a9e\u3067\u30ea\u30f3\u30af\u53ef\u80fd\u306b\u3059\u308b\u3068\u3044\u3046\u6307\u5b9a\u3067\u3001 \u540d\u524d\u306e\u91cd\u8907\u3092\u7981\u6b62\u3059\u308b\u4ee3\u308f\u308a\u306b\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u304c\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 extern \"C\" { int Add ( int a , int b ) { return a + b ; } } extern \"C\" \u306e\u30d6\u30ed\u30c3\u30af\u3067\u5ba3\u8a00\u3055\u308c\u305f\u5834\u5408\u306b\u306f\u3001\u95a2\u6570\u540d\u304c\u305d\u306e\u307e\u307e\u30b7\u30f3\u30dc\u30eb\u540d\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 $ nm add.o 0000000000000000 T Add dlsym() \u3082\u6b21\u306e\u3088\u3046\u306b\u95a2\u6570\u540d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 void * const symbol_add = dlsym ( handle , \"Add\" );","title":"11.4 \u52d5\u7684\u30ed\u30fc\u30c9\u3068\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0"},{"location":"ch11-04-dynamic-loading-and-name-mangling/#_1","text":"\u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u74b0\u5883 Windows \u306e MSYS2 \u74b0\u5883\u306f\u69cb\u6210\u304c\u8907\u96d1\u306a\u305f\u3081\u3001\u8aac\u660e\u3067\u306f Linux \u74b0\u5883\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u52d5\u7684\u30ea\u30f3\u30af\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001 \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u4e2d\u306b\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3093\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u5b9f\u884c\u4e2d\u306b\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3092\u52d5\u7684\u30ed\u30fc\u30c9\u3068\u3044\u3044\u307e\u3059\u3002 \u52d5\u7684\u30ed\u30fc\u30c9\u306f C++ \u306e\u6a19\u6e96\u6a5f\u80fd\u3067\u306f\u306a\u3044\u305f\u3081\u3001\u51e6\u7406\u7cfb\u56fa\u6709\u306e\u51e6\u7406\u304c\u5fc5\u8981\u3067\u3059\u3002 Linux \u74b0\u5883\u3067\u4f7f\u7528\u3059\u308b API \u306e\u8a73\u7d30\u306f Man page of DLOPEN - JM Project \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u307e\u305f\u3001\u3053\u308c\u3089\u306e API \u3067\u4f7f\u7528\u3055\u308c\u308b void \u30dd\u30a4\u30f3\u30bf\u306b\u3064\u3044\u3066\u306f void \u30dd\u30a4\u30f3\u30bf \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u6b21\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 #include <iostream> #include <dlfcn.h> int main () { void * handle = dlopen ( \"libhoge.so\" , RTLD_NOW ); if ( handle == NULL ) { const char * const error_message = dlerror (); std :: cerr << error_message << std :: endl ; return 1 ; } void * const symbol_add = dlsym ( handle , \"_Z3Addii\" ); { const char * const error_message = dlerror (); if ( error_message != NULL ) { std :: cerr << error_message << std :: endl ; dlclose ( handle ); return 1 ; } } void * const symbol_sub = dlsym ( handle , \"_Z3Subii\" ); { const char * const error_message = dlerror (); if ( error_message != NULL ) { std :: cerr << error_message << std :: endl ; dlclose ( handle ); return 1 ; } } auto Add = reinterpret_cast < int ( * )( int , int ) > ( symbol_add ); auto Sub = reinterpret_cast < int ( * )( int , int ) > ( symbol_sub ); std :: cout << Add ( 1 , 2 ) << std :: endl ; std :: cout << Sub ( 3 , 4 ) << std :: endl ; dlclose ( handle ); return 0 ; } add.cc 1 2 3 int Add ( int a , int b ) { return a + b ; } sub.cc 1 2 3 int Sub ( int a , int b ) { return a - b ; }","title":"\u52d5\u7684\u30ed\u30fc\u30c9\u3068\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0"},{"location":"ch11-04-dynamic-loading-and-name-mangling/#_2","text":"add.cc \u3068 sub.cc \u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u751f\u6210\u3055\u308c\u308b 2\u3064\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb add.o \u3068 sub.o \u304b\u3089 \u4f5c\u6210\u3057\u305f\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092 libhoge.so \u3068\u3057\u307e\u3059\u3002 Linux \u74b0\u5883\u3067\u52d5\u7684\u30ed\u30fc\u30c9\u3092\u884c\u3046\u305f\u3081\u306b\u306f OS \u304c\u63d0\u4f9b\u3059\u308b libdl.so \u3092\u52d5\u7684\u30ea\u30f3\u30af\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 libdl.so \u3092\u52d5\u7684\u30ea\u30f3\u30af\u3057\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\u3059\u308b\u306b\u306f -ldl \u3092\u3064\u3051\u307e\u3059\u3002 g++ -std = c++11 main.o -ldl \u52d5\u7684\u30ed\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u884c\u3044\u307e\u3059\u3002 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u958b\u304f \u95a2\u6570\u3084\u5909\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u9589\u3058\u308b","title":"\u52d5\u7684\u30ed\u30fc\u30c9"},{"location":"ch11-04-dynamic-loading-and-name-mangling/#_3","text":"\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u958b\u304f\u306b\u306f dlopen() \u3092\u4f7f\u3044\u307e\u3059\u3002 \u52d5\u7684\u30ed\u30fc\u30c9\u306b\u95a2\u3059\u308b\u51e6\u7406\u3092\u4f7f\u3046\u306b\u306f <dlfcn.h> \u306e\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 #include <iostream> #include <dlfcn.h> // \u7b2c1\u5f15\u6570\u306b\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u6307\u5b9a\u3059\u308b void * handle = dlopen ( \"libhoge.so\" , RTLD_NOW ); if ( handle == NULL ) { const char * const error_message = dlerror (); std :: cerr << error_message << std :: endl ; return 1 ; } dlopen() \u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f NULL \u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002 dlerror() \u3067\u306f\u6700\u5f8c\u306b\u4f7f\u7528\u3055\u308c\u305f\u52d5\u7684\u30ed\u30fc\u30c9\u306e API \u3067\u30a8\u30e9\u30fc\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u5374\u3057\u307e\u3059\u3002 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u63a2\u3057\u65b9\u306f\u52d5\u7684\u30ea\u30f3\u30af\u3057\u305f\u5834\u5408\u3068\u540c\u69d8\u3067\u3059\u3002 \u4ee5\u4e0b\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u5834\u5408\u306f export LD_LIBRARY_PATH=. \u3092\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002 $ ./a.out libhoge.so: cannot open shared object file: No such file or directory dlopen() \u304c\u6b63\u5e38\u306b\u7d42\u4e86\u3057\u305f\u5834\u5408\u306f\u30cf\u30f3\u30c9\u30eb\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002 \u3053\u306e\u30cf\u30f3\u30c9\u30eb\u3092\u7528\u3044\u3066\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u64cd\u4f5c\u3057\u307e\u3059\u3002","title":"\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u958b\u304f"},{"location":"ch11-04-dynamic-loading-and-name-mangling/#_4","text":"dlopen() \u3067\u53d6\u5f97\u3057\u305f\u30cf\u30f3\u30c9\u30eb\u304b\u3089 \u95a2\u6570\u3084\u5909\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f dlsym() \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 dlsym() \u3067\u306f\u7b2c1\u5f15\u6570\u306b\u30cf\u30f3\u30c9\u30eb\u3001\u7b2c2\u5f15\u6570\u306b\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \u30b7\u30f3\u30dc\u30eb\u540d\u306f nm \u30b3\u30de\u30f3\u30c9\u3067 \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3084\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6307\u5b9a\u3057\u3066\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 $ nm add.o 0000000000000000 T _Z3Addii $ nm sub.o 0000000000000000 T _Z3Subii $ nm libhoge.so 0000000000200e88 d _DYNAMIC 0000000000201000 d _GLOBAL_OFFSET_TABLE_ w _ITM_deregisterTMCloneTable w _ITM_registerTMCloneTable w _Jv_RegisterClasses 0000000000000620 T _Z3Addii 0000000000000634 T _Z3Subii 00000000000006f8 r __FRAME_END__ 0000000000000654 r __GNU_EH_FRAME_HDR 0000000000200e80 d __JCR_END__ 0000000000200e80 d __JCR_LIST__ 0000000000201020 d __TMC_END__ 0000000000201020 B __bss_start w __cxa_finalize 00000000000005b0 t __do_global_dtors_aux 0000000000200e78 t __do_global_dtors_aux_fini_array_entry 0000000000201018 d __dso_handle 0000000000200e70 t __frame_dummy_init_array_entry w __gmon_start__ 0000000000201020 D _edata 0000000000201028 B _end 0000000000000648 T _fini 00000000000004e0 T _init 0000000000201020 b completed.7594 0000000000000520 t deregister_tm_clones 00000000000005f0 t frame_dummy 0000000000000560 t register_tm_clones \u3053\u306e\u4f8b\u3067\u306f int Add(int a, int b) \u306f _Z3Addii \u3001 int Sub(int a, int b) \u306f _Z3Subii \u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u540d\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002 dlsym() \u3067 int Add(int a, int b) \u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 // \u7b2c1\u5f15\u6570\u306b\u30cf\u30f3\u30c9\u30eb\u3001\u7b2c2\u5f15\u6570\u306b\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u6307\u5b9a void * const symbol_add = dlsym ( handle , \"_Z3Addii\" ); { const char * const error_message = dlerror (); if ( error_message != NULL ) { std :: cerr << error_message << std :: endl ; dlclose ( handle ); return 1 ; } } dlsym() \u304c\u6b63\u5e38\u306b\u7d42\u4e86\u3057\u305f\u5834\u5408\u306b\u306f\u305d\u306e\u30b7\u30f3\u30dc\u30eb\u306e\u30dd\u30a4\u30f3\u30bf\u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u3002 \u30b7\u30f3\u30dc\u30eb\u304c\u95a2\u6570\u306a\u3089\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3068\u306a\u308a\u307e\u3059\u3002 dlsym() \u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306f NULL \u304c\u8fd4\u5374\u3055\u308c\u307e\u3059\u304c\u3001 \u6b63\u5e38\u306b\u7d42\u4e86\u3057\u305f\u5834\u5408\u306e\u7d50\u679c\u304c NULL \u306b\u306a\u308b\u3053\u3068\u3082\u3042\u308b\u305f\u3081\u3001\u30a8\u30e9\u30fc\u306e\u6709\u7121\u306f\u76f4\u5f8c\u306e dlerror() \u306e\u7d50\u679c\u3067\u5224\u65ad\u3057\u307e\u3059\u3002 dlerror() \u306f\u6700\u5f8c\u306b\u4f7f\u7528\u3055\u308c\u305f\u52d5\u7684\u30ed\u30fc\u30c9\u306e API \u3067\u30a8\u30e9\u30fc\u304c\u306a\u3051\u308c\u3070 NULL \u3092\u8fd4\u5374\u3057\u307e\u3059\u3002 dlsym() \u306e\u623b\u308a\u5024\u306f void* \u3067\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u306a\u3044\u305f\u3081\u30ad\u30e3\u30b9\u30c8\u304c\u5fc5\u8981\u3067\u3059\u3002 \u95a2\u6570\u3067\u3042\u308c\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002 auto Add = reinterpret_cast < int ( * )( int , int ) > ( symbol_add ); std :: cout << Add ( 1 , 2 ) << std :: endl ;","title":"\u95a2\u6570\u3084\u5909\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d6\u5f97"},{"location":"ch11-04-dynamic-loading-and-name-mangling/#_5","text":"\u958b\u3044\u305f\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f7f\u7528\u304c\u7d42\u308f\u3063\u305f\u3089\u9589\u3058\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u9589\u3058\u308b\u306b\u306f dlclose() \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 dlclose ( handle );","title":"\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u9589\u3058\u308b"},{"location":"ch11-04-dynamic-loading-and-name-mangling/#_6","text":"\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u5909\u6570\u3084\u95a2\u6570\u3092\u540d\u524d\u3060\u3051\u3067\u8b58\u5225\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 C \u8a00\u8a9e\u306f\u30ea\u30f3\u30b1\u30fc\u30b8\u6307\u5b9a\u304c\u5185\u90e8\u30ea\u30f3\u30b1\u30fc\u30b8\u3067\u306f\u306a\u3044\u5909\u6570\u3084\u95a2\u6570\u3092\u540d\u524d\u3060\u3051\u3067\u8b58\u5225\u3057\u3066\u3044\u307e\u3059\u304c\u3001 C++ \u306f C \u8a00\u8a9e\u306b\u306f\u306a\u3044\u4ee5\u4e0b\u306e\u6a5f\u80fd\u306b\u3088\u3063\u3066\u540d\u524d\u3060\u3051\u3067\u8b58\u5225\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 \u30af\u30e9\u30b9 \u540d\u524d\u7a7a\u9593 \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8 \u95a2\u6570\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9 \u3053\u306e\u554f\u984c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u3001 \u8b58\u5225\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u3059\u3079\u3066\u540d\u524d\u306b\u542b\u3081\u308b\u306a\u3069\u3057\u3066\u751f\u6210\u3057\u305f\u4e00\u610f\u306a\u540d\u524d\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u308c\u3092\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3068\u3044\u3044\u307e\u3059\u3002 int Add(int a, int b) \u304c _Z3Addii \u3068\u3044\u3063\u305f\u30b7\u30f3\u30dc\u30eb\u540d\u306b\u306a\u308b\u306e\u306f\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u306e\u7d50\u679c\u3067\u3059\u3002 \u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3092\u884c\u3046\u524d\u306e\u60c5\u5831\u306f c++filt \u30b3\u30de\u30f3\u30c9\u3067\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 $ nm add.o 0000000000000000 T _Z3Addii $ nm add.o | c++filt 0000000000000000 T Add ( int, int ) \u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u306e\u65b9\u6cd5\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u4f9d\u5b58\u3067\u3059\u3002 \u540c\u3058\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3042\u3063\u3066\u3082\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u7570\u306a\u308c\u3070\u3001\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u306e\u7d50\u679c\u304c\u4e00\u81f4\u3059\u308b\u4fdd\u8a3c\u306f\u3042\u308a\u307e\u305b\u3093\u3002 \u5177\u4f53\u4f8b\u306f \u540d\u524d\u4fee\u98fe - \u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u3088\u308b\u540d\u524d\u4fee\u98fe\u306e\u76f8\u9055 - Wikipedia \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3092\u7121\u52b9\u5316\u3059\u308b\u3053\u3068\u3067\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f9d\u5b58\u305b\u305a\u306b\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u3092\u7121\u52b9\u5316\u3059\u308b\u306b\u306f\u5ba3\u8a00\u3092 extern \"C\" \u306e\u30d6\u30ed\u30c3\u30af\u306b\u542b\u3081\u307e\u3059\u3002 \u3053\u308c\u306f C \u8a00\u8a9e\u3067\u30ea\u30f3\u30af\u53ef\u80fd\u306b\u3059\u308b\u3068\u3044\u3046\u6307\u5b9a\u3067\u3001 \u540d\u524d\u306e\u91cd\u8907\u3092\u7981\u6b62\u3059\u308b\u4ee3\u308f\u308a\u306b\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0\u304c\u884c\u308f\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002 extern \"C\" { int Add ( int a , int b ) { return a + b ; } } extern \"C\" \u306e\u30d6\u30ed\u30c3\u30af\u3067\u5ba3\u8a00\u3055\u308c\u305f\u5834\u5408\u306b\u306f\u3001\u95a2\u6570\u540d\u304c\u305d\u306e\u307e\u307e\u30b7\u30f3\u30dc\u30eb\u540d\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002 $ nm add.o 0000000000000000 T Add dlsym() \u3082\u6b21\u306e\u3088\u3046\u306b\u95a2\u6570\u540d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002 void * const symbol_add = dlsym ( handle , \"Add\" );","title":"\u540d\u524d\u30de\u30f3\u30b0\u30ea\u30f3\u30b0"},{"location":"ch11-05-library-updating-and-compatibility/","text":"\u30e9\u30a4\u30d6\u30e9\u30ea\u66f4\u65b0\u3068\u4e92\u63db\u6027 \u00b6 \u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u74b0\u5883 Windows \u306e MSYS2 \u74b0\u5883\u306f\u69cb\u6210\u304c\u8907\u96d1\u306a\u305f\u3081\u3001\u8aac\u660e\u3067\u306f Linux \u74b0\u5883\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u66f4\u65b0\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u3001 \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5fc5\u8981\u306a\u4f5c\u696d\u306f\u4ee5\u4e0b\u306e\u9805\u76ee\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002 \u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3069\u3061\u3089\u3067\u3042\u308b\u304b \u66f4\u65b0\u524d\u5f8c\u3067\u306e API \u4e92\u63db\u6027 \u66f4\u65b0\u524d\u5f8c\u3067\u306e ABI \u4e92\u63db\u6027 API \u4e92\u63db\u6027 \u00b6 API \u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u7565\u3067\u3001 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u3067\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u3053\u3068\u3092\u3044\u3044\u307e\u3059\u3002 \u66f4\u65b0\u524d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b58\u5728\u3059\u308b API \u3092 \u66f4\u65b0\u5f8c\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u308b\u5834\u5408\u306b API \u4e92\u63db\u6027\u304c\u3042\u308b\u3068\u3044\u3044\u307e\u3059\u3002 API \u4e92\u63db\u6027\u304c\u3042\u308c\u3070 \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30fc\u30c9\u4fee\u6b63\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002 API \u306e\u5909\u5316\u3092\u4f34\u308f\u306a\u3044\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5909\u66f4\u306f API \u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30e1\u30f3\u30c8\u306e\u5909\u66f4 (\u8aa4\u5b57\u4fee\u6b63\u306a\u3069) \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u5b9f\u88c5\u306e\u5909\u66f4 (\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3084\u30d0\u30b0\u4fee\u6b63\u306a\u3069) API \u306e\u5909\u5316\u3092\u4f34\u3046\u5909\u66f4\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b API \u4e92\u63db\u6027\u306e\u3042\u308b\u3082\u306e\u3068\u306a\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 API \u4e92\u63db\u6027\u306e\u3042\u308b\u5909\u66f4 API \u306e\u65b0\u898f\u8ffd\u52a0 \u66f4\u65b0\u524d\u306e\u4ed5\u69d8\u3092\u7dad\u6301\u3057\u3066 API \u3092\u5909\u66f4 (\u62e1\u5f35) API \u4e92\u63db\u6027\u306e\u306a\u3044\u5909\u66f4 API \u306e\u524a\u9664 \u66f4\u65b0\u524d\u306e\u4ed5\u69d8\u3092\u7dad\u6301\u305b\u305a API \u3092\u5909\u66f4 \u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea \u00b6 \u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea \u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u53d6\u308a\u8fbc\u307e\u308c\u308b\u305f\u3081\u3001 \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u518d\u30d3\u30eb\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u53d6\u308a\u8fbc\u307e\u308c\u306a\u3044\u305f\u3081\u3001 \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u518d\u30d3\u30eb\u30c9\u306f\u4e0d\u8981\u3067\u3059\u3002 \u305f\u3060\u3057\u3001\u5f8c\u8ff0\u306e ABI \u4e92\u63db\u6027\u304c\u306a\u3044\u5834\u5408\u306b\u306f\u518d\u30d3\u30eb\u30c9\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002 ABI \u4e92\u63db\u6027 \u00b6 ABI \u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d0\u30a4\u30ca\u30ea\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u7565\u3067\u3001 \u30d0\u30a4\u30ca\u30ea\u30ec\u30d9\u30eb\u3067\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u3053\u3068\u3092\u3044\u3044\u307e\u3059\u3002 \u66f4\u65b0\u524d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b58\u5728\u3059\u308b ABI \u3092 \u66f4\u65b0\u5f8c\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u308b\u5834\u5408\u306b ABI \u4e92\u63db\u6027\u304c\u3042\u308b\u3068\u3044\u3044\u307e\u3059\u3002 ABI \u4e92\u63db\u6027\u304c\u3042\u308c\u3070 \u5b9f\u884c\u74b0\u5883\u306e\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002 \u901a\u5e38\u306f API \u306e\u5909\u66f4\u304c\u306a\u3051\u308c\u3070 ABI \u4e92\u63db\u6027\u304c\u3042\u308a\u3001 API \u4e92\u63db\u6027\u304c\u306a\u3051\u308c\u3070 ABI \u4e92\u63db\u6027\u306f\u3042\u308a\u307e\u305b\u3093\u3002 ABI \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u4f9d\u5b58 ABI \u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u4f9d\u5b58\u3067\u3059\u3002 \u540c\u3058\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3042\u3063\u3066\u3082\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u7570\u306a\u308c\u3070 ABI \u4e92\u63db\u6027\u306f\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u305f\u3068\u3048\u3070 GCC 4.x \u3068 GCC 5.x \u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e ABI \u306f\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002 GCC 5.x \u3067\u306f _GLIBCXX_USE_CXX11_ABI \u30de\u30af\u30ed\u3092 0 \u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067 GCC 4.x \u3068 ABI \u4e92\u63db\u6027\u304c\u3042\u308b\u3088\u3046\u306b\u30d3\u30eb\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u8a73\u7d30\u306f Dual ABI - The GNU C++ Library \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4e00\u65b9\u3067\u3001\u7570\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u9593\u3067\u3082 ABI \u4e92\u63db\u6027\u304c\u3042\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002 \u305f\u3068\u3048\u3070 Clang \u3067\u30d3\u30eb\u30c9\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092 GCC \u3067\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 API \u4e92\u63db\u6027\u306e\u3042\u308b API \u306e\u5909\u66f4\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b ABI \u4e92\u63db\u6027\u306e\u3042\u308b\u3082\u306e\u3068\u306a\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 ABI \u4e92\u63db\u6027\u306e\u3042\u308b\u5909\u66f4 \u30af\u30e9\u30b9\u306b\u5c5e\u3055\u306a\u3044\u95a2\u6570\u3084\u5909\u6570\u306e\u8ffd\u52a0 ABI \u4e92\u63db\u6027\u306e\u306a\u3044\u5909\u66f4 \u30af\u30e9\u30b9\u306b\u30e1\u30f3\u30d0\u5909\u6570\u3092\u8ffd\u52a0 (\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30a4\u30ba\u5909\u66f4) \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570\u306e\u5ba3\u8a00\u9806\u5e8f\u3092\u5909\u66f4 (\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30e2\u30ea\u914d\u7f6e\u5909\u66f4) \u4eee\u60f3\u95a2\u6570\u306e\u8ffd\u52a0 (vtable \u306e\u30b5\u30a4\u30ba\u5909\u66f4) \u8a73\u7d30\u306f Policies/Binary Compatibility Issues With C++ - KDE Community Wiki \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"11.5 \u30e9\u30a4\u30d6\u30e9\u30ea\u66f4\u65b0\u3068\u4e92\u63db\u6027"},{"location":"ch11-05-library-updating-and-compatibility/#_1","text":"\u8aac\u660e\u306b\u4f7f\u7528\u3059\u308b\u74b0\u5883 Windows \u306e MSYS2 \u74b0\u5883\u306f\u69cb\u6210\u304c\u8907\u96d1\u306a\u305f\u3081\u3001\u8aac\u660e\u3067\u306f Linux \u74b0\u5883\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u66f4\u65b0\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u3001 \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5fc5\u8981\u306a\u4f5c\u696d\u306f\u4ee5\u4e0b\u306e\u9805\u76ee\u3067\u6c7a\u307e\u308a\u307e\u3059\u3002 \u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3069\u3061\u3089\u3067\u3042\u308b\u304b \u66f4\u65b0\u524d\u5f8c\u3067\u306e API \u4e92\u63db\u6027 \u66f4\u65b0\u524d\u5f8c\u3067\u306e ABI \u4e92\u63db\u6027","title":"\u30e9\u30a4\u30d6\u30e9\u30ea\u66f4\u65b0\u3068\u4e92\u63db\u6027"},{"location":"ch11-05-library-updating-and-compatibility/#api","text":"API \u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u7565\u3067\u3001 \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u3067\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u3053\u3068\u3092\u3044\u3044\u307e\u3059\u3002 \u66f4\u65b0\u524d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b58\u5728\u3059\u308b API \u3092 \u66f4\u65b0\u5f8c\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u308b\u5834\u5408\u306b API \u4e92\u63db\u6027\u304c\u3042\u308b\u3068\u3044\u3044\u307e\u3059\u3002 API \u4e92\u63db\u6027\u304c\u3042\u308c\u3070 \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30b3\u30fc\u30c9\u4fee\u6b63\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002 API \u306e\u5909\u5316\u3092\u4f34\u308f\u306a\u3044\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5909\u66f4\u306f API \u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u30b3\u30e1\u30f3\u30c8\u306e\u5909\u66f4 (\u8aa4\u5b57\u4fee\u6b63\u306a\u3069) \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u5b9f\u88c5\u306e\u5909\u66f4 (\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3084\u30d0\u30b0\u4fee\u6b63\u306a\u3069) API \u306e\u5909\u5316\u3092\u4f34\u3046\u5909\u66f4\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b API \u4e92\u63db\u6027\u306e\u3042\u308b\u3082\u306e\u3068\u306a\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 API \u4e92\u63db\u6027\u306e\u3042\u308b\u5909\u66f4 API \u306e\u65b0\u898f\u8ffd\u52a0 \u66f4\u65b0\u524d\u306e\u4ed5\u69d8\u3092\u7dad\u6301\u3057\u3066 API \u3092\u5909\u66f4 (\u62e1\u5f35) API \u4e92\u63db\u6027\u306e\u306a\u3044\u5909\u66f4 API \u306e\u524a\u9664 \u66f4\u65b0\u524d\u306e\u4ed5\u69d8\u3092\u7dad\u6301\u305b\u305a API \u3092\u5909\u66f4","title":"API \u4e92\u63db\u6027"},{"location":"ch11-05-library-updating-and-compatibility/#_2","text":"\u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea \u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u53d6\u308a\u8fbc\u307e\u308c\u308b\u305f\u3081\u3001 \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u518d\u30d3\u30eb\u30c9\u304c\u5fc5\u8981\u3067\u3059\u3002 \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea \u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u53d6\u308a\u8fbc\u307e\u308c\u306a\u3044\u305f\u3081\u3001 \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u518d\u30d3\u30eb\u30c9\u306f\u4e0d\u8981\u3067\u3059\u3002 \u305f\u3060\u3057\u3001\u5f8c\u8ff0\u306e ABI \u4e92\u63db\u6027\u304c\u306a\u3044\u5834\u5408\u306b\u306f\u518d\u30d3\u30eb\u30c9\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002","title":"\u9759\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea"},{"location":"ch11-05-library-updating-and-compatibility/#abi","text":"ABI \u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d0\u30a4\u30ca\u30ea\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u7565\u3067\u3001 \u30d0\u30a4\u30ca\u30ea\u30ec\u30d9\u30eb\u3067\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u3053\u3068\u3092\u3044\u3044\u307e\u3059\u3002 \u66f4\u65b0\u524d\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u5b58\u5728\u3059\u308b ABI \u3092 \u66f4\u65b0\u5f8c\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u308b\u5834\u5408\u306b ABI \u4e92\u63db\u6027\u304c\u3042\u308b\u3068\u3044\u3044\u307e\u3059\u3002 ABI \u4e92\u63db\u6027\u304c\u3042\u308c\u3070 \u5b9f\u884c\u74b0\u5883\u306e\u52d5\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5909\u66f4\u3059\u308b\u3060\u3051\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002 \u901a\u5e38\u306f API \u306e\u5909\u66f4\u304c\u306a\u3051\u308c\u3070 ABI \u4e92\u63db\u6027\u304c\u3042\u308a\u3001 API \u4e92\u63db\u6027\u304c\u306a\u3051\u308c\u3070 ABI \u4e92\u63db\u6027\u306f\u3042\u308a\u307e\u305b\u3093\u3002 ABI \u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u4f9d\u5b58 ABI \u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u4f9d\u5b58\u3067\u3059\u3002 \u540c\u3058\u30b3\u30f3\u30d1\u30a4\u30e9\u3067\u3042\u3063\u3066\u3082\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u7570\u306a\u308c\u3070 ABI \u4e92\u63db\u6027\u306f\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 \u305f\u3068\u3048\u3070 GCC 4.x \u3068 GCC 5.x \u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e ABI \u306f\u4e92\u63db\u6027\u304c\u3042\u308a\u307e\u305b\u3093\u3002 GCC 5.x \u3067\u306f _GLIBCXX_USE_CXX11_ABI \u30de\u30af\u30ed\u3092 0 \u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067 GCC 4.x \u3068 ABI \u4e92\u63db\u6027\u304c\u3042\u308b\u3088\u3046\u306b\u30d3\u30eb\u30c9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u8a73\u7d30\u306f Dual ABI - The GNU C++ Library \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u4e00\u65b9\u3067\u3001\u7570\u306a\u308b\u30b3\u30f3\u30d1\u30a4\u30e9\u9593\u3067\u3082 ABI \u4e92\u63db\u6027\u304c\u3042\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002 \u305f\u3068\u3048\u3070 Clang \u3067\u30d3\u30eb\u30c9\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092 GCC \u3067\u4f7f\u7528\u3067\u304d\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002 API \u4e92\u63db\u6027\u306e\u3042\u308b API \u306e\u5909\u66f4\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b ABI \u4e92\u63db\u6027\u306e\u3042\u308b\u3082\u306e\u3068\u306a\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002 ABI \u4e92\u63db\u6027\u306e\u3042\u308b\u5909\u66f4 \u30af\u30e9\u30b9\u306b\u5c5e\u3055\u306a\u3044\u95a2\u6570\u3084\u5909\u6570\u306e\u8ffd\u52a0 ABI \u4e92\u63db\u6027\u306e\u306a\u3044\u5909\u66f4 \u30af\u30e9\u30b9\u306b\u30e1\u30f3\u30d0\u5909\u6570\u3092\u8ffd\u52a0 (\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30a4\u30ba\u5909\u66f4) \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u5909\u6570\u306e\u5ba3\u8a00\u9806\u5e8f\u3092\u5909\u66f4 (\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30e2\u30ea\u914d\u7f6e\u5909\u66f4) \u4eee\u60f3\u95a2\u6570\u306e\u8ffd\u52a0 (vtable \u306e\u30b5\u30a4\u30ba\u5909\u66f4) \u8a73\u7d30\u306f Policies/Binary Compatibility Issues With C++ - KDE Community Wiki \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"ABI \u4e92\u63db\u6027"},{"location":"debug-build/","text":"\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9 \u00b6 \u901a\u5e38\u306e\u30d3\u30eb\u30c9\u306f\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u3068\u547c\u3070\u308c\u3001 \u5b9f\u884c\u6642\u306b\u4e0d\u8981\u306a\u60c5\u5831\u3092\u7701\u3044\u3066\u6700\u9069\u5316\u3092\u884c\u3046\u3053\u3068\u3067\u9ad8\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002 \u30b3\u30fc\u30c9\u306b\u304a\u3051\u308b\u30d5\u30a1\u30a4\u30eb\u3084\u884c\u756a\u53f7\u3092\u306f\u3058\u3081\u3001 \u30c7\u30d0\u30c3\u30b0\u3067\u5fc5\u8981\u306a\u60c5\u5831\u306e\u591a\u304f\u306f\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u3067\u306f\u7701\u304b\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3001 \u30c7\u30d0\u30c3\u30b0\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u3067\u30d3\u30eb\u30c9\u3057\u305f\u3082\u306e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u3092\u884c\u3046\u305f\u3081\u306b\u306f -g \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 $ g++ -std = c++11 -g main.cc","title":"\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9"},{"location":"debug-build/#_1","text":"\u901a\u5e38\u306e\u30d3\u30eb\u30c9\u306f\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u3068\u547c\u3070\u308c\u3001 \u5b9f\u884c\u6642\u306b\u4e0d\u8981\u306a\u60c5\u5831\u3092\u7701\u3044\u3066\u6700\u9069\u5316\u3092\u884c\u3046\u3053\u3068\u3067\u9ad8\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002 \u30b3\u30fc\u30c9\u306b\u304a\u3051\u308b\u30d5\u30a1\u30a4\u30eb\u3084\u884c\u756a\u53f7\u3092\u306f\u3058\u3081\u3001 \u30c7\u30d0\u30c3\u30b0\u3067\u5fc5\u8981\u306a\u60c5\u5831\u306e\u591a\u304f\u306f\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u3067\u306f\u7701\u304b\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3001 \u30c7\u30d0\u30c3\u30b0\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u3067\u30d3\u30eb\u30c9\u3057\u305f\u3082\u306e\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u3092\u884c\u3046\u305f\u3081\u306b\u306f -g \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 $ g++ -std = c++11 -g main.cc","title":"\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9"},{"location":"debug-debugger/","text":"\u30c7\u30d0\u30c3\u30ac \u00b6 \u30b3\u30f3\u30d1\u30a4\u30e9\u3054\u3068\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30d0\u30c3\u30ac\u304c\u5b58\u5728\u3057\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9 \u30c7\u30d0\u30c3\u30ac GCC GDB Clang LLDB Visual C++ CDB \u672c\u66f8\u3067\u306f GCC \u3092\u6271\u3046\u305f\u3081\u30c7\u30d0\u30c3\u30ac\u306f GDB \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002 GDB \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pacman -S gdb","title":"\u30c7\u30d0\u30c3\u30ac"},{"location":"debug-debugger/#_1","text":"\u30b3\u30f3\u30d1\u30a4\u30e9\u3054\u3068\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30d0\u30c3\u30ac\u304c\u5b58\u5728\u3057\u307e\u3059\u3002 \u30b3\u30f3\u30d1\u30a4\u30e9 \u30c7\u30d0\u30c3\u30ac GCC GDB Clang LLDB Visual C++ CDB \u672c\u66f8\u3067\u306f GCC \u3092\u6271\u3046\u305f\u3081\u30c7\u30d0\u30c3\u30ac\u306f GDB \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002","title":"\u30c7\u30d0\u30c3\u30ac"},{"location":"debug-debugger/#gdb","text":"msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pacman -S gdb","title":"GDB \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"debug-gdb/","text":"GDB \u306b\u3088\u308b CUI \u30c7\u30d0\u30c3\u30b0 \u00b6 GDB \u306e\u8d77\u52d5\u3068\u7d42\u4e86 \u00b6 \u8d77\u52d5 \u00b6 \u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u3055\u308c\u305f a.exe \u3092\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u305f\u3081\u306b \u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066 GDB \u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 $ gdb a.exe GDB \u306f\u8d77\u52d5\u6642\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3069\u306e\u60c5\u5831\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 a.exe \u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3059\u308b\u3068\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3069\u306e\u60c5\u5831\u306e\u5f8c\u306b Reading symbols from ./a.exe...done. \u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 \u30d7\u30ed\u30f3\u30d7\u30c8\u3068\u547c\u3070\u308c\u308b\u6587\u5b57\u5217 (gdb) \u304c\u51fa\u529b\u3055\u308c\u308b\u3068 GDB \u306e\u30b3\u30de\u30f3\u30c9\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u7d42\u4e86 \u00b6 quit \u3067 GDB \u3092\u7d42\u4e86\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) quit quit \u306f q \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) q \u30c7\u30d0\u30c3\u30b0\u958b\u59cb \u00b6 run \u3067\u30c7\u30d0\u30c3\u30b0\u5bfe\u8c61\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 (gdb) run run \u306f r \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) r \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\u3060\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u307e\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8 \u00b6 \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 #include <iostream> #include \"sum.h\" int main () { std :: cout << Sum ( 1 , 2 ) << std :: endl ; return 0 ; } sum.h 1 2 3 4 5 6 #ifndef SUM_H_ #define SUM_H_ int Sum ( int a , int b ); #endif // SUM_H_ sum.cc 1 2 3 4 5 #include \"sum.h\" int Sum ( int a , int b ) { return a + b ; } \u8ffd\u52a0 \u00b6 break \u30d5\u30a1\u30a4\u30eb:\u884c\u756a\u53f7 \u307e\u305f\u306f break \u95a2\u6570\u540d \u3067\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 (gdb) break main.cc:6 Breakpoint 1 at 0x10040108d: file main.cc, line 6. (gdb) break Sum Breakpoint 2 at 0x10040113a: file sum.cc, line 4. break \u306f b \u3068\u7701\u7565\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 (gdb) b main.cc:6 Breakpoint 1 at 0x10040108d: file main.cc, line 6. (gdb) b Sum Breakpoint 2 at 0x10040113a: file sum.cc, line 4. \u4e00\u89a7\u306e\u78ba\u8a8d \u00b6 info breakpoints \u3067\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u306e\u4e00\u89a7\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) info breakpoints Num Type Disp Enb Address What 1 breakpoint keep y 0x000000010040108d in main() at main.cc:6 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 info \u306f i \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 breakpoints \u306f break \u3084 b \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) i b Num Type Disp Enb Address What 1 breakpoint keep y 0x000000010040108d in main() at main.cc:6 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e00\u6642\u505c\u6b62 \u00b6 \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u305f\u72b6\u614b\u3067\u30c7\u30d0\u30c3\u30b0\u3092\u958b\u59cb\u3059\u308b\u3068\u3001 \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u5230\u9054\u3057\u305f\u6642\u70b9\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4e00\u6642\u505c\u6b62\u3057\u307e\u3059\u3002 (gdb) run Starting program: a.exe [New Thread 10676.0x3cf8] [New Thread 10676.0x1ab8] [New Thread 10676.0x17e4] [New Thread 10676.0x1494] [New Thread 10676.0x36a4] Thread 1 \"a\" hit Breakpoint 1, main () at main.cc:6 6 std::cout << Sum(1, 2) << std::endl; \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u518d\u958b \u00b6 continue \u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u518d\u958b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u5230\u9054\u3059\u308b\u3068\u518d\u3073\u4e00\u6642\u505c\u6b62\u3057\u307e\u3059\u3002 (gdb) continue Continuing. Thread 1 \"a\" hit Breakpoint 2, Sum (a=1, b=2) at sum.cc:4 4 return a + b; \u524a\u9664 \u00b6 delete n \u3067\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 n \u306b\u306f info breakpoints \u306e Num \u306e\u5024\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 (gdb) info breakpoints Num Type Disp Enb Address What 1 breakpoint keep y 0x000000010040108d in main() at main.cc:6 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 (gdb) delete 1 (gdb) info breakpoints Num Type Disp Enb Address What 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 delete \u306f d \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) i b Num Type Disp Enb Address What 1 breakpoint keep y 0x000000010040108d in main() at main.cc:6 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 (gdb) d 1 (gdb) i b Num Type Disp Enb Address What 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 delete \u3067\u5bfe\u8c61\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306b\u306f\u3059\u3079\u3066\u306e\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u524a\u9664\u3057\u307e\u3059\u3002 (gdb) info breakpoints Num Type Disp Enb Address What 1 breakpoint keep y 0x000000010040108d in main() at main.cc:6 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 (gdb) delete Delete all breakpoints? (y or n) y (gdb) info breakpoints No breakpoints or watchpoints. \u8a55\u4fa1\u5024\u306e\u8868\u793a \u00b6 \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <iostream> #include \"swap.h\" // \u6700\u5927\u516c\u7d04\u6570 int GreatestCommonDivisor ( int a , int b ) { while ( a != 0 ) { b = b % a ; Swap ( & a , & b ); } return b ; } // \u6700\u5c0f\u516c\u500d\u6570 int LeastCommonMultiple ( int a , int b ) { int gcd = GreatestCommonDivisor ( a , b ); return a * b / gcd ; } int main () { int a = 12 ; int b = 18 ; std :: cout << a << \" \u3068 \" << b << \" \u306e\u6700\u5c0f\u516c\u500d\u6570\u306f \" << LeastCommonMultiple ( a , b ) << \" \u3067\u3059\" << std :: endl ; return 0 ; } swap.h 1 2 3 4 5 6 7 #ifndef SWAP_H_ #define SWAP_H_ // 2\u3064\u306e\u5909\u6570\u306e\u5024\u3092\u5165\u308c\u66ff\u3048\u308b void Swap ( int * a , int * b ); #endif // SWAP_H_ swap.cc 1 2 3 4 5 6 7 #include \"swap.h\" void Swap ( int * a , int * b ) { int tmp = * a ; * a = * b ; * b = tmp ; } \u5909\u6570\u306e\u5024\u3092\u78ba\u8a8d \u00b6 print \u3067\u5909\u6570\u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) break main.cc:17 (gdb) run Thread 1 \"a\" hit Breakpoint 1, LeastCommonMultiple (a=12, b=18) at main.cc:17 17 return a * b / gcd; (gdb) print a $1 = 12 (gdb) print b $2 = 18 (gdb) print gcd $3 = 6 print \u306f p \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) b main.cc:17 (gdb) r Thread 1 \"a\" hit Breakpoint 1, LeastCommonMultiple (a=12, b=18) at main.cc:17 17 return a * b / gcd; (gdb) p a $1 = 12 (gdb) p b $2 = 18 (gdb) p gcd $3 = 6 \u78ba\u8a8d\u3057\u305f\u5024\u306e\u518d\u5229\u7528 \u00b6 \u5024\u3092\u78ba\u8a8d\u3059\u308b\u3068 $n = \u5024 \u3068\u51fa\u529b\u3055\u308c\u3001 $n \u3067\u7d50\u679c\u3092\u518d\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) break main.cc:8 (gdb) break main.cc:9 (gdb) run Starting program: a.exe Thread 1 \"a\" hit Breakpoint 1, GreatestCommonDivisor (a=12, b=18) at main.cc:8 8 b = b % a; (gdb) print b $1 = 18 (gdb) continue Continuing. Thread 1 \"a\" hit Breakpoint 2, GreatestCommonDivisor (a=12, b=6) at main.cc:9 9 Swap(&a, &b); (gdb) print b $2 = 6 (gdb) print $1 $3 = 18 \u4efb\u610f\u306e\u51e6\u7406\u3092\u5b9f\u884c \u00b6 print \u3067\u306f\u5909\u6570\u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001 \u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u884c\u3063\u3066\u305d\u306e\u623b\u308a\u5024\u3092\u78ba\u8a8d\u3057\u305f\u308a\u3001\u4efb\u610f\u306e\u6f14\u7b97\u3092\u884c\u3063\u305f\u7d50\u679c\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) break main.cc:17 (gdb) run Thread 1 \"a\" hit Breakpoint 1, LeastCommonMultiple (a=12, b=18) at main.cc:17 17 return a * b / gcd; (gdb) print gcd $1 = 6 (gdb) print GreatestCommonDivisor(b, a) $2 = 6 \u5909\u6570\u306e\u5024\u3092\u5909\u66f4\u3059\u308b\u4ee3\u5165\u306a\u3069\u3082\u884c\u3048\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u526f\u4f5c\u7528\u306b\u6c17\u3092\u3064\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 (gdb) break main.cc:17 (gdb) run Thread 1 \"a\" hit Breakpoint 1, LeastCommonMultiple (a=12, b=18) at main.cc:17 17 return a * b / gcd; (gdb) print gcd $1 = 6 (gdb) print gcd = 0 $2 = 0 (gdb) print gcd $3 = 0 \u30dd\u30a4\u30f3\u30bf\u306b\u5bfe\u3059\u308b\u64cd\u4f5c \u00b6 \u5909\u6570\u304b\u3089\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b & \u3084\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e * \u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 (gdb) break main.cc:9 (gdb) break Swap (gdb) run Starting program: a.exe Thread 1 \"a\" hit Breakpoint 1, GreatestCommonDivisor (a=12, b=6) at main.cc:9 9 Swap(&a, &b); (gdb) print &a $1 = (int *) 0xffffcb70 (gdb) continue Continuing. Thread 1 \"a\" hit Breakpoint 2, Swap (a=0xffffcb70, b=0xffffcb78) at swap.cc:4 4 int tmp = *a; (gdb) print a $2 = (int *) 0xffffcb70 (gdb) print *a $3 = 12 \u30b9\u30c6\u30c3\u30d7\u5b9f\u884c \u00b6 \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> #include \"circle.h\" double SquareOf ( double v ) { return v * v ; } double SquareOfDistance ( const Point & p , const Point & q ) { return SquareOf ( q . X () - p . X ()) + SquareOf ( q . Y () - p . Y ()); } bool Intersects ( const Circle & c1 , const Circle & c2 ) { auto c = SquareOfDistance ( c1 . Center (), c2 . Center ()); auto r = SquareOf ( c1 . Radius () + c2 . Radius ()); return c < r ; } int main () { Circle c1 ( Point ( 1 , 2 ), 3 ); Circle c2 ( Point ( 5 , 0 ), 2 ); if ( Intersects ( c1 , c2 )) { std :: cout << \"2\u3064\u306e\u5186\u306f\u4ea4\u5dee\u3057\u307e\u3059\" << std :: endl ; } else { std :: cout << \"2\u3064\u306e\u5186\u306f\u4ea4\u5dee\u3057\u307e\u305b\u3093\" << std :: endl ; } return 0 ; } circle.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #ifndef CIRCLE_H_ #define CIRCLE_H_ #include \"point.h\" class Circle { public : Circle ( const Point & center , double radius ) : center_ ( center ), radius_ ( radius ) {} Point Center () const { return center_ ; } double Radius () const { return radius_ ; } private : Point center_ ; double radius_ ; }; #endif // CIRCLE_H_ point.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #ifndef POINT_H_ #define POINT_H_ class Point { public : Point ( double x , double y ) : x_ ( x ), y_ ( y ) {} double X () const { return x_ ; } double Y () const { return y_ ; } private : double x_ ; double y_ ; }; #endif // POINT_H_ \u30b9\u30c6\u30c3\u30d7\u30aa\u30fc\u30d0\u30fc \u00b6 next \u3067\u73fe\u5728\u306e\u884c\u304b\u3089\u6b21\u306b\u51e6\u7406\u304c\u3042\u308b\u884c\u307e\u3067\u9032\u3081\u307e\u3059\u3002 (gdb) break Intersects (gdb) run Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) next 15 auto r = SquareOf(c1.Radius() + c2.Radius()); next \u306f n \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) b Intersects (gdb) r Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) n 15 auto r = SquareOf(c1.Radius() + c2.Radius()); \u30b9\u30c6\u30c3\u30d7\u30a4\u30f3 \u00b6 step \u3067\u73fe\u5728\u306e\u51e6\u7406\u304b\u3089\u6b21\u306e\u51e6\u7406\u307e\u3067\u9032\u3081\u307e\u3059\u3002 \u73fe\u5728\u306e\u51e6\u7406\u304c\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5834\u5408\u306b\u306f\u547c\u3073\u51fa\u3057\u305f\u95a2\u6570\u306e\u5185\u90e8\u3067\u505c\u6b62\u3057\u307e\u3059\u3002 (gdb) break Intersects (gdb) run Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) step Circle::Center (this=0xffffcb90) at circle.h:12 12 return center_; step \u306f s \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) b Intersects (gdb) r Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) s Circle::Center (this=0xffffcb90) at circle.h:12 12 return center_; \u30b9\u30c6\u30c3\u30d7\u30a2\u30a6\u30c8 \u00b6 finish \u3067\u73fe\u5728\u306e\u95a2\u6570\u304c\u7d42\u4e86\u3057\u3066\u547c\u3073\u51fa\u3057\u5143\u306b\u623b\u308b\u307e\u3067\u9032\u3081\u307e\u3059\u3002 (gdb) break Intersects (gdb) run Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) finish Run till exit from #0 Intersects (c1=..., c2=...) at main.cc:14 0x0000000100401233 in main () at main.cc:23 23 if (Intersects(c1, c2)) { Value returned is $1 = true finish \u306f fin \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) b Intersects (gdb) r Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) fin Run till exit from #0 Intersects (c1=..., c2=...) at main.cc:14 0x0000000100401233 in main () at main.cc:23 23 if (Intersects(c1, c2)) { Value returned is $1 = true \u5b9f\u5f15\u6570\u3067\u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408 auto c = SquareOfDistance ( c1 . Center (), c2 . Center ()); \u306e\u3088\u3046\u306b\u5b9f\u5f15\u6570\u3068\u3057\u3066\u4ed6\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b step \u3068 finish \u3092\u4ea4\u4e92\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u5b9f\u5f15\u6570\u3092\u6c42\u3081\u308b\u5404\u51e6\u7406\u3068 \u5b9f\u5f15\u6570\u3092\u5b9a\u3081\u305f\u5f8c\u306b\u547c\u3073\u51fa\u3059\u95a2\u6570\u3092\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) break Intersects (gdb) run Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) step Circle::Center (this=0xffffcb90) at circle.h:12 12 return center_; (gdb) finish Run till exit from #0 Circle::Center (this=0xffffcb90) at circle.h:12 0x0000000100401133 in Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); Value returned is $1 = {x_ = 5, y_ = 0} (gdb) step Circle::Center (this=0xffffcbb0) at circle.h:12 12 return center_; (gdb) finish Run till exit from #0 Circle::Center (this=0xffffcbb0) at circle.h:12 0x0000000100401143 in Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); Value returned is $2 = {x_ = 1, y_ = 2} (gdb) step SquareOfDistance (p=..., q=...) at main.cc:10 10 return SquareOf(q.X() - p.X()) + SquareOf(q.Y() - p.Y()); \u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0 \u00b6 \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> int GreatestCommonDivisor ( int a , int b ) { if ( a == 0 ) { return b ; } return GreatestCommonDivisor ( b % a , a ); } int main () { int a = 12 ; int b = 18 ; std :: cout << a << \" \u3068 \" << b << \" \u306e\u6700\u5927\u516c\u7d04\u6570\u306f \" << GreatestCommonDivisor ( a , b ) << \" \u3067\u3059\" << std :: endl ; return 0 ; } \u8868\u793a \u00b6 backtrace \u3067\u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u306e\u4e00\u89a7\u3092\u8868\u793a\u3057\u307e\u3059\u3002 \u73fe\u5728\u306e\u7b87\u6240\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 (gdb) break main.cc:5 (gdb) run Thread 1 \"a\" hit Breakpoint 1, GreatestCommonDivisor (a=0, b=6) at main.cc:5 5 return b; (gdb) backtrace #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 #1 0x00000001004010ac in GreatestCommonDivisor (a=6, b=12) at main.cc:8 #2 0x00000001004010ac in GreatestCommonDivisor (a=12, b=18) at main.cc:8 #3 0x000000010040111f in main () at main.cc:15 backtrace \u306f bt \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) b main.cc:5 Breakpoint 1 at 0x100401094: file main.cc, line 5. (gdb) r Thread 1 \"a\" hit Breakpoint 1, GreatestCommonDivisor (a=0, b=6) at main.cc:5 5 return b; (gdb) bt #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 #1 0x00000001004010ac in GreatestCommonDivisor (a=6, b=12) at main.cc:8 #2 0x00000001004010ac in GreatestCommonDivisor (a=12, b=18) at main.cc:8 #3 0x000000010040111f in main () at main.cc:15 \u79fb\u52d5 \u00b6 up \u3084 down \u3067 GDB \u304c\u53c2\u7167\u3059\u308b\u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u3092\u4e0a\u4e0b\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002 GDB \u306e\u53c2\u7167\u7b87\u6240\u304c\u79fb\u52d5\u3059\u308b\u3060\u3051\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u7b87\u6240\u306f\u79fb\u52d5\u3057\u307e\u305b\u3093\u3002 (gdb) backtrace #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 #1 0x00000001004010ac in GreatestCommonDivisor (a=6, b=12) at main.cc:8 #2 0x00000001004010ac in GreatestCommonDivisor (a=12, b=18) at main.cc:8 #3 0x000000010040111f in main () at main.cc:15 (gdb) up #1 0x00000001004010ac in GreatestCommonDivisor (a=6, b=12) at main.cc:8 8 return GreatestCommonDivisor(b % a, a); (gdb) down #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 5 return b; frame \u3067 GDB \u304c\u53c2\u7167\u3057\u3066\u3044\u308b\u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) frame #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 5 return b; frame n \u3067 #n \u306e\u30d5\u30ec\u30fc\u30e0\u3078\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002 (gdb) frame #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 5 return b; (gdb) frame 3 #3 0x000000010040111f in main () at main.cc:15 15 << GreatestCommonDivisor(a, b) << \" \u3067\u3059\" << std::endl; (gdb) frame #3 0x000000010040111f in main () at main.cc:15 15 << GreatestCommonDivisor(a, b) << \" \u3067\u3059\" << std::endl; frame \u306f f \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) bt #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 #1 0x00000001004010ac in GreatestCommonDivisor (a=6, b=12) at main.cc:8 #2 0x00000001004010ac in GreatestCommonDivisor (a=12, b=18) at main.cc:8 #3 0x000000010040111f in main () at main.cc:15 (gdb) f 3 #3 0x000000010040111f in main () at main.cc:15 15 << GreatestCommonDivisor(a, b) << \" \u3067\u3059\" << std::endl; \u4fbf\u5229\u306a\u6a5f\u80fd \u00b6 set pretty print \u00b6 \u30af\u30e9\u30b9\u3084\u69cb\u9020\u4f53\u3092\u8868\u793a\u3059\u308b\u969b\u306b\u898b\u3084\u3059\u304f\u6574\u5f62\u3059\u308b\u304b\u3069\u3046\u304b\u8a2d\u5b9a\u3057\u307e\u3059\u3002 set print pretty on \u3067\u6709\u52b9\u3001 set print pretty off \u3067\u7121\u52b9\u306b\u3057\u307e\u3059\u3002 \u4f7f\u7528\u4f8b \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct Point { double x ; double y ; Point ( double x , double y ) : x ( x ), y ( y ) {} }; struct Triangle { Point a ; Point b ; Point c ; Triangle ( const Point & a , const Point & b , const Point & c ) : a ( a ), b ( b ), c ( c ) {} }; int main () { Triangle t ( Point ( 1 , 1 ), Point ( 2 , 0 ), Point ( 3 , 2 )); return 0 ; } print \u3067 t \u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\u969b\u306b\u6574\u5f62\u306e\u6709\u7121\u3067\u6b21\u306e\u3088\u3046\u306b\u51fa\u529b\u304c\u5909\u5316\u3057\u307e\u3059\u3002 (gdb) break main.cc:19 (gdb) run Thread 1 \"a\" hit Breakpoint 1, main () at main.cc:19 19 return 0; (gdb) set print pretty on (gdb) print t $1 = { a = { x = 1, y = 1 }, b = { x = 2, y = 0 }, c = { x = 3, y = 2 } } (gdb) set print pretty off (gdb) print t $2 = {a = {x = 1, y = 1}, b = {x = 2, y = 0}, c = {x = 3, y = 2}} set pagination \u00b6 \u51fa\u529b\u3059\u308b\u60c5\u5831\u304c\u753b\u9762\u5185\u306b\u53ce\u307e\u3089\u306a\u3044\u5834\u5408\u306b \u53ce\u307e\u308b\u91cf\u305a\u3064\u3067\u30da\u30fc\u30b8\u9001\u308a\u3092\u3059\u308b\u304b\u3069\u3046\u304b\u8a2d\u5b9a\u3057\u307e\u3059\u3002 set pagination on \u3067\u6709\u52b9\u3001 set pagination off \u3067\u7121\u52b9\u306b\u3057\u307e\u3059\u3002 \u4f7f\u7528\u4f8b \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> int Fibonacchi ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return Fibonacchi ( n - 1 ) + Fibonacchi ( n - 2 ); } int main () { std :: cout << Fibonacchi ( 100 ) << std :: endl ; } \u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u306e\u4e00\u89a7\u304c\u753b\u9762\u5185\u306b\u53ce\u307e\u3089\u306a\u3044\u5834\u5408\u306b \u30da\u30fc\u30b8\u9001\u308a\u306e\u6709\u7121\u3067\u6b21\u306e\u3088\u3046\u306b\u51fa\u529b\u304c\u5909\u5316\u3057\u307e\u3059\u3002 (gdb) break main.cc:5 Breakpoint 1 at 0x100401097: file main.cc, line 5. (gdb) run Thread 1 \"a\" hit Breakpoint 1, Fibonacchi (n=0) at main.cc:5 5 return 0; (gdb) set pagination on (gdb) backtrace #0 Fibonacchi (n=0) at main.cc:5 #1 0x00000001004010c7 in Fibonacchi (n=2) at main.cc:10 #2 0x00000001004010b8 in Fibonacchi (n=3) at main.cc:10 #3 0x00000001004010b8 in Fibonacchi (n=4) at main.cc:10 #4 0x00000001004010b8 in Fibonacchi (n=5) at main.cc:10 #5 0x00000001004010b8 in Fibonacchi (n=6) at main.cc:10 #6 0x00000001004010b8 in Fibonacchi (n=7) at main.cc:10 #7 0x00000001004010b8 in Fibonacchi (n=8) at main.cc:10 #8 0x00000001004010b8 in Fibonacchi (n=9) at main.cc:10 #9 0x00000001004010b8 in Fibonacchi (n=10) at main.cc:10 #10 0x00000001004010b8 in Fibonacchi (n=11) at main.cc:10 #11 0x00000001004010b8 in Fibonacchi (n=12) at main.cc:10 #12 0x00000001004010b8 in Fibonacchi (n=13) at main.cc:10 #13 0x00000001004010b8 in Fibonacchi (n=14) at main.cc:10 #14 0x00000001004010b8 in Fibonacchi (n=15) at main.cc:10 #15 0x00000001004010b8 in Fibonacchi (n=16) at main.cc:10 #16 0x00000001004010b8 in Fibonacchi (n=17) at main.cc:10 #17 0x00000001004010b8 in Fibonacchi (n=18) at main.cc:10 #18 0x00000001004010b8 in Fibonacchi (n=19) at main.cc:10 #19 0x00000001004010b8 in Fibonacchi (n=20) at main.cc:10 #20 0x00000001004010b8 in Fibonacchi (n=21) at main.cc:10 #21 0x00000001004010b8 in Fibonacchi (n=22) at main.cc:10 #22 0x00000001004010b8 in Fibonacchi (n=23) at main.cc:10 --Type <RET> for more, q to quit, c to continue without paging--q Quit (gdb) set pagination off (gdb) backtrace #0 Fibonacchi (n=0) at main.cc:5 #1 0x00000001004010c7 in Fibonacchi (n=2) at main.cc:10 #2 0x00000001004010b8 in Fibonacchi (n=3) at main.cc:10 #3 0x00000001004010b8 in Fibonacchi (n=4) at main.cc:10 #4 0x00000001004010b8 in Fibonacchi (n=5) at main.cc:10 #5 0x00000001004010b8 in Fibonacchi (n=6) at main.cc:10 #6 0x00000001004010b8 in Fibonacchi (n=7) at main.cc:10 #7 0x00000001004010b8 in Fibonacchi (n=8) at main.cc:10 #8 0x00000001004010b8 in Fibonacchi (n=9) at main.cc:10 #9 0x00000001004010b8 in Fibonacchi (n=10) at main.cc:10 #10 0x00000001004010b8 in Fibonacchi (n=11) at main.cc:10 #11 0x00000001004010b8 in Fibonacchi (n=12) at main.cc:10 #12 0x00000001004010b8 in Fibonacchi (n=13) at main.cc:10 #13 0x00000001004010b8 in Fibonacchi (n=14) at main.cc:10 #14 0x00000001004010b8 in Fibonacchi (n=15) at main.cc:10 #15 0x00000001004010b8 in Fibonacchi (n=16) at main.cc:10 #16 0x00000001004010b8 in Fibonacchi (n=17) at main.cc:10 #17 0x00000001004010b8 in Fibonacchi (n=18) at main.cc:10 #18 0x00000001004010b8 in Fibonacchi (n=19) at main.cc:10 #19 0x00000001004010b8 in Fibonacchi (n=20) at main.cc:10 #20 0x00000001004010b8 in Fibonacchi (n=21) at main.cc:10 #21 0x00000001004010b8 in Fibonacchi (n=22) at main.cc:10 #22 0x00000001004010b8 in Fibonacchi (n=23) at main.cc:10 #23 0x00000001004010b8 in Fibonacchi (n=24) at main.cc:10 #24 0x00000001004010b8 in Fibonacchi (n=25) at main.cc:10 #25 0x00000001004010e7 in main () at main.cc:14 \u53c2\u8003 \u00b6 GDB User Manual","title":"GDB \u306b\u3088\u308b CUI \u30c7\u30d0\u30c3\u30b0"},{"location":"debug-gdb/#gdb-cui","text":"","title":"GDB \u306b\u3088\u308b CUI \u30c7\u30d0\u30c3\u30b0"},{"location":"debug-gdb/#gdb","text":"","title":"GDB \u306e\u8d77\u52d5\u3068\u7d42\u4e86"},{"location":"debug-gdb/#_1","text":"\u30c7\u30d0\u30c3\u30b0\u30d3\u30eb\u30c9\u3055\u308c\u305f a.exe \u3092\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u305f\u3081\u306b \u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066 GDB \u3092\u8d77\u52d5\u3057\u307e\u3059\u3002 $ gdb a.exe GDB \u306f\u8d77\u52d5\u6642\u306b\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3069\u306e\u60c5\u5831\u3092\u51fa\u529b\u3057\u307e\u3059\u3002 a.exe \u306e\u8aad\u307f\u8fbc\u307f\u306b\u6210\u529f\u3059\u308b\u3068\u30d0\u30fc\u30b8\u30e7\u30f3\u306a\u3069\u306e\u60c5\u5831\u306e\u5f8c\u306b Reading symbols from ./a.exe...done. \u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 \u30d7\u30ed\u30f3\u30d7\u30c8\u3068\u547c\u3070\u308c\u308b\u6587\u5b57\u5217 (gdb) \u304c\u51fa\u529b\u3055\u308c\u308b\u3068 GDB \u306e\u30b3\u30de\u30f3\u30c9\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"\u8d77\u52d5"},{"location":"debug-gdb/#_2","text":"quit \u3067 GDB \u3092\u7d42\u4e86\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) quit quit \u306f q \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) q","title":"\u7d42\u4e86"},{"location":"debug-gdb/#_3","text":"run \u3067\u30c7\u30d0\u30c3\u30b0\u5bfe\u8c61\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 (gdb) run run \u306f r \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) r \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\u3060\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u307e\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002","title":"\u30c7\u30d0\u30c3\u30b0\u958b\u59cb"},{"location":"debug-gdb/#_4","text":"\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 #include <iostream> #include \"sum.h\" int main () { std :: cout << Sum ( 1 , 2 ) << std :: endl ; return 0 ; } sum.h 1 2 3 4 5 6 #ifndef SUM_H_ #define SUM_H_ int Sum ( int a , int b ); #endif // SUM_H_ sum.cc 1 2 3 4 5 #include \"sum.h\" int Sum ( int a , int b ) { return a + b ; }","title":"\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8"},{"location":"debug-gdb/#_5","text":"break \u30d5\u30a1\u30a4\u30eb:\u884c\u756a\u53f7 \u307e\u305f\u306f break \u95a2\u6570\u540d \u3067\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002 (gdb) break main.cc:6 Breakpoint 1 at 0x10040108d: file main.cc, line 6. (gdb) break Sum Breakpoint 2 at 0x10040113a: file sum.cc, line 4. break \u306f b \u3068\u7701\u7565\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002 (gdb) b main.cc:6 Breakpoint 1 at 0x10040108d: file main.cc, line 6. (gdb) b Sum Breakpoint 2 at 0x10040113a: file sum.cc, line 4.","title":"\u8ffd\u52a0"},{"location":"debug-gdb/#_6","text":"info breakpoints \u3067\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u306e\u4e00\u89a7\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) info breakpoints Num Type Disp Enb Address What 1 breakpoint keep y 0x000000010040108d in main() at main.cc:6 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 info \u306f i \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 breakpoints \u306f break \u3084 b \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) i b Num Type Disp Enb Address What 1 breakpoint keep y 0x000000010040108d in main() at main.cc:6 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4","title":"\u4e00\u89a7\u306e\u78ba\u8a8d"},{"location":"debug-gdb/#_7","text":"\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u305f\u72b6\u614b\u3067\u30c7\u30d0\u30c3\u30b0\u3092\u958b\u59cb\u3059\u308b\u3068\u3001 \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u5230\u9054\u3057\u305f\u6642\u70b9\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4e00\u6642\u505c\u6b62\u3057\u307e\u3059\u3002 (gdb) run Starting program: a.exe [New Thread 10676.0x3cf8] [New Thread 10676.0x1ab8] [New Thread 10676.0x17e4] [New Thread 10676.0x1494] [New Thread 10676.0x36a4] Thread 1 \"a\" hit Breakpoint 1, main () at main.cc:6 6 std::cout << Sum(1, 2) << std::endl;","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e00\u6642\u505c\u6b62"},{"location":"debug-gdb/#_8","text":"continue \u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u518d\u958b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u6b21\u306e\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u5230\u9054\u3059\u308b\u3068\u518d\u3073\u4e00\u6642\u505c\u6b62\u3057\u307e\u3059\u3002 (gdb) continue Continuing. Thread 1 \"a\" hit Breakpoint 2, Sum (a=1, b=2) at sum.cc:4 4 return a + b;","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u518d\u958b"},{"location":"debug-gdb/#_9","text":"delete n \u3067\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u524a\u9664\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 n \u306b\u306f info breakpoints \u306e Num \u306e\u5024\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002 (gdb) info breakpoints Num Type Disp Enb Address What 1 breakpoint keep y 0x000000010040108d in main() at main.cc:6 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 (gdb) delete 1 (gdb) info breakpoints Num Type Disp Enb Address What 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 delete \u306f d \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) i b Num Type Disp Enb Address What 1 breakpoint keep y 0x000000010040108d in main() at main.cc:6 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 (gdb) d 1 (gdb) i b Num Type Disp Enb Address What 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 delete \u3067\u5bfe\u8c61\u3092\u6307\u5b9a\u3057\u306a\u3044\u5834\u5408\u306b\u306f\u3059\u3079\u3066\u306e\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u524a\u9664\u3057\u307e\u3059\u3002 (gdb) info breakpoints Num Type Disp Enb Address What 1 breakpoint keep y 0x000000010040108d in main() at main.cc:6 2 breakpoint keep y 0x000000010040113a in Sum(int, int) at sum.cc:4 (gdb) delete Delete all breakpoints? (y or n) y (gdb) info breakpoints No breakpoints or watchpoints.","title":"\u524a\u9664"},{"location":"debug-gdb/#_10","text":"\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <iostream> #include \"swap.h\" // \u6700\u5927\u516c\u7d04\u6570 int GreatestCommonDivisor ( int a , int b ) { while ( a != 0 ) { b = b % a ; Swap ( & a , & b ); } return b ; } // \u6700\u5c0f\u516c\u500d\u6570 int LeastCommonMultiple ( int a , int b ) { int gcd = GreatestCommonDivisor ( a , b ); return a * b / gcd ; } int main () { int a = 12 ; int b = 18 ; std :: cout << a << \" \u3068 \" << b << \" \u306e\u6700\u5c0f\u516c\u500d\u6570\u306f \" << LeastCommonMultiple ( a , b ) << \" \u3067\u3059\" << std :: endl ; return 0 ; } swap.h 1 2 3 4 5 6 7 #ifndef SWAP_H_ #define SWAP_H_ // 2\u3064\u306e\u5909\u6570\u306e\u5024\u3092\u5165\u308c\u66ff\u3048\u308b void Swap ( int * a , int * b ); #endif // SWAP_H_ swap.cc 1 2 3 4 5 6 7 #include \"swap.h\" void Swap ( int * a , int * b ) { int tmp = * a ; * a = * b ; * b = tmp ; }","title":"\u8a55\u4fa1\u5024\u306e\u8868\u793a"},{"location":"debug-gdb/#_11","text":"print \u3067\u5909\u6570\u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) break main.cc:17 (gdb) run Thread 1 \"a\" hit Breakpoint 1, LeastCommonMultiple (a=12, b=18) at main.cc:17 17 return a * b / gcd; (gdb) print a $1 = 12 (gdb) print b $2 = 18 (gdb) print gcd $3 = 6 print \u306f p \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) b main.cc:17 (gdb) r Thread 1 \"a\" hit Breakpoint 1, LeastCommonMultiple (a=12, b=18) at main.cc:17 17 return a * b / gcd; (gdb) p a $1 = 12 (gdb) p b $2 = 18 (gdb) p gcd $3 = 6","title":"\u5909\u6570\u306e\u5024\u3092\u78ba\u8a8d"},{"location":"debug-gdb/#_12","text":"\u5024\u3092\u78ba\u8a8d\u3059\u308b\u3068 $n = \u5024 \u3068\u51fa\u529b\u3055\u308c\u3001 $n \u3067\u7d50\u679c\u3092\u518d\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) break main.cc:8 (gdb) break main.cc:9 (gdb) run Starting program: a.exe Thread 1 \"a\" hit Breakpoint 1, GreatestCommonDivisor (a=12, b=18) at main.cc:8 8 b = b % a; (gdb) print b $1 = 18 (gdb) continue Continuing. Thread 1 \"a\" hit Breakpoint 2, GreatestCommonDivisor (a=12, b=6) at main.cc:9 9 Swap(&a, &b); (gdb) print b $2 = 6 (gdb) print $1 $3 = 18","title":"\u78ba\u8a8d\u3057\u305f\u5024\u306e\u518d\u5229\u7528"},{"location":"debug-gdb/#_13","text":"print \u3067\u306f\u5909\u6570\u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001 \u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u884c\u3063\u3066\u305d\u306e\u623b\u308a\u5024\u3092\u78ba\u8a8d\u3057\u305f\u308a\u3001\u4efb\u610f\u306e\u6f14\u7b97\u3092\u884c\u3063\u305f\u7d50\u679c\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) break main.cc:17 (gdb) run Thread 1 \"a\" hit Breakpoint 1, LeastCommonMultiple (a=12, b=18) at main.cc:17 17 return a * b / gcd; (gdb) print gcd $1 = 6 (gdb) print GreatestCommonDivisor(b, a) $2 = 6 \u5909\u6570\u306e\u5024\u3092\u5909\u66f4\u3059\u308b\u4ee3\u5165\u306a\u3069\u3082\u884c\u3048\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u526f\u4f5c\u7528\u306b\u6c17\u3092\u3064\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002 (gdb) break main.cc:17 (gdb) run Thread 1 \"a\" hit Breakpoint 1, LeastCommonMultiple (a=12, b=18) at main.cc:17 17 return a * b / gcd; (gdb) print gcd $1 = 6 (gdb) print gcd = 0 $2 = 0 (gdb) print gcd $3 = 0","title":"\u4efb\u610f\u306e\u51e6\u7406\u3092\u5b9f\u884c"},{"location":"debug-gdb/#_14","text":"\u5909\u6570\u304b\u3089\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b & \u3084\u30c7\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e * \u304c\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 (gdb) break main.cc:9 (gdb) break Swap (gdb) run Starting program: a.exe Thread 1 \"a\" hit Breakpoint 1, GreatestCommonDivisor (a=12, b=6) at main.cc:9 9 Swap(&a, &b); (gdb) print &a $1 = (int *) 0xffffcb70 (gdb) continue Continuing. Thread 1 \"a\" hit Breakpoint 2, Swap (a=0xffffcb70, b=0xffffcb78) at swap.cc:4 4 int tmp = *a; (gdb) print a $2 = (int *) 0xffffcb70 (gdb) print *a $3 = 12","title":"\u30dd\u30a4\u30f3\u30bf\u306b\u5bfe\u3059\u308b\u64cd\u4f5c"},{"location":"debug-gdb/#_15","text":"\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #include <iostream> #include \"circle.h\" double SquareOf ( double v ) { return v * v ; } double SquareOfDistance ( const Point & p , const Point & q ) { return SquareOf ( q . X () - p . X ()) + SquareOf ( q . Y () - p . Y ()); } bool Intersects ( const Circle & c1 , const Circle & c2 ) { auto c = SquareOfDistance ( c1 . Center (), c2 . Center ()); auto r = SquareOf ( c1 . Radius () + c2 . Radius ()); return c < r ; } int main () { Circle c1 ( Point ( 1 , 2 ), 3 ); Circle c2 ( Point ( 5 , 0 ), 2 ); if ( Intersects ( c1 , c2 )) { std :: cout << \"2\u3064\u306e\u5186\u306f\u4ea4\u5dee\u3057\u307e\u3059\" << std :: endl ; } else { std :: cout << \"2\u3064\u306e\u5186\u306f\u4ea4\u5dee\u3057\u307e\u305b\u3093\" << std :: endl ; } return 0 ; } circle.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 #ifndef CIRCLE_H_ #define CIRCLE_H_ #include \"point.h\" class Circle { public : Circle ( const Point & center , double radius ) : center_ ( center ), radius_ ( radius ) {} Point Center () const { return center_ ; } double Radius () const { return radius_ ; } private : Point center_ ; double radius_ ; }; #endif // CIRCLE_H_ point.h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #ifndef POINT_H_ #define POINT_H_ class Point { public : Point ( double x , double y ) : x_ ( x ), y_ ( y ) {} double X () const { return x_ ; } double Y () const { return y_ ; } private : double x_ ; double y_ ; }; #endif // POINT_H_","title":"\u30b9\u30c6\u30c3\u30d7\u5b9f\u884c"},{"location":"debug-gdb/#_16","text":"next \u3067\u73fe\u5728\u306e\u884c\u304b\u3089\u6b21\u306b\u51e6\u7406\u304c\u3042\u308b\u884c\u307e\u3067\u9032\u3081\u307e\u3059\u3002 (gdb) break Intersects (gdb) run Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) next 15 auto r = SquareOf(c1.Radius() + c2.Radius()); next \u306f n \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) b Intersects (gdb) r Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) n 15 auto r = SquareOf(c1.Radius() + c2.Radius());","title":"\u30b9\u30c6\u30c3\u30d7\u30aa\u30fc\u30d0\u30fc"},{"location":"debug-gdb/#_17","text":"step \u3067\u73fe\u5728\u306e\u51e6\u7406\u304b\u3089\u6b21\u306e\u51e6\u7406\u307e\u3067\u9032\u3081\u307e\u3059\u3002 \u73fe\u5728\u306e\u51e6\u7406\u304c\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u5834\u5408\u306b\u306f\u547c\u3073\u51fa\u3057\u305f\u95a2\u6570\u306e\u5185\u90e8\u3067\u505c\u6b62\u3057\u307e\u3059\u3002 (gdb) break Intersects (gdb) run Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) step Circle::Center (this=0xffffcb90) at circle.h:12 12 return center_; step \u306f s \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) b Intersects (gdb) r Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) s Circle::Center (this=0xffffcb90) at circle.h:12 12 return center_;","title":"\u30b9\u30c6\u30c3\u30d7\u30a4\u30f3"},{"location":"debug-gdb/#_18","text":"finish \u3067\u73fe\u5728\u306e\u95a2\u6570\u304c\u7d42\u4e86\u3057\u3066\u547c\u3073\u51fa\u3057\u5143\u306b\u623b\u308b\u307e\u3067\u9032\u3081\u307e\u3059\u3002 (gdb) break Intersects (gdb) run Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) finish Run till exit from #0 Intersects (c1=..., c2=...) at main.cc:14 0x0000000100401233 in main () at main.cc:23 23 if (Intersects(c1, c2)) { Value returned is $1 = true finish \u306f fin \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) b Intersects (gdb) r Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) fin Run till exit from #0 Intersects (c1=..., c2=...) at main.cc:14 0x0000000100401233 in main () at main.cc:23 23 if (Intersects(c1, c2)) { Value returned is $1 = true \u5b9f\u5f15\u6570\u3067\u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408 auto c = SquareOfDistance ( c1 . Center (), c2 . Center ()); \u306e\u3088\u3046\u306b\u5b9f\u5f15\u6570\u3068\u3057\u3066\u4ed6\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u3001 \u6b21\u306e\u3088\u3046\u306b step \u3068 finish \u3092\u4ea4\u4e92\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u5b9f\u5f15\u6570\u3092\u6c42\u3081\u308b\u5404\u51e6\u7406\u3068 \u5b9f\u5f15\u6570\u3092\u5b9a\u3081\u305f\u5f8c\u306b\u547c\u3073\u51fa\u3059\u95a2\u6570\u3092\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) break Intersects (gdb) run Thread 1 \"a\" hit Breakpoint 1, Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); (gdb) step Circle::Center (this=0xffffcb90) at circle.h:12 12 return center_; (gdb) finish Run till exit from #0 Circle::Center (this=0xffffcb90) at circle.h:12 0x0000000100401133 in Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); Value returned is $1 = {x_ = 5, y_ = 0} (gdb) step Circle::Center (this=0xffffcbb0) at circle.h:12 12 return center_; (gdb) finish Run till exit from #0 Circle::Center (this=0xffffcbb0) at circle.h:12 0x0000000100401143 in Intersects (c1=..., c2=...) at main.cc:14 14 auto c = SquareOfDistance(c1.Center(), c2.Center()); Value returned is $2 = {x_ = 1, y_ = 2} (gdb) step SquareOfDistance (p=..., q=...) at main.cc:10 10 return SquareOf(q.X() - p.X()) + SquareOf(q.Y() - p.Y());","title":"\u30b9\u30c6\u30c3\u30d7\u30a2\u30a6\u30c8"},{"location":"debug-gdb/#_19","text":"\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> int GreatestCommonDivisor ( int a , int b ) { if ( a == 0 ) { return b ; } return GreatestCommonDivisor ( b % a , a ); } int main () { int a = 12 ; int b = 18 ; std :: cout << a << \" \u3068 \" << b << \" \u306e\u6700\u5927\u516c\u7d04\u6570\u306f \" << GreatestCommonDivisor ( a , b ) << \" \u3067\u3059\" << std :: endl ; return 0 ; }","title":"\u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0"},{"location":"debug-gdb/#_20","text":"backtrace \u3067\u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u306e\u4e00\u89a7\u3092\u8868\u793a\u3057\u307e\u3059\u3002 \u73fe\u5728\u306e\u7b87\u6240\u306b\u5230\u9054\u3059\u308b\u307e\u3067\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002 (gdb) break main.cc:5 (gdb) run Thread 1 \"a\" hit Breakpoint 1, GreatestCommonDivisor (a=0, b=6) at main.cc:5 5 return b; (gdb) backtrace #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 #1 0x00000001004010ac in GreatestCommonDivisor (a=6, b=12) at main.cc:8 #2 0x00000001004010ac in GreatestCommonDivisor (a=12, b=18) at main.cc:8 #3 0x000000010040111f in main () at main.cc:15 backtrace \u306f bt \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) b main.cc:5 Breakpoint 1 at 0x100401094: file main.cc, line 5. (gdb) r Thread 1 \"a\" hit Breakpoint 1, GreatestCommonDivisor (a=0, b=6) at main.cc:5 5 return b; (gdb) bt #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 #1 0x00000001004010ac in GreatestCommonDivisor (a=6, b=12) at main.cc:8 #2 0x00000001004010ac in GreatestCommonDivisor (a=12, b=18) at main.cc:8 #3 0x000000010040111f in main () at main.cc:15","title":"\u8868\u793a"},{"location":"debug-gdb/#_21","text":"up \u3084 down \u3067 GDB \u304c\u53c2\u7167\u3059\u308b\u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u3092\u4e0a\u4e0b\u306b\u79fb\u52d5\u3057\u307e\u3059\u3002 GDB \u306e\u53c2\u7167\u7b87\u6240\u304c\u79fb\u52d5\u3059\u308b\u3060\u3051\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u7b87\u6240\u306f\u79fb\u52d5\u3057\u307e\u305b\u3093\u3002 (gdb) backtrace #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 #1 0x00000001004010ac in GreatestCommonDivisor (a=6, b=12) at main.cc:8 #2 0x00000001004010ac in GreatestCommonDivisor (a=12, b=18) at main.cc:8 #3 0x000000010040111f in main () at main.cc:15 (gdb) up #1 0x00000001004010ac in GreatestCommonDivisor (a=6, b=12) at main.cc:8 8 return GreatestCommonDivisor(b % a, a); (gdb) down #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 5 return b; frame \u3067 GDB \u304c\u53c2\u7167\u3057\u3066\u3044\u308b\u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 (gdb) frame #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 5 return b; frame n \u3067 #n \u306e\u30d5\u30ec\u30fc\u30e0\u3078\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002 (gdb) frame #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 5 return b; (gdb) frame 3 #3 0x000000010040111f in main () at main.cc:15 15 << GreatestCommonDivisor(a, b) << \" \u3067\u3059\" << std::endl; (gdb) frame #3 0x000000010040111f in main () at main.cc:15 15 << GreatestCommonDivisor(a, b) << \" \u3067\u3059\" << std::endl; frame \u306f f \u3068\u7701\u7565\u3067\u304d\u307e\u3059\u3002 (gdb) bt #0 GreatestCommonDivisor (a=0, b=6) at main.cc:5 #1 0x00000001004010ac in GreatestCommonDivisor (a=6, b=12) at main.cc:8 #2 0x00000001004010ac in GreatestCommonDivisor (a=12, b=18) at main.cc:8 #3 0x000000010040111f in main () at main.cc:15 (gdb) f 3 #3 0x000000010040111f in main () at main.cc:15 15 << GreatestCommonDivisor(a, b) << \" \u3067\u3059\" << std::endl;","title":"\u79fb\u52d5"},{"location":"debug-gdb/#_22","text":"","title":"\u4fbf\u5229\u306a\u6a5f\u80fd"},{"location":"debug-gdb/#set-pretty-print","text":"\u30af\u30e9\u30b9\u3084\u69cb\u9020\u4f53\u3092\u8868\u793a\u3059\u308b\u969b\u306b\u898b\u3084\u3059\u304f\u6574\u5f62\u3059\u308b\u304b\u3069\u3046\u304b\u8a2d\u5b9a\u3057\u307e\u3059\u3002 set print pretty on \u3067\u6709\u52b9\u3001 set print pretty off \u3067\u7121\u52b9\u306b\u3057\u307e\u3059\u3002 \u4f7f\u7528\u4f8b \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 struct Point { double x ; double y ; Point ( double x , double y ) : x ( x ), y ( y ) {} }; struct Triangle { Point a ; Point b ; Point c ; Triangle ( const Point & a , const Point & b , const Point & c ) : a ( a ), b ( b ), c ( c ) {} }; int main () { Triangle t ( Point ( 1 , 1 ), Point ( 2 , 0 ), Point ( 3 , 2 )); return 0 ; } print \u3067 t \u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\u969b\u306b\u6574\u5f62\u306e\u6709\u7121\u3067\u6b21\u306e\u3088\u3046\u306b\u51fa\u529b\u304c\u5909\u5316\u3057\u307e\u3059\u3002 (gdb) break main.cc:19 (gdb) run Thread 1 \"a\" hit Breakpoint 1, main () at main.cc:19 19 return 0; (gdb) set print pretty on (gdb) print t $1 = { a = { x = 1, y = 1 }, b = { x = 2, y = 0 }, c = { x = 3, y = 2 } } (gdb) set print pretty off (gdb) print t $2 = {a = {x = 1, y = 1}, b = {x = 2, y = 0}, c = {x = 3, y = 2}}","title":"set pretty print"},{"location":"debug-gdb/#set-pagination","text":"\u51fa\u529b\u3059\u308b\u60c5\u5831\u304c\u753b\u9762\u5185\u306b\u53ce\u307e\u3089\u306a\u3044\u5834\u5408\u306b \u53ce\u307e\u308b\u91cf\u305a\u3064\u3067\u30da\u30fc\u30b8\u9001\u308a\u3092\u3059\u308b\u304b\u3069\u3046\u304b\u8a2d\u5b9a\u3057\u307e\u3059\u3002 set pagination on \u3067\u6709\u52b9\u3001 set pagination off \u3067\u7121\u52b9\u306b\u3057\u307e\u3059\u3002 \u4f7f\u7528\u4f8b \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u8aac\u660e\u3057\u307e\u3059\u3002 main.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 #include <iostream> int Fibonacchi ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return Fibonacchi ( n - 1 ) + Fibonacchi ( n - 2 ); } int main () { std :: cout << Fibonacchi ( 100 ) << std :: endl ; } \u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u306e\u4e00\u89a7\u304c\u753b\u9762\u5185\u306b\u53ce\u307e\u3089\u306a\u3044\u5834\u5408\u306b \u30da\u30fc\u30b8\u9001\u308a\u306e\u6709\u7121\u3067\u6b21\u306e\u3088\u3046\u306b\u51fa\u529b\u304c\u5909\u5316\u3057\u307e\u3059\u3002 (gdb) break main.cc:5 Breakpoint 1 at 0x100401097: file main.cc, line 5. (gdb) run Thread 1 \"a\" hit Breakpoint 1, Fibonacchi (n=0) at main.cc:5 5 return 0; (gdb) set pagination on (gdb) backtrace #0 Fibonacchi (n=0) at main.cc:5 #1 0x00000001004010c7 in Fibonacchi (n=2) at main.cc:10 #2 0x00000001004010b8 in Fibonacchi (n=3) at main.cc:10 #3 0x00000001004010b8 in Fibonacchi (n=4) at main.cc:10 #4 0x00000001004010b8 in Fibonacchi (n=5) at main.cc:10 #5 0x00000001004010b8 in Fibonacchi (n=6) at main.cc:10 #6 0x00000001004010b8 in Fibonacchi (n=7) at main.cc:10 #7 0x00000001004010b8 in Fibonacchi (n=8) at main.cc:10 #8 0x00000001004010b8 in Fibonacchi (n=9) at main.cc:10 #9 0x00000001004010b8 in Fibonacchi (n=10) at main.cc:10 #10 0x00000001004010b8 in Fibonacchi (n=11) at main.cc:10 #11 0x00000001004010b8 in Fibonacchi (n=12) at main.cc:10 #12 0x00000001004010b8 in Fibonacchi (n=13) at main.cc:10 #13 0x00000001004010b8 in Fibonacchi (n=14) at main.cc:10 #14 0x00000001004010b8 in Fibonacchi (n=15) at main.cc:10 #15 0x00000001004010b8 in Fibonacchi (n=16) at main.cc:10 #16 0x00000001004010b8 in Fibonacchi (n=17) at main.cc:10 #17 0x00000001004010b8 in Fibonacchi (n=18) at main.cc:10 #18 0x00000001004010b8 in Fibonacchi (n=19) at main.cc:10 #19 0x00000001004010b8 in Fibonacchi (n=20) at main.cc:10 #20 0x00000001004010b8 in Fibonacchi (n=21) at main.cc:10 #21 0x00000001004010b8 in Fibonacchi (n=22) at main.cc:10 #22 0x00000001004010b8 in Fibonacchi (n=23) at main.cc:10 --Type <RET> for more, q to quit, c to continue without paging--q Quit (gdb) set pagination off (gdb) backtrace #0 Fibonacchi (n=0) at main.cc:5 #1 0x00000001004010c7 in Fibonacchi (n=2) at main.cc:10 #2 0x00000001004010b8 in Fibonacchi (n=3) at main.cc:10 #3 0x00000001004010b8 in Fibonacchi (n=4) at main.cc:10 #4 0x00000001004010b8 in Fibonacchi (n=5) at main.cc:10 #5 0x00000001004010b8 in Fibonacchi (n=6) at main.cc:10 #6 0x00000001004010b8 in Fibonacchi (n=7) at main.cc:10 #7 0x00000001004010b8 in Fibonacchi (n=8) at main.cc:10 #8 0x00000001004010b8 in Fibonacchi (n=9) at main.cc:10 #9 0x00000001004010b8 in Fibonacchi (n=10) at main.cc:10 #10 0x00000001004010b8 in Fibonacchi (n=11) at main.cc:10 #11 0x00000001004010b8 in Fibonacchi (n=12) at main.cc:10 #12 0x00000001004010b8 in Fibonacchi (n=13) at main.cc:10 #13 0x00000001004010b8 in Fibonacchi (n=14) at main.cc:10 #14 0x00000001004010b8 in Fibonacchi (n=15) at main.cc:10 #15 0x00000001004010b8 in Fibonacchi (n=16) at main.cc:10 #16 0x00000001004010b8 in Fibonacchi (n=17) at main.cc:10 #17 0x00000001004010b8 in Fibonacchi (n=18) at main.cc:10 #18 0x00000001004010b8 in Fibonacchi (n=19) at main.cc:10 #19 0x00000001004010b8 in Fibonacchi (n=20) at main.cc:10 #20 0x00000001004010b8 in Fibonacchi (n=21) at main.cc:10 #21 0x00000001004010b8 in Fibonacchi (n=22) at main.cc:10 #22 0x00000001004010b8 in Fibonacchi (n=23) at main.cc:10 #23 0x00000001004010b8 in Fibonacchi (n=24) at main.cc:10 #24 0x00000001004010b8 in Fibonacchi (n=25) at main.cc:10 #25 0x00000001004010e7 in main () at main.cc:14","title":"set pagination"},{"location":"debug-gdb/#_23","text":"GDB User Manual","title":"\u53c2\u8003"},{"location":"debug-vscode/","text":"Visual Studio Code \u306b\u3088\u308b GUI \u30c7\u30d0\u30c3\u30b0 \u00b6 Visual Studio Code \u304b\u3089 GDB \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067 GUI \u30c7\u30d0\u30c3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 launch.json \u306e\u8a2d\u5b9a \u00b6 Visual Studio Code \u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u72b6\u614b\u3067 Ctrl+Shift+P \u3092\u62bc\u3059\u3068\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u304c\u958b\u304d\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u306b Debug: Open launch.json \u3068\u5165\u529b\u3057\u3066 launch.json \u3092\u958b\u304d\u307e\u3059\u3002 launch.json \u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u306f \u74b0\u5883\u306e\u9078\u629e \u3068\u3044\u3046\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u308b\u306e\u3067 C++ (GDB/LLDB) \u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3067\u6b21\u306e\u3088\u3046\u306a\u5185\u5bb9\u306e launch.json \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002 { // IntelliSense \u3092\u4f7f\u7528\u3057\u3066\u5229\u7528\u53ef\u80fd\u306a\u5c5e\u6027\u3092\u5b66\u3079\u307e\u3059\u3002 // \u65e2\u5b58\u306e\u5c5e\u6027\u306e\u8aac\u660e\u3092\u30db\u30d0\u30fc\u3057\u3066\u8868\u793a\u3057\u307e\u3059\u3002 // \u8a73\u7d30\u60c5\u5831\u306f\u6b21\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"(gdb) Launch\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"enter program name, for example ${workspaceFolder}/a.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${workspaceFolder}\" , \"environment\" : [], \"externalConsole\" : true , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"/path/to/gdb\" , \"setupCommands\" : [ { \"description\" : \"Enable pretty-printing for gdb\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ] } ] } \u751f\u6210\u3055\u308c\u305f launch.json \u3092\u6b21\u306e\u3088\u3046\u306b\u7de8\u96c6\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30b0\u5bfe\u8c61\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\u3059\u308b ${workspaceFolder} \u3067 Visual Studio Code \u3067\u958b\u3044\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 gdb \u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\u3059\u308b msys2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30d1\u30b9\u914d\u4e0b\u306e usr/bin/gdb.exe \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 msys2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30d1\u30b9\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f C:/msys64 \u3067\u3059\u3002 sourceFileMap \u3092\u8ffd\u52a0\u3059\u308b GDB \u304b\u3089\u53d6\u5f97\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092 Windows \u306e\u30d1\u30b9\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\u3067\u3059\u3002 Windows \u306e\u30c9\u30e9\u30a4\u30d6\u30ec\u30bf\u30fc C:/ \u306f msys2 \u3067\u306f /c/ \u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002 { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"(gdb) Launch\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${workspaceFolder}/a.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${workspaceFolder}\" , \"environment\" : [], \"externalConsole\" : true , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"C:/msys64/usr/bin/gdb.exe\" , \"setupCommands\" : [ { \"description\" : \"Enable pretty-printing for gdb\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"sourceFileMap\" : { \"/c/\" : \"C:/\" } } ] } \u30c7\u30d0\u30c3\u30b0\u958b\u59cb \u00b6 \u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u306b Debug: Start Debugging \u3068\u5165\u529b\u3059\u308b\u3068 \u30c7\u30d0\u30c3\u30b0\u5bfe\u8c61\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Visual Studio Code \u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u72b6\u614b\u3067 F5 \u3092\u62bc\u3059\u3053\u3068\u3067\u3082 \u30c7\u30d0\u30c3\u30b0\u5bfe\u8c61\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u958b\u59cb\u3067\u304d\u307e\u3059\u3002 \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\u3060\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u307e\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u306e\u8ffd\u52a0\u3068\u524a\u9664 \u00b6 \u884c\u756a\u53f7\u306e\u5de6\u5074\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3053\u3068\u3067\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 \u3082\u3046\u4e00\u5ea6\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u524a\u9664\u3067\u304d\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e00\u6642\u505c\u6b62 \u00b6 \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u305f\u72b6\u614b\u3067\u30c7\u30d0\u30c3\u30b0\u3092\u958b\u59cb\u3059\u308b\u3068\u3001 \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u5230\u9054\u3057\u305f\u6642\u70b9\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4e00\u6642\u505c\u6b62\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30b0\u30c4\u30fc\u30eb\u30d0\u30fc \u00b6 \u5de6\u304b\u3089\u9806\u306b\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u518d\u958b \u30b9\u30c6\u30c3\u30d7\u30aa\u30fc\u30d0\u30fc \u30b9\u30c6\u30c3\u30d7\u30a4\u30f3 \u30b9\u30c6\u30c3\u30d7\u30a2\u30a6\u30c8 \u518d\u8d77\u52d5 \u30c7\u30d0\u30c3\u30b0\u7d42\u4e86 \u5909\u6570\u306e\u5024 \u00b6 \u73fe\u5728\u306e\u5909\u6570\u306e\u5024\u306f\u81ea\u52d5\u3067\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0 \u00b6 \u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u306e\u4e00\u89a7\u306f\u81ea\u52d5\u3067\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u5404\u30d5\u30ec\u30fc\u30e0\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3053\u3068\u3067\u30c7\u30d0\u30c3\u30ac\u306e\u53c2\u7167\u7b87\u6240\u3092\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002 \u53c2\u8003 \u00b6 Debugging in Visual Studio Code","title":"Visual Studio Code \u306b\u3088\u308b GUI \u30c7\u30d0\u30c3\u30b0"},{"location":"debug-vscode/#visual-studio-code-gui","text":"Visual Studio Code \u304b\u3089 GDB \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067 GUI \u30c7\u30d0\u30c3\u30b0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002","title":"Visual Studio Code \u306b\u3088\u308b GUI \u30c7\u30d0\u30c3\u30b0"},{"location":"debug-vscode/#launchjson","text":"Visual Studio Code \u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u72b6\u614b\u3067 Ctrl+Shift+P \u3092\u62bc\u3059\u3068\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u304c\u958b\u304d\u307e\u3059\u3002 \u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u306b Debug: Open launch.json \u3068\u5165\u529b\u3057\u3066 launch.json \u3092\u958b\u304d\u307e\u3059\u3002 launch.json \u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u306f \u74b0\u5883\u306e\u9078\u629e \u3068\u3044\u3046\u30c0\u30a4\u30a2\u30ed\u30b0\u304c\u51fa\u308b\u306e\u3067 C++ (GDB/LLDB) \u3092\u9078\u629e\u3059\u308b\u3053\u3068\u3067\u6b21\u306e\u3088\u3046\u306a\u5185\u5bb9\u306e launch.json \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002 { // IntelliSense \u3092\u4f7f\u7528\u3057\u3066\u5229\u7528\u53ef\u80fd\u306a\u5c5e\u6027\u3092\u5b66\u3079\u307e\u3059\u3002 // \u65e2\u5b58\u306e\u5c5e\u6027\u306e\u8aac\u660e\u3092\u30db\u30d0\u30fc\u3057\u3066\u8868\u793a\u3057\u307e\u3059\u3002 // \u8a73\u7d30\u60c5\u5831\u306f\u6b21\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044: https://go.microsoft.com/fwlink/?linkid=830387 \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"(gdb) Launch\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"enter program name, for example ${workspaceFolder}/a.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${workspaceFolder}\" , \"environment\" : [], \"externalConsole\" : true , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"/path/to/gdb\" , \"setupCommands\" : [ { \"description\" : \"Enable pretty-printing for gdb\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ] } ] } \u751f\u6210\u3055\u308c\u305f launch.json \u3092\u6b21\u306e\u3088\u3046\u306b\u7de8\u96c6\u3057\u307e\u3059\u3002 \u30c7\u30d0\u30c3\u30b0\u5bfe\u8c61\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\u3059\u308b ${workspaceFolder} \u3067 Visual Studio Code \u3067\u958b\u3044\u3066\u3044\u308b\u30d5\u30a9\u30eb\u30c0\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\u3002 gdb \u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\u3059\u308b msys2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30d1\u30b9\u914d\u4e0b\u306e usr/bin/gdb.exe \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 msys2 \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30d1\u30b9\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f C:/msys64 \u3067\u3059\u3002 sourceFileMap \u3092\u8ffd\u52a0\u3059\u308b GDB \u304b\u3089\u53d6\u5f97\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092 Windows \u306e\u30d1\u30b9\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\u3067\u3059\u3002 Windows \u306e\u30c9\u30e9\u30a4\u30d6\u30ec\u30bf\u30fc C:/ \u306f msys2 \u3067\u306f /c/ \u3068\u3057\u3066\u6271\u308f\u308c\u307e\u3059\u3002 { \"version\" : \"0.2.0\" , \"configurations\" : [ { \"name\" : \"(gdb) Launch\" , \"type\" : \"cppdbg\" , \"request\" : \"launch\" , \"program\" : \"${workspaceFolder}/a.exe\" , \"args\" : [], \"stopAtEntry\" : false , \"cwd\" : \"${workspaceFolder}\" , \"environment\" : [], \"externalConsole\" : true , \"MIMode\" : \"gdb\" , \"miDebuggerPath\" : \"C:/msys64/usr/bin/gdb.exe\" , \"setupCommands\" : [ { \"description\" : \"Enable pretty-printing for gdb\" , \"text\" : \"-enable-pretty-printing\" , \"ignoreFailures\" : true } ], \"sourceFileMap\" : { \"/c/\" : \"C:/\" } } ] }","title":"launch.json \u306e\u8a2d\u5b9a"},{"location":"debug-vscode/#_1","text":"\u30b3\u30de\u30f3\u30c9\u30d1\u30ec\u30c3\u30c8\u306b Debug: Start Debugging \u3068\u5165\u529b\u3059\u308b\u3068 \u30c7\u30d0\u30c3\u30b0\u5bfe\u8c61\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u958b\u59cb\u3057\u307e\u3059\u3002 Visual Studio Code \u3092\u8d77\u52d5\u3057\u3066\u3044\u308b\u72b6\u614b\u3067 F5 \u3092\u62bc\u3059\u3053\u3068\u3067\u3082 \u30c7\u30d0\u30c3\u30b0\u5bfe\u8c61\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u958b\u59cb\u3067\u304d\u307e\u3059\u3002 \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\u3060\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u307e\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002","title":"\u30c7\u30d0\u30c3\u30b0\u958b\u59cb"},{"location":"debug-vscode/#_2","text":"\u884c\u756a\u53f7\u306e\u5de6\u5074\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3053\u3068\u3067\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059\u3002 \u3082\u3046\u4e00\u5ea6\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u524a\u9664\u3067\u304d\u307e\u3059\u3002","title":"\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u306e\u8ffd\u52a0\u3068\u524a\u9664"},{"location":"debug-vscode/#_3","text":"\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u8ffd\u52a0\u3057\u305f\u72b6\u614b\u3067\u30c7\u30d0\u30c3\u30b0\u3092\u958b\u59cb\u3059\u308b\u3068\u3001 \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u306b\u5230\u9054\u3057\u305f\u6642\u70b9\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4e00\u6642\u505c\u6b62\u3057\u307e\u3059\u3002","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e00\u6642\u505c\u6b62"},{"location":"debug-vscode/#_4","text":"\u5de6\u304b\u3089\u9806\u306b\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u518d\u958b \u30b9\u30c6\u30c3\u30d7\u30aa\u30fc\u30d0\u30fc \u30b9\u30c6\u30c3\u30d7\u30a4\u30f3 \u30b9\u30c6\u30c3\u30d7\u30a2\u30a6\u30c8 \u518d\u8d77\u52d5 \u30c7\u30d0\u30c3\u30b0\u7d42\u4e86","title":"\u30c7\u30d0\u30c3\u30b0\u30c4\u30fc\u30eb\u30d0\u30fc"},{"location":"debug-vscode/#_5","text":"\u73fe\u5728\u306e\u5909\u6570\u306e\u5024\u306f\u81ea\u52d5\u3067\u8868\u793a\u3055\u308c\u307e\u3059\u3002","title":"\u5909\u6570\u306e\u5024"},{"location":"debug-vscode/#_6","text":"\u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0\u306e\u4e00\u89a7\u306f\u81ea\u52d5\u3067\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u5404\u30d5\u30ec\u30fc\u30e0\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3053\u3068\u3067\u30c7\u30d0\u30c3\u30ac\u306e\u53c2\u7167\u7b87\u6240\u3092\u79fb\u52d5\u3067\u304d\u307e\u3059\u3002","title":"\u30b9\u30bf\u30c3\u30af\u30d5\u30ec\u30fc\u30e0"},{"location":"debug-vscode/#_7","text":"Debugging in Visual Studio Code","title":"\u53c2\u8003"},{"location":"make-cmake/","text":"CMake \u00b6 CMake \u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u30d3\u30eb\u30c9\u81ea\u52d5\u5316\u30c4\u30fc\u30eb\u3067\u3059\u3002 \u5b9f\u969b\u306b\u306f CMake \u306b\u3088\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f9d\u5b58\u3059\u308b\u30d3\u30eb\u30c9\u624b\u9806\u3092\u751f\u6210\u3057\u3001 \u30d3\u30eb\u30c9\u306e\u5b9f\u884c\u306f\u305d\u306e\u624b\u9806\u3092\u5143\u306b\u4ed6\u306e\u30c4\u30fc\u30eb\u304c\u884c\u3044\u307e\u3059\u3002 \u305f\u3068\u3048\u3070 CMake \u306b\u3088\u3063\u3066 Makefile \u306e\u751f\u6210\u3068 Make \u306e\u5b9f\u884c\u304c\u884c\u308f\u308c\u307e\u3059\u3002 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pacman -S cmake Make \u3082\u5fc5\u8981\u306a\u306e\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u30d3\u30eb\u30c9\u5b9f\u884c \u00b6 cmake \u306f CMakeLists.txt \u3068\u3044\u3046\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002 main.cc \u3092\u30d3\u30eb\u30c9\u3057\u3066 a.exe \u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306f CMakeLists.txt \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u6b21\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002 cmake_minimum_required(VERSION 3.0) project(sample) add_executable(a main.cc) \u3053\u306e CMakeLists.txt \u3042\u308b\u72b6\u614b\u3067\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068 a.exe \u304c\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059\u3002 $ cmake . $ cmake --build . out-of-source \u30d3\u30eb\u30c9 \u00b6 \u30d3\u30eb\u30c9\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u306f \u4e0a\u8a18\u306e\u65b9\u6cd5\u3060\u3068 CMakeLists.txt \u306e\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3055\u308c\u307e\u3059\u3002 \u4e00\u822c\u306b\u751f\u6210\u3055\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u306f\u30d3\u30eb\u30c9\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u3068\u3059\u308b\u306e\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 cmake \u3067\u751f\u6210\u3055\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea out \u914d\u4e0b\u306b\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 $ mkdir -p out $ cd out $ cmake .. $ cd .. $ cmake --build out","title":"CMake"},{"location":"make-cmake/#cmake","text":"CMake \u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f9d\u5b58\u3057\u306a\u3044\u30d3\u30eb\u30c9\u81ea\u52d5\u5316\u30c4\u30fc\u30eb\u3067\u3059\u3002 \u5b9f\u969b\u306b\u306f CMake \u306b\u3088\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u4f9d\u5b58\u3059\u308b\u30d3\u30eb\u30c9\u624b\u9806\u3092\u751f\u6210\u3057\u3001 \u30d3\u30eb\u30c9\u306e\u5b9f\u884c\u306f\u305d\u306e\u624b\u9806\u3092\u5143\u306b\u4ed6\u306e\u30c4\u30fc\u30eb\u304c\u884c\u3044\u307e\u3059\u3002 \u305f\u3068\u3048\u3070 CMake \u306b\u3088\u3063\u3066 Makefile \u306e\u751f\u6210\u3068 Make \u306e\u5b9f\u884c\u304c\u884c\u308f\u308c\u307e\u3059\u3002","title":"CMake"},{"location":"make-cmake/#_1","text":"msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pacman -S cmake Make \u3082\u5fc5\u8981\u306a\u306e\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"make-cmake/#_2","text":"cmake \u306f CMakeLists.txt \u3068\u3044\u3046\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002 main.cc \u3092\u30d3\u30eb\u30c9\u3057\u3066 a.exe \u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306f CMakeLists.txt \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u6b21\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002 cmake_minimum_required(VERSION 3.0) project(sample) add_executable(a main.cc) \u3053\u306e CMakeLists.txt \u3042\u308b\u72b6\u614b\u3067\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068 a.exe \u304c\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059\u3002 $ cmake . $ cmake --build .","title":"\u30d3\u30eb\u30c9\u5b9f\u884c"},{"location":"make-cmake/#out-of-source","text":"\u30d3\u30eb\u30c9\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u306f \u4e0a\u8a18\u306e\u65b9\u6cd5\u3060\u3068 CMakeLists.txt \u306e\u3042\u308b\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3055\u308c\u307e\u3059\u3002 \u4e00\u822c\u306b\u751f\u6210\u3055\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u306f\u30d3\u30eb\u30c9\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u914d\u4e0b\u3068\u3059\u308b\u306e\u304c\u671b\u307e\u3057\u3044\u3067\u3059\u3002 cmake \u3067\u751f\u6210\u3055\u308c\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u30d3\u30eb\u30c9\u7528\u30c7\u30a3\u30ec\u30af\u30c8\u30ea out \u914d\u4e0b\u306b\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 $ mkdir -p out $ cd out $ cmake .. $ cd .. $ cmake --build out","title":"out-of-source \u30d3\u30eb\u30c9"},{"location":"make-make/","text":"Make \u00b6 Make \u306f1976\u5e74\u306b\u767b\u5834\u3057\u3066\u73fe\u5728\u3067\u3082\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30d3\u30eb\u30c9\u81ea\u52d5\u5316\u30c4\u30fc\u30eb\u3067\u3059\u3002 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pacman -S make \u30d3\u30eb\u30c9\u5b9f\u884c \u00b6 make \u306f Makefile \u3068\u3044\u3046\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002 main.cc \u3092\u30d3\u30eb\u30c9\u3057\u3066 a.exe \u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306f\u3001 Makefile \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u6b21\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002 1 2 a.exe: main.cc g++ -std=c++11 main.cc g++ \u306e\u524d\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u306f\u30bf\u30d6\u6587\u5b57\u3067\u3059\u3002 \u30b9\u30da\u30fc\u30b9\u6587\u5b57\u3067\u306f\u4ee3\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 \u3053\u306e Makefile \u304c\u3042\u308b\u72b6\u614b\u3067\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068 a.exe \u304c\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059\u3002 $ make a.exe a.exe: main.cc \u3068\u3044\u3046\u8a18\u8ff0\u306f a.exe \u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u306f main.cc \u304c\u5fc5\u8981\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002 a.exe \u306e\u3088\u3046\u306a\u751f\u6210\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u306e\u3053\u3068\u3092 \u30bf\u30fc\u30b2\u30c3\u30c8 \u3068\u547c\u3073\u307e\u3059\u3002 a.exe \u3092\u751f\u6210\u3057\u305f\u5f8c\u306b\u518d\u5ea6\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 $ make a.exe make: 'a.exe' \u306f\u66f4\u65b0\u6e08\u307f\u3067\u3059. a.exe \u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a main.cc \u3068 a.exe \u306e\u66f4\u65b0\u65e5\u6642\u3092\u78ba\u8a8d\u3057\u3066\u3001 a.exe \u3088\u308a main.cc \u306e\u65b9\u304c\u65b0\u3057\u3044\u5834\u5408\u306b\u306e\u307f\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3067\u30d3\u30eb\u30c9\u6642\u9593\u3092\u77ed\u7e2e\u3057\u3066\u304a\u308a\u3001 \u51e6\u7406\u304c\u4e0d\u8981\u3068\u5224\u65ad\u3055\u308c\u305f\u5834\u5408\u306b\u3053\u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 main.cc \u3092\u66f4\u65b0\u3059\u308b\u3068 a.exe \u3088\u308a\u3082\u66f4\u65b0\u65e5\u6642\u304c\u65b0\u3057\u304f\u306a\u308b\u305f\u3081\u30d3\u30eb\u30c9\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 2\u884c\u76ee\u3067\u306f\u5148\u982d\u306e\u6587\u5b57\u3092\u30bf\u30d6\u6587\u5b57\u306b\u3057\u3001 \u305d\u306e\u5f8c\u306b a.exe \u306e\u751f\u6210\u306e\u305f\u3081\u306b\u5b9f\u65bd\u3059\u308b\u30b3\u30de\u30f3\u30c9 g++ -std=c++11 main.cc \u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 make \u306f\u884c\u982d\u304c\u30bf\u30d6\u6587\u5b57\u3067\u3042\u308b\u884c\u3092\u30b3\u30de\u30f3\u30c9\u884c\u3068\u3057\u3066\u6271\u3046\u4ed5\u69d8\u3067\u3001\u30b9\u30da\u30fc\u30b9\u6587\u5b57\u3067\u306f\u4ee3\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 \u30d5\u30a1\u30a4\u30eb\u5358\u4f4d\u3067\u306e\u30b3\u30f3\u30d1\u30a4\u30eb \u8907\u6570\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6210\u308a\u7acb\u3064\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d3\u30eb\u30c9\u306f \u4e00\u822c\u306b\u6b21\u306e\u3088\u3046\u306b\u6bb5\u968e\u3092\u5206\u3051\u3066\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u7d50\u679c\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30f3\u30af\u3059\u308b \u3053\u3046\u3059\u308b\u3053\u3068\u3067\u5909\u66f4\u306e\u3042\u3063\u305f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\u3057\u3001 \u30ea\u30f3\u30af\u3092\u518d\u5b9f\u884c\u3059\u308c\u3070\u30d3\u30eb\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u305f\u3081\u4e0d\u8981\u306a\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u7701\u7565\u3057\u3066\u30d3\u30eb\u30c9\u6642\u9593\u3092\u77ed\u7e2e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u6b21\u306e\u3088\u3046\u306a Makefile \u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 a.exe: main.o util.o g++ -std=c++11 main.o util.o main.o: main.cc g++ -std=c++11 -c main.cc util.o: util.cc g++ -std=c++11 -c util.cc \u30bf\u30b9\u30af\u5b9f\u884c \u00b6 .PHONY \u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u64ec\u4f3c\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u751f\u6210\u4ee5\u5916\u306e\u30bf\u30b9\u30af\u5b9f\u884c\u306e\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 .PHONY: clean clean: rm -f a.exe .PHONY \u306b\u3088\u308b\u6307\u5b9a\u3092\u884c\u308f\u306a\u3044\u5834\u5408\u3001 \u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u540d\u79f0\u304c\u540c\u4e00\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u3068\u5b9f\u884c\u4e0d\u8981\u3068\u5224\u65ad\u3055\u308c\u3066\u5b9f\u884c\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002","title":"Make"},{"location":"make-make/#make","text":"Make \u306f1976\u5e74\u306b\u767b\u5834\u3057\u3066\u73fe\u5728\u3067\u3082\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30d3\u30eb\u30c9\u81ea\u52d5\u5316\u30c4\u30fc\u30eb\u3067\u3059\u3002","title":"Make"},{"location":"make-make/#_1","text":"msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 $ pacman -S make","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"make-make/#_2","text":"make \u306f Makefile \u3068\u3044\u3046\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u52d5\u4f5c\u3057\u307e\u3059\u3002 main.cc \u3092\u30d3\u30eb\u30c9\u3057\u3066 a.exe \u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306f\u3001 Makefile \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u3066\u6b21\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002 1 2 a.exe: main.cc g++ -std=c++11 main.cc g++ \u306e\u524d\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u306f\u30bf\u30d6\u6587\u5b57\u3067\u3059\u3002 \u30b9\u30da\u30fc\u30b9\u6587\u5b57\u3067\u306f\u4ee3\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002 \u3053\u306e Makefile \u304c\u3042\u308b\u72b6\u614b\u3067\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068 a.exe \u304c\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059\u3002 $ make a.exe a.exe: main.cc \u3068\u3044\u3046\u8a18\u8ff0\u306f a.exe \u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u306f main.cc \u304c\u5fc5\u8981\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002 a.exe \u306e\u3088\u3046\u306a\u751f\u6210\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u306e\u3053\u3068\u3092 \u30bf\u30fc\u30b2\u30c3\u30c8 \u3068\u547c\u3073\u307e\u3059\u3002 a.exe \u3092\u751f\u6210\u3057\u305f\u5f8c\u306b\u518d\u5ea6\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 $ make a.exe make: 'a.exe' \u306f\u66f4\u65b0\u6e08\u307f\u3067\u3059. a.exe \u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a main.cc \u3068 a.exe \u306e\u66f4\u65b0\u65e5\u6642\u3092\u78ba\u8a8d\u3057\u3066\u3001 a.exe \u3088\u308a main.cc \u306e\u65b9\u304c\u65b0\u3057\u3044\u5834\u5408\u306b\u306e\u307f\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3067\u30d3\u30eb\u30c9\u6642\u9593\u3092\u77ed\u7e2e\u3057\u3066\u304a\u308a\u3001 \u51e6\u7406\u304c\u4e0d\u8981\u3068\u5224\u65ad\u3055\u308c\u305f\u5834\u5408\u306b\u3053\u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 main.cc \u3092\u66f4\u65b0\u3059\u308b\u3068 a.exe \u3088\u308a\u3082\u66f4\u65b0\u65e5\u6642\u304c\u65b0\u3057\u304f\u306a\u308b\u305f\u3081\u30d3\u30eb\u30c9\u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 2\u884c\u76ee\u3067\u306f\u5148\u982d\u306e\u6587\u5b57\u3092\u30bf\u30d6\u6587\u5b57\u306b\u3057\u3001 \u305d\u306e\u5f8c\u306b a.exe \u306e\u751f\u6210\u306e\u305f\u3081\u306b\u5b9f\u65bd\u3059\u308b\u30b3\u30de\u30f3\u30c9 g++ -std=c++11 main.cc \u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 make \u306f\u884c\u982d\u304c\u30bf\u30d6\u6587\u5b57\u3067\u3042\u308b\u884c\u3092\u30b3\u30de\u30f3\u30c9\u884c\u3068\u3057\u3066\u6271\u3046\u4ed5\u69d8\u3067\u3001\u30b9\u30da\u30fc\u30b9\u6587\u5b57\u3067\u306f\u4ee3\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002 \u30d5\u30a1\u30a4\u30eb\u5358\u4f4d\u3067\u306e\u30b3\u30f3\u30d1\u30a4\u30eb \u8907\u6570\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u6210\u308a\u7acb\u3064\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30d3\u30eb\u30c9\u306f \u4e00\u822c\u306b\u6b21\u306e\u3088\u3046\u306b\u6bb5\u968e\u3092\u5206\u3051\u3066\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002 \u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u305f\u7d50\u679c\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u30ea\u30f3\u30af\u3059\u308b \u3053\u3046\u3059\u308b\u3053\u3068\u3067\u5909\u66f4\u306e\u3042\u3063\u305f\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u66f4\u65b0\u3057\u3001 \u30ea\u30f3\u30af\u3092\u518d\u5b9f\u884c\u3059\u308c\u3070\u30d3\u30eb\u30c9\u304c\u5b8c\u4e86\u3059\u308b\u305f\u3081\u4e0d\u8981\u306a\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u7701\u7565\u3057\u3066\u30d3\u30eb\u30c9\u6642\u9593\u3092\u77ed\u7e2e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u306b\u306f\u6b21\u306e\u3088\u3046\u306a Makefile \u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 a.exe: main.o util.o g++ -std=c++11 main.o util.o main.o: main.cc g++ -std=c++11 -c main.cc util.o: util.cc g++ -std=c++11 -c util.cc","title":"\u30d3\u30eb\u30c9\u5b9f\u884c"},{"location":"make-make/#_3","text":".PHONY \u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u64ec\u4f3c\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u751f\u6210\u4ee5\u5916\u306e\u30bf\u30b9\u30af\u5b9f\u884c\u306e\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002 .PHONY: clean clean: rm -f a.exe .PHONY \u306b\u3088\u308b\u6307\u5b9a\u3092\u884c\u308f\u306a\u3044\u5834\u5408\u3001 \u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u540d\u79f0\u304c\u540c\u4e00\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u3068\u5b9f\u884c\u4e0d\u8981\u3068\u5224\u65ad\u3055\u308c\u3066\u5b9f\u884c\u3055\u308c\u306a\u304f\u306a\u308a\u307e\u3059\u3002","title":"\u30bf\u30b9\u30af\u5b9f\u884c"},{"location":"test-how-to-gtest/","text":"Google Test \u306e\u4f7f\u3044\u65b9 \u00b6 Google Test \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb \u00b6 msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 Make \u3068 CMake \u304c\u5fc5\u8981\u306a\u306e\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u5148\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 $ cd /tmp $ wget 'https://github.com/google/googletest/archive/release-1.8.1.tar.gz' $ tar zxvf release-1.8.1.tar.gz $ mkdir -p /usr/local/src $ mv googletest-release-1.8.1 /usr/local/src $ cd /usr/local/src/googletest-release-1.8.1 $ mkdir build $ cd build $ cmake .. $ make $ make install \u5b9f\u884c\u4f8b \u00b6 \u4f8b\u3068\u3057\u3066\u3001 sample.h (.cc) \u306b\u5076\u6570\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570 IsEven \u3092\u4f5c\u6210\u3057\u3001\u3053\u306e\u95a2\u6570\u306e\u52d5\u4f5c\u3092\u30c6\u30b9\u30c8\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 sample.h 1 2 3 4 5 6 7 8 9 #ifndef SAMPLE_H_ #define SAMPLE_H_ /** * \u5165\u529b\u5024\u304c\u5076\u6570\u304b\u5224\u5b9a\u3059\u308b\u95a2\u6570 */ bool IsEven ( int x ); #endif // SAMPLE_H_ sample.cc 1 2 3 4 5 #include \"sample.h\" bool IsEven ( int x ) { return x % 2 == 0 ; } sample_test.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <gtest/gtest.h> #include \"sample.h\" TEST ( IsEvenTest , Negative ) { EXPECT_FALSE ( IsEven ( - 1 )); EXPECT_TRUE ( IsEven ( - 2 )); } TEST ( IsEvenTest , Zero ) { EXPECT_TRUE ( IsEven ( 0 )); } TEST ( IsEvenTest , Positive ) { EXPECT_FALSE ( IsEven ( 1 )); EXPECT_TRUE ( IsEven ( 2 )); } sample_test.cc \u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002 \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u306f\u3001Google Test \u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b gtest/gtest.h \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3001\u30c6\u30b9\u30c8\u5bfe\u8c61\u3068\u306a\u308b sample.h \u3082\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30c6\u30b9\u30c8\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u30b3\u30de\u30f3\u30c9\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u5272\u611b\u3057\u307e\u3059\u3002 # \u30d3\u30eb\u30c9 $ g++ -std = c++11 sample.cc sample_test.cc -o test -L/usr/local/lib -lgtest -lgtest_main # \u5b9f\u884c $ ./test.exe # \u5b9f\u884c\u7d50\u679c Running main () from /usr/local/src/googletest-release-1.8.1/googletest/src/gtest_main.cc [==========] Running 3 tests from 1 test case . [ ---------- ] Global test environment set-up. [ ---------- ] 3 tests from IsEvenTest [ RUN ] IsEvenTest.Negative [ OK ] IsEvenTest.Negative ( 0 ms ) [ RUN ] IsEvenTest.Zero [ OK ] IsEvenTest.Zero ( 0 ms ) [ RUN ] IsEvenTest.Positive [ OK ] IsEvenTest.Positive ( 0 ms ) [ ---------- ] 3 tests from IsEvenTest ( 0 ms total ) [ ---------- ] Global test environment tear-down [==========] 3 tests from 1 test case ran. ( 0 ms total ) [ PASSED ] 3 tests. \u6210\u529f\u3057\u305f\u30c6\u30b9\u30c8\u306f [ OK ] \u3068\u51fa\u529b\u3055\u308c\u3001\u5931\u6557\u3057\u305f\u30c6\u30b9\u30c8\u306f [ FAILED ] \u3068\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 \u307e\u305f\u3001\u6210\u529f\u3057\u3066\u901a\u904e\u3057\u305f\u30c6\u30b9\u30c8\u6570\u304c [ PASSED ] \u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002 \u521d\u6b69\u7684\u306a\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9 \u00b6 \u30c6\u30b9\u30c8\u95a2\u6570 \u00b6 Google Test \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b TEST() \u3092\u5229\u7528\u3057\u3066\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 TEST() \u306e\u7b2c1\u5f15\u6570\u306b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u540d\u3001\u7b2c2\u5f15\u6570\u306b\u30c6\u30b9\u30c8\u540d\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 TEST ( /* \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u540d(\u5927\u9805\u76ee)*/ , /* \u30c6\u30b9\u30c8\u540d(\u5c0f\u9805\u76ee) */ ) { // \u30c6\u30b9\u30c8\u95a2\u6570\u5185\u306f\u3001\u901a\u5e38\u901a\u308a C++ \u306e\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u53ef\u80fd } \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u540d\u3068\u30c6\u30b9\u30c8\u540d\u306b\u306f _ \u3092\u542b\u3093\u3067\u306f\u3044\u3051\u307e\u305b\u3093\u3002 \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3 \u00b6 Google Test \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001 \u30c6\u30b9\u30c8\u5bfe\u8c61\u30b3\u30fc\u30c9\u306e\u52d5\u4f5c\u3092\u691c\u8a3c\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 // true/false\u306e\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3 EXPECT_TRUE ( condition ); // condition \u304c true \u304b EXPECT_FALSE ( condition ); // condition \u304c false \u304b // 2\u3064\u306e\u5024\u3092\u6bd4\u8f03\u3059\u308b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3 EXPECT_EQ ( val1 , val2 ); // val1 == val2 \u304b EXPECT_NE ( val1 , val2 ); // val1 != val2 \u304b EXPECT_LT ( val1 , val2 ); // val1 < val2 \u304b EXPECT_LE ( val1 , val2 ); // val1 <= val2 \u304b EXPECT_GT ( val1 , val2 ); // val1 > val2 \u304b EXPECT_GE ( val1 , val2 ); // val1 >= val2 \u304b EXPECT_ \u3067\u59cb\u307e\u308b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306e\u4ed6\u306b\u3001 ASSERT_ \u3067\u59cb\u307e\u308b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 EXPECT_ \u306e\u5834\u5408\u306f\u3001\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u3066\u3082\u30c6\u30b9\u30c8\u95a2\u6570\u304c\u305d\u306e\u307e\u307e\u7d9a\u884c\u3055\u308c\u307e\u3059\u304c\u3001 ASSERT_ \u306e\u5834\u5408\u306f\u3001\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3059\u308b\u3068\u305d\u306e\u6642\u70b9\u3067\u30c6\u30b9\u30c8\u3092\u4e2d\u65ad\u3057\u3066\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u629c\u3051\u307e\u3059\u3002 \u8a66\u3057\u306b\u3001\u8aa4\u3063\u305f\u5b9f\u88c5\u304c\u306a\u3055\u308c\u305f\u95a2\u6570 IsEven \u3092\u5229\u7528\u3057\u3066\u3001\u30c6\u30b9\u30c8\u5931\u6557\u6642\u306e\u51fa\u529b\u3092\u78ba\u8a8d\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 sample.h 1 2 3 4 5 6 7 8 9 #ifndef SAMPLE_H_ #define SAMPLE_H_ /** * \u5165\u529b\u5024\u304c\u5076\u6570\u304b\u5224\u5b9a\u3059\u308b\u95a2\u6570 */ bool IsEven ( int x ); #endif // SAMPLE_H_ sample.cc 1 2 3 4 5 #include \"sample.h\" bool IsEven ( int x ) { return x % 2 == 1 ; // \u8aa4\u308a\u3002 x \u304c\u5947\u6570\u306e\u3068\u304d\u306b true \u306b\u306a\u3063\u3066\u3057\u307e\u3046\u2026 } sample_test.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> #include <gtest/gtest.h> #include \"sample.h\" TEST ( IsEvenTest , AssertPositive ) { ASSERT_FALSE ( IsEven ( 1 )); // ASSERT\u30c6\u30b9\u30c8\u306f\u5931\u6557\u3059\u308b\u3068\u4e2d\u65ad std :: cout << \"\u4e2d\u65ad\u306b\u3088\u308a\u3001\u3053\u306e\u6587\u5b57\u5217\u306f\u51fa\u529b\u3055\u308c\u306a\u3044\" << std :: endl ; ASSERT_TRUE ( IsEven ( 2 )); } TEST ( IsEvenTest , ExpectPositive ) { EXPECT_FALSE ( IsEven ( 1 )); // EXPECT\u30c6\u30b9\u30c8\u306f\u5931\u6557\u3057\u3066\u3082\u7d9a\u884c std :: cout << \"\u7d9a\u884c\u306e\u305f\u3081\u3001\u3053\u306e\u6587\u5b57\u5217\u306f\u51fa\u529b\u3055\u308c\u308b\" << std :: endl ; EXPECT_TRUE ( IsEven ( 2 )); } \u5b9f\u884c\u7d50\u679c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Running main () from /usr/local/src/googletest-release-1.8.1/googletest/src/gtest_main.cc [==========] Running 2 tests from 1 test case . [ ---------- ] Global test environment set-up. [ ---------- ] 2 tests from IsEvenTest [ RUN ] IsEvenTest.AssertPositive sample_test.cc:8: Failure Value of: IsEven ( 1 ) Actual: true Expected: false [ FAILED ] IsEvenTest.AssertPositive ( 1 ms ) [ RUN ] IsEvenTest.ExpectPositive sample_test.cc:14: Failure Value of: IsEven ( 1 ) Actual: true Expected: false \u7d9a\u884c\u306e\u305f\u3081\u3001\u3053\u306e\u6587\u5b57\u5217\u306f\u51fa\u529b\u3055\u308c\u308b sample_test.cc:16: Failure Value of: IsEven ( 2 ) Actual: false Expected: true [ FAILED ] IsEvenTest.ExpectPositive ( 0 ms ) [ ---------- ] 2 tests from IsEvenTest ( 1 ms total ) [ ---------- ] Global test environment tear-down [==========] 2 tests from 1 test case ran. ( 1 ms total ) [ PASSED ] 0 tests. [ FAILED ] 2 tests, listed below: [ FAILED ] IsEvenTest.AssertPositive [ FAILED ] IsEvenTest.ExpectPositive 2 FAILED TESTS \u30c6\u30b9\u30c8\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u5931\u6557\u7b87\u6240\u3068\u5931\u6557\u7406\u7531\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 \u53c2\u8003 \u00b6 Google Test \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u65e5\u672c\u8a9e\u8a33 Google Mock \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u65e5\u672c\u8a9e\u8a33 \u30b5\u30f3\u30d7\u30eb\u96c6 \u2014 google/googletest (GitHub)","title":"Google Test \u306e\u4f7f\u3044\u65b9"},{"location":"test-how-to-gtest/#google-test","text":"","title":"Google Test \u306e\u4f7f\u3044\u65b9"},{"location":"test-how-to-gtest/#google-test_1","text":"msys2 \u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4e0b\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002 Make \u3068 CMake \u304c\u5fc5\u8981\u306a\u306e\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u5148\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002 $ cd /tmp $ wget 'https://github.com/google/googletest/archive/release-1.8.1.tar.gz' $ tar zxvf release-1.8.1.tar.gz $ mkdir -p /usr/local/src $ mv googletest-release-1.8.1 /usr/local/src $ cd /usr/local/src/googletest-release-1.8.1 $ mkdir build $ cd build $ cmake .. $ make $ make install","title":"Google Test \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb"},{"location":"test-how-to-gtest/#_1","text":"\u4f8b\u3068\u3057\u3066\u3001 sample.h (.cc) \u306b\u5076\u6570\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570 IsEven \u3092\u4f5c\u6210\u3057\u3001\u3053\u306e\u95a2\u6570\u306e\u52d5\u4f5c\u3092\u30c6\u30b9\u30c8\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002 sample.h 1 2 3 4 5 6 7 8 9 #ifndef SAMPLE_H_ #define SAMPLE_H_ /** * \u5165\u529b\u5024\u304c\u5076\u6570\u304b\u5224\u5b9a\u3059\u308b\u95a2\u6570 */ bool IsEven ( int x ); #endif // SAMPLE_H_ sample.cc 1 2 3 4 5 #include \"sample.h\" bool IsEven ( int x ) { return x % 2 == 0 ; } sample_test.cc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <gtest/gtest.h> #include \"sample.h\" TEST ( IsEvenTest , Negative ) { EXPECT_FALSE ( IsEven ( - 1 )); EXPECT_TRUE ( IsEven ( - 2 )); } TEST ( IsEvenTest , Zero ) { EXPECT_TRUE ( IsEven ( 0 )); } TEST ( IsEvenTest , Positive ) { EXPECT_FALSE ( IsEven ( 1 )); EXPECT_TRUE ( IsEven ( 2 )); } sample_test.cc \u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002 \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u306f\u3001Google Test \u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b gtest/gtest.h \u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3001\u30c6\u30b9\u30c8\u5bfe\u8c61\u3068\u306a\u308b sample.h \u3082\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\u3044\u307e\u3059\u3002 \u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30c6\u30b9\u30c8\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u30b3\u30de\u30f3\u30c9\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u5272\u611b\u3057\u307e\u3059\u3002 # \u30d3\u30eb\u30c9 $ g++ -std = c++11 sample.cc sample_test.cc -o test -L/usr/local/lib -lgtest -lgtest_main # \u5b9f\u884c $ ./test.exe # \u5b9f\u884c\u7d50\u679c Running main () from /usr/local/src/googletest-release-1.8.1/googletest/src/gtest_main.cc [==========] Running 3 tests from 1 test case . [ ---------- ] Global test environment set-up. [ ---------- ] 3 tests from IsEvenTest [ RUN ] IsEvenTest.Negative [ OK ] IsEvenTest.Negative ( 0 ms ) [ RUN ] IsEvenTest.Zero [ OK ] IsEvenTest.Zero ( 0 ms ) [ RUN ] IsEvenTest.Positive [ OK ] IsEvenTest.Positive ( 0 ms ) [ ---------- ] 3 tests from IsEvenTest ( 0 ms total ) [ ---------- ] Global test environment tear-down [==========] 3 tests from 1 test case ran. ( 0 ms total ) [ PASSED ] 3 tests. \u6210\u529f\u3057\u305f\u30c6\u30b9\u30c8\u306f [ OK ] \u3068\u51fa\u529b\u3055\u308c\u3001\u5931\u6557\u3057\u305f\u30c6\u30b9\u30c8\u306f [ FAILED ] \u3068\u51fa\u529b\u3055\u308c\u307e\u3059\u3002 \u307e\u305f\u3001\u6210\u529f\u3057\u3066\u901a\u904e\u3057\u305f\u30c6\u30b9\u30c8\u6570\u304c [ PASSED ] \u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002","title":"\u5b9f\u884c\u4f8b"},{"location":"test-how-to-gtest/#_2","text":"","title":"\u521d\u6b69\u7684\u306a\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9"},{"location":"test-how-to-gtest/#_3","text":"Google Test \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b TEST() \u3092\u5229\u7528\u3057\u3066\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 TEST() \u306e\u7b2c1\u5f15\u6570\u306b\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u540d\u3001\u7b2c2\u5f15\u6570\u306b\u30c6\u30b9\u30c8\u540d\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002 TEST ( /* \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u540d(\u5927\u9805\u76ee)*/ , /* \u30c6\u30b9\u30c8\u540d(\u5c0f\u9805\u76ee) */ ) { // \u30c6\u30b9\u30c8\u95a2\u6570\u5185\u306f\u3001\u901a\u5e38\u901a\u308a C++ \u306e\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u53ef\u80fd } \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u540d\u3068\u30c6\u30b9\u30c8\u540d\u306b\u306f _ \u3092\u542b\u3093\u3067\u306f\u3044\u3051\u307e\u305b\u3093\u3002","title":"\u30c6\u30b9\u30c8\u95a2\u6570"},{"location":"test-how-to-gtest/#_4","text":"Google Test \u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u3001 \u30c6\u30b9\u30c8\u5bfe\u8c61\u30b3\u30fc\u30c9\u306e\u52d5\u4f5c\u3092\u691c\u8a3c\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002 // true/false\u306e\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3 EXPECT_TRUE ( condition ); // condition \u304c true \u304b EXPECT_FALSE ( condition ); // condition \u304c false \u304b // 2\u3064\u306e\u5024\u3092\u6bd4\u8f03\u3059\u308b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3 EXPECT_EQ ( val1 , val2 ); // val1 == val2 \u304b EXPECT_NE ( val1 , val2 ); // val1 != val2 \u304b EXPECT_LT ( val1 , val2 ); // val1 < val2 \u304b EXPECT_LE ( val1 , val2 ); // val1 <= val2 \u304b EXPECT_GT ( val1 , val2 ); // val1 > val2 \u304b EXPECT_GE ( val1 , val2 ); // val1 >= val2 \u304b EXPECT_ \u3067\u59cb\u307e\u308b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306e\u4ed6\u306b\u3001 ASSERT_ \u3067\u59cb\u307e\u308b\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002 EXPECT_ \u306e\u5834\u5408\u306f\u3001\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3057\u3066\u3082\u30c6\u30b9\u30c8\u95a2\u6570\u304c\u305d\u306e\u307e\u307e\u7d9a\u884c\u3055\u308c\u307e\u3059\u304c\u3001 ASSERT_ \u306e\u5834\u5408\u306f\u3001\u30c6\u30b9\u30c8\u306b\u5931\u6557\u3059\u308b\u3068\u305d\u306e\u6642\u70b9\u3067\u30c6\u30b9\u30c8\u3092\u4e2d\u65ad\u3057\u3066\u30c6\u30b9\u30c8\u95a2\u6570\u3092\u629c\u3051\u307e\u3059\u3002 \u8a66\u3057\u306b\u3001\u8aa4\u3063\u305f\u5b9f\u88c5\u304c\u306a\u3055\u308c\u305f\u95a2\u6570 IsEven \u3092\u5229\u7528\u3057\u3066\u3001\u30c6\u30b9\u30c8\u5931\u6557\u6642\u306e\u51fa\u529b\u3092\u78ba\u8a8d\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002 sample.h 1 2 3 4 5 6 7 8 9 #ifndef SAMPLE_H_ #define SAMPLE_H_ /** * \u5165\u529b\u5024\u304c\u5076\u6570\u304b\u5224\u5b9a\u3059\u308b\u95a2\u6570 */ bool IsEven ( int x ); #endif // SAMPLE_H_ sample.cc 1 2 3 4 5 #include \"sample.h\" bool IsEven ( int x ) { return x % 2 == 1 ; // \u8aa4\u308a\u3002 x \u304c\u5947\u6570\u306e\u3068\u304d\u306b true \u306b\u306a\u3063\u3066\u3057\u307e\u3046\u2026 } sample_test.cpp 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 #include <iostream> #include <gtest/gtest.h> #include \"sample.h\" TEST ( IsEvenTest , AssertPositive ) { ASSERT_FALSE ( IsEven ( 1 )); // ASSERT\u30c6\u30b9\u30c8\u306f\u5931\u6557\u3059\u308b\u3068\u4e2d\u65ad std :: cout << \"\u4e2d\u65ad\u306b\u3088\u308a\u3001\u3053\u306e\u6587\u5b57\u5217\u306f\u51fa\u529b\u3055\u308c\u306a\u3044\" << std :: endl ; ASSERT_TRUE ( IsEven ( 2 )); } TEST ( IsEvenTest , ExpectPositive ) { EXPECT_FALSE ( IsEven ( 1 )); // EXPECT\u30c6\u30b9\u30c8\u306f\u5931\u6557\u3057\u3066\u3082\u7d9a\u884c std :: cout << \"\u7d9a\u884c\u306e\u305f\u3081\u3001\u3053\u306e\u6587\u5b57\u5217\u306f\u51fa\u529b\u3055\u308c\u308b\" << std :: endl ; EXPECT_TRUE ( IsEven ( 2 )); } \u5b9f\u884c\u7d50\u679c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 Running main () from /usr/local/src/googletest-release-1.8.1/googletest/src/gtest_main.cc [==========] Running 2 tests from 1 test case . [ ---------- ] Global test environment set-up. [ ---------- ] 2 tests from IsEvenTest [ RUN ] IsEvenTest.AssertPositive sample_test.cc:8: Failure Value of: IsEven ( 1 ) Actual: true Expected: false [ FAILED ] IsEvenTest.AssertPositive ( 1 ms ) [ RUN ] IsEvenTest.ExpectPositive sample_test.cc:14: Failure Value of: IsEven ( 1 ) Actual: true Expected: false \u7d9a\u884c\u306e\u305f\u3081\u3001\u3053\u306e\u6587\u5b57\u5217\u306f\u51fa\u529b\u3055\u308c\u308b sample_test.cc:16: Failure Value of: IsEven ( 2 ) Actual: false Expected: true [ FAILED ] IsEvenTest.ExpectPositive ( 0 ms ) [ ---------- ] 2 tests from IsEvenTest ( 1 ms total ) [ ---------- ] Global test environment tear-down [==========] 2 tests from 1 test case ran. ( 1 ms total ) [ PASSED ] 0 tests. [ FAILED ] 2 tests, listed below: [ FAILED ] IsEvenTest.AssertPositive [ FAILED ] IsEvenTest.ExpectPositive 2 FAILED TESTS \u30c6\u30b9\u30c8\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u5931\u6557\u7b87\u6240\u3068\u5931\u6557\u7406\u7531\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002","title":"\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3"},{"location":"test-how-to-gtest/#_5","text":"Google Test \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u65e5\u672c\u8a9e\u8a33 Google Mock \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u65e5\u672c\u8a9e\u8a33 \u30b5\u30f3\u30d7\u30eb\u96c6 \u2014 google/googletest (GitHub)","title":"\u53c2\u8003"}]}